syntax = "proto3";

package api;

import "bandarqq_api.proto";
import "chinese_poker_game_api.proto";

option go_package = "github.com/ciaolink-game-platform/cgp-bing-module/api";

// solely for update desk state
// [chain] is in the form of 5-6-1-5 for example, meaning that there's a chain of 5-6/6-1/1-5 dominos had been played
// [player_turn] is uid of current turn player
// [hand] is information of 1 player hand, sending when player previously played 1 domino so their hand need an update
// [player_num_remained_cards] is data of num_remained card for each player
// [pass_penalty] indicate that a player was punished by not able to play any card, their chip being subtract by x1 bet. Player who played latest card receive that amount
// [table] is send when there's a change in number of player (join, leave)
// [legal_action] is send at the start of each player turn, showing them which action they can take
message GapleUpdateDesk {
  bool is_update_turn = 1;
  string player_turn = 2;
  bool is_update_chain = 3;
  repeated int32 chain = 4;
  bool is_update_player_hand = 5;
  GaplePressenceCards hand = 6;
  bool is_update_player_num_cards = 7;
  repeated GaplePlayerNumRemained player_num_remained_cards = 8;
  bool is_update_pass_penalty = 9;
  GaplePassPenalty pass_penalty = 10;
  bool is_update_table = 11;
  UpdateTable table = 12;
  bool is_update_legal_action = 13;
  repeated GapleAction legal_actions = 14;
}

enum GapleDominoChainPosition {
  CHAIN_UNSPECIFIED = 0; // not use
  CHAIN_HEAD = 1; // can or wanna append to chain's head
  CHAIN_TAIL = 2; // can or wanna append to chain's tail
  CHAIN_BOTH = 3; // can do both, but this type is not available when sending from client to server cuz user need to choose 1 end
}

// represent legal action that user can take,
// also represent user playing 1 domino, send from client to server
message GapleAction {
  Domino domino = 1;
  GapleDominoChainPosition position = 2;
}

// num of card remained
message GaplePlayerNumRemained {
  string user_id = 1;
  int32 num_remained = 2;
}

// message from server to client when next player can't play any domino, they lost x1 bet to previous played one
message GaplePassPenalty {
  string loser = 1;
  string gainer = 2;
  int32 chips = 3;
}

message GaplePressenceCards {
  string user_id = 1;
  repeated Domino dominos = 2;
}

// message send from server to client giving information of 1 player hand
message GapleUpdateDeal {
  GaplePressenceCards presence_card = 1;
}

message GapleUpdateGameState {
  GameState state = 1;
  int64 count_down = 2;
  repeated GaplePressenceCards presence_cards = 4;
}

enum GapleEndameType {
  GAPLE_ENDGAME_UNSPECIFIED = 0;
  GAPLE_ENDGAME_SINGLE = 1;
  GAPLE_ENDGAME_DOUBLE = 2;
  GAPLE_ENDGAME_TRIPLE = 3;
  GAPLE_ENDGAME_QUARTET = 4;
  GAPLE_ENDGAME_QUINTET = 5;
}

// send from server to client when game end
message GapleUpdateFinish {
  GapleEndameType endgame_type = 1;
  string winner = 2;
}
