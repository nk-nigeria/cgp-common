// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: baccarat.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BaccaratBetCell int32

const (
	BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_UNSPECIFIED BaccaratBetCell = 0
	BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER      BaccaratBetCell = 1
	BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_BANKER      BaccaratBetCell = 2
	BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_TIE         BaccaratBetCell = 3
	BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER_PAIR BaccaratBetCell = 4
	BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_BANKER_PAIR BaccaratBetCell = 5
)

// Enum value maps for BaccaratBetCell.
var (
	BaccaratBetCell_name = map[int32]string{
		0: "BACCARAT_BET_CELL_BACCARAT_CELL_UNSPECIFIED",
		1: "BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER",
		2: "BACCARAT_BET_CELL_BACCARAT_CELL_BANKER",
		3: "BACCARAT_BET_CELL_BACCARAT_CELL_TIE",
		4: "BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER_PAIR",
		5: "BACCARAT_BET_CELL_BACCARAT_CELL_BANKER_PAIR",
	}
	BaccaratBetCell_value = map[string]int32{
		"BACCARAT_BET_CELL_BACCARAT_CELL_UNSPECIFIED": 0,
		"BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER":      1,
		"BACCARAT_BET_CELL_BACCARAT_CELL_BANKER":      2,
		"BACCARAT_BET_CELL_BACCARAT_CELL_TIE":         3,
		"BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER_PAIR": 4,
		"BACCARAT_BET_CELL_BACCARAT_CELL_BANKER_PAIR": 5,
	}
)

func (x BaccaratBetCell) Enum() *BaccaratBetCell {
	p := new(BaccaratBetCell)
	*p = x
	return p
}

func (x BaccaratBetCell) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaccaratBetCell) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_proto_enumTypes[0].Descriptor()
}

func (BaccaratBetCell) Type() protoreflect.EnumType {
	return &file_baccarat_proto_enumTypes[0]
}

func (x BaccaratBetCell) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaccaratBetCell.Descriptor instead.
func (BaccaratBetCell) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{0}
}

type TypeWinBaccarat int32

const (
	TypeWinBaccarat_TYPEWIN_BACCARAT_NONE TypeWinBaccarat = 0
	TypeWinBaccarat_BANKER                TypeWinBaccarat = 1
	TypeWinBaccarat_PLAYER                TypeWinBaccarat = 2
	TypeWinBaccarat_TIE                   TypeWinBaccarat = 3
	TypeWinBaccarat_PLAYER_P              TypeWinBaccarat = 102 // Player win + Banker pair
	TypeWinBaccarat_PLAYER_B              TypeWinBaccarat = 12  // Player win + Player pair
	TypeWinBaccarat_PLAYER_PB             TypeWinBaccarat = 112 // Player win + Both pair
	TypeWinBaccarat_BANKER_P              TypeWinBaccarat = 101 // Banker win + Banker pair
	TypeWinBaccarat_BANKER_B              TypeWinBaccarat = 11  // Banker win + Player pair
	TypeWinBaccarat_BANKER_PB             TypeWinBaccarat = 111 // Banker win + Both pair
	TypeWinBaccarat_TIE_P                 TypeWinBaccarat = 103 // Tie + Banker pair
	TypeWinBaccarat_TIE_B                 TypeWinBaccarat = 13  // Tie + Player pair
	TypeWinBaccarat_TIE_PB                TypeWinBaccarat = 113 // Tie + Both pair
)

// Enum value maps for TypeWinBaccarat.
var (
	TypeWinBaccarat_name = map[int32]string{
		0:   "TYPEWIN_BACCARAT_NONE",
		1:   "BANKER",
		2:   "PLAYER",
		3:   "TIE",
		102: "PLAYER_P",
		12:  "PLAYER_B",
		112: "PLAYER_PB",
		101: "BANKER_P",
		11:  "BANKER_B",
		111: "BANKER_PB",
		103: "TIE_P",
		13:  "TIE_B",
		113: "TIE_PB",
	}
	TypeWinBaccarat_value = map[string]int32{
		"TYPEWIN_BACCARAT_NONE": 0,
		"BANKER":                1,
		"PLAYER":                2,
		"TIE":                   3,
		"PLAYER_P":              102,
		"PLAYER_B":              12,
		"PLAYER_PB":             112,
		"BANKER_P":              101,
		"BANKER_B":              11,
		"BANKER_PB":             111,
		"TIE_P":                 103,
		"TIE_B":                 13,
		"TIE_PB":                113,
	}
)

func (x TypeWinBaccarat) Enum() *TypeWinBaccarat {
	p := new(TypeWinBaccarat)
	*p = x
	return p
}

func (x TypeWinBaccarat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeWinBaccarat) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_proto_enumTypes[1].Descriptor()
}

func (TypeWinBaccarat) Type() protoreflect.EnumType {
	return &file_baccarat_proto_enumTypes[1]
}

func (x TypeWinBaccarat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeWinBaccarat.Descriptor instead.
func (TypeWinBaccarat) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{1}
}

type BaccaratBetActionType int32

const (
	BaccaratBetActionType_BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_NORMAL_UNSPECIFIED BaccaratBetActionType = 0
	BaccaratBetActionType_BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_REBET              BaccaratBetActionType = 1
	BaccaratBetActionType_BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_DOUBLE             BaccaratBetActionType = 2
)

// Enum value maps for BaccaratBetActionType.
var (
	BaccaratBetActionType_name = map[int32]string{
		0: "BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_NORMAL_UNSPECIFIED",
		1: "BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_REBET",
		2: "BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_DOUBLE",
	}
	BaccaratBetActionType_value = map[string]int32{
		"BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_NORMAL_UNSPECIFIED": 0,
		"BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_REBET":              1,
		"BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_DOUBLE":             2,
	}
)

func (x BaccaratBetActionType) Enum() *BaccaratBetActionType {
	p := new(BaccaratBetActionType)
	*p = x
	return p
}

func (x BaccaratBetActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaccaratBetActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_proto_enumTypes[2].Descriptor()
}

func (BaccaratBetActionType) Type() protoreflect.EnumType {
	return &file_baccarat_proto_enumTypes[2]
}

func (x BaccaratBetActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaccaratBetActionType.Descriptor instead.
func (BaccaratBetActionType) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{2}
}

type BaccaratBetRejectedReason int32

const (
	BaccaratBetRejectedReason_BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_UNSPECIFIED            BaccaratBetRejectedReason = 0
	BaccaratBetRejectedReason_BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_BALANCE_NOT_ENOUGH     BaccaratBetRejectedReason = 1
	BaccaratBetRejectedReason_BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_PREVIOUS_BET_NOT_EXIST BaccaratBetRejectedReason = 2
	BaccaratBetRejectedReason_BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_ALREADY_BET            BaccaratBetRejectedReason = 3
	BaccaratBetRejectedReason_BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_EXCEED_MAX_BET_ALLOWED BaccaratBetRejectedReason = 4
)

// Enum value maps for BaccaratBetRejectedReason.
var (
	BaccaratBetRejectedReason_name = map[int32]string{
		0: "BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_UNSPECIFIED",
		1: "BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_BALANCE_NOT_ENOUGH",
		2: "BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_PREVIOUS_BET_NOT_EXIST",
		3: "BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_ALREADY_BET",
		4: "BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_EXCEED_MAX_BET_ALLOWED",
	}
	BaccaratBetRejectedReason_value = map[string]int32{
		"BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_UNSPECIFIED":            0,
		"BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_BALANCE_NOT_ENOUGH":     1,
		"BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_PREVIOUS_BET_NOT_EXIST": 2,
		"BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_ALREADY_BET":            3,
		"BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_EXCEED_MAX_BET_ALLOWED": 4,
	}
)

func (x BaccaratBetRejectedReason) Enum() *BaccaratBetRejectedReason {
	p := new(BaccaratBetRejectedReason)
	*p = x
	return p
}

func (x BaccaratBetRejectedReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaccaratBetRejectedReason) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_proto_enumTypes[3].Descriptor()
}

func (BaccaratBetRejectedReason) Type() protoreflect.EnumType {
	return &file_baccarat_proto_enumTypes[3]
}

func (x BaccaratBetRejectedReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaccaratBetRejectedReason.Descriptor instead.
func (BaccaratBetRejectedReason) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{3}
}

type BaccaratBet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chips         int64                  `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	Cell          BaccaratBetCell        `protobuf:"varint,3,opt,name=cell,proto3,enum=proto.BaccaratBetCell" json:"cell,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaccaratBet) Reset() {
	*x = BaccaratBet{}
	mi := &file_baccarat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaccaratBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratBet) ProtoMessage() {}

func (x *BaccaratBet) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratBet.ProtoReflect.Descriptor instead.
func (*BaccaratBet) Descriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{0}
}

func (x *BaccaratBet) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *BaccaratBet) GetCell() BaccaratBetCell {
	if x != nil {
		return x.Cell
	}
	return BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_UNSPECIFIED
}

type BaccaratBetResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bet           *BaccaratBet           `protobuf:"bytes,1,opt,name=bet,proto3" json:"bet,omitempty"`
	IsWin         bool                   `protobuf:"varint,2,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaccaratBetResult) Reset() {
	*x = BaccaratBetResult{}
	mi := &file_baccarat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaccaratBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratBetResult) ProtoMessage() {}

func (x *BaccaratBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratBetResult.ProtoReflect.Descriptor instead.
func (*BaccaratBetResult) Descriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{1}
}

func (x *BaccaratBetResult) GetBet() *BaccaratBet {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *BaccaratBetResult) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

type BaccaratPlayerBet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ActionType    BaccaratBetActionType  `protobuf:"varint,2,opt,name=action_type,json=actionType,proto3,enum=proto.BaccaratBetActionType" json:"action_type,omitempty"`
	Bets          []*BaccaratBet         `protobuf:"bytes,3,rep,name=bets,proto3" json:"bets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaccaratPlayerBet) Reset() {
	*x = BaccaratPlayerBet{}
	mi := &file_baccarat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaccaratPlayerBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratPlayerBet) ProtoMessage() {}

func (x *BaccaratPlayerBet) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratPlayerBet.ProtoReflect.Descriptor instead.
func (*BaccaratPlayerBet) Descriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{2}
}

func (x *BaccaratPlayerBet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BaccaratPlayerBet) GetActionType() BaccaratBetActionType {
	if x != nil {
		return x.ActionType
	}
	return BaccaratBetActionType_BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_NORMAL_UNSPECIFIED
}

func (x *BaccaratPlayerBet) GetBets() []*BaccaratBet {
	if x != nil {
		return x.Bets
	}
	return nil
}

type BaccaratPlayerBetResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Lists         []*BaccaratBetResult   `protobuf:"bytes,2,rep,name=lists,proto3" json:"lists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaccaratPlayerBetResult) Reset() {
	*x = BaccaratPlayerBetResult{}
	mi := &file_baccarat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaccaratPlayerBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratPlayerBetResult) ProtoMessage() {}

func (x *BaccaratPlayerBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratPlayerBetResult.ProtoReflect.Descriptor instead.
func (*BaccaratPlayerBetResult) Descriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{3}
}

func (x *BaccaratPlayerBetResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BaccaratPlayerBetResult) GetLists() []*BaccaratBetResult {
	if x != nil {
		return x.Lists
	}
	return nil
}

type BaccaratHand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cards         []*Card                `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	Point         int32                  `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	IsPair        bool                   `protobuf:"varint,3,opt,name=is_pair,json=isPair,proto3" json:"is_pair,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaccaratHand) Reset() {
	*x = BaccaratHand{}
	mi := &file_baccarat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaccaratHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratHand) ProtoMessage() {}

func (x *BaccaratHand) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratHand.ProtoReflect.Descriptor instead.
func (*BaccaratHand) Descriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{4}
}

func (x *BaccaratHand) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *BaccaratHand) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *BaccaratHand) GetIsPair() bool {
	if x != nil {
		return x.IsPair
	}
	return false
}

type BaccaratHands struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Banker        *BaccaratHand          `protobuf:"bytes,1,opt,name=banker,proto3" json:"banker,omitempty"`
	Player        *BaccaratHand          `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaccaratHands) Reset() {
	*x = BaccaratHands{}
	mi := &file_baccarat_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaccaratHands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratHands) ProtoMessage() {}

func (x *BaccaratHands) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratHands.ProtoReflect.Descriptor instead.
func (*BaccaratHands) Descriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{5}
}

func (x *BaccaratHands) GetBanker() *BaccaratHand {
	if x != nil {
		return x.Banker
	}
	return nil
}

func (x *BaccaratHands) GetPlayer() *BaccaratHand {
	if x != nil {
		return x.Player
	}
	return nil
}

type BaccaratGameFinish struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	Hand           *BaccaratHands             `protobuf:"bytes,1,opt,name=hand,proto3" json:"hand,omitempty"`
	WinCells       []BaccaratBetCell          `protobuf:"varint,3,rep,packed,name=win_cells,json=winCells,proto3,enum=proto.BaccaratBetCell" json:"win_cells,omitempty"`
	ListBetResults []*BaccaratPlayerBetResult `protobuf:"bytes,4,rep,name=list_bet_results,json=listBetResults,proto3" json:"list_bet_results,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BaccaratGameFinish) Reset() {
	*x = BaccaratGameFinish{}
	mi := &file_baccarat_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaccaratGameFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratGameFinish) ProtoMessage() {}

func (x *BaccaratGameFinish) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratGameFinish.ProtoReflect.Descriptor instead.
func (*BaccaratGameFinish) Descriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{6}
}

func (x *BaccaratGameFinish) GetHand() *BaccaratHands {
	if x != nil {
		return x.Hand
	}
	return nil
}

func (x *BaccaratGameFinish) GetWinCells() []BaccaratBetCell {
	if x != nil {
		return x.WinCells
	}
	return nil
}

func (x *BaccaratGameFinish) GetListBetResults() []*BaccaratPlayerBetResult {
	if x != nil {
		return x.ListBetResults
	}
	return nil
}

type BaccaratBetCellInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cell          BaccaratBetCell        `protobuf:"varint,1,opt,name=cell,proto3,enum=proto.BaccaratBetCell" json:"cell,omitempty"`
	Chips         int64                  `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	NUserBet      int32                  `protobuf:"varint,3,opt,name=n_user_bet,json=nUserBet,proto3" json:"n_user_bet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaccaratBetCellInfo) Reset() {
	*x = BaccaratBetCellInfo{}
	mi := &file_baccarat_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaccaratBetCellInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratBetCellInfo) ProtoMessage() {}

func (x *BaccaratBetCellInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratBetCellInfo.ProtoReflect.Descriptor instead.
func (*BaccaratBetCellInfo) Descriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{7}
}

func (x *BaccaratBetCellInfo) GetCell() BaccaratBetCell {
	if x != nil {
		return x.Cell
	}
	return BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_UNSPECIFIED
}

func (x *BaccaratBetCellInfo) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *BaccaratBetCellInfo) GetNUserBet() int32 {
	if x != nil {
		return x.NUserBet
	}
	return 0
}

type BaccaratSimpleHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BankerWin     int32                  `protobuf:"varint,1,opt,name=banker_win,json=bankerWin,proto3" json:"banker_win,omitempty"`
	PlayerWin     int32                  `protobuf:"varint,2,opt,name=player_win,json=playerWin,proto3" json:"player_win,omitempty"`
	Tie           int32                  `protobuf:"varint,3,opt,name=tie,proto3" json:"tie,omitempty"`
	BankerPair    int32                  `protobuf:"varint,4,opt,name=banker_pair,json=bankerPair,proto3" json:"banker_pair,omitempty"`
	PlayerPair    int32                  `protobuf:"varint,5,opt,name=player_pair,json=playerPair,proto3" json:"player_pair,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaccaratSimpleHistory) Reset() {
	*x = BaccaratSimpleHistory{}
	mi := &file_baccarat_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaccaratSimpleHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratSimpleHistory) ProtoMessage() {}

func (x *BaccaratSimpleHistory) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratSimpleHistory.ProtoReflect.Descriptor instead.
func (*BaccaratSimpleHistory) Descriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{8}
}

func (x *BaccaratSimpleHistory) GetBankerWin() int32 {
	if x != nil {
		return x.BankerWin
	}
	return 0
}

func (x *BaccaratSimpleHistory) GetPlayerWin() int32 {
	if x != nil {
		return x.PlayerWin
	}
	return 0
}

func (x *BaccaratSimpleHistory) GetTie() int32 {
	if x != nil {
		return x.Tie
	}
	return 0
}

func (x *BaccaratSimpleHistory) GetBankerPair() int32 {
	if x != nil {
		return x.BankerPair
	}
	return 0
}

func (x *BaccaratSimpleHistory) GetPlayerPair() int32 {
	if x != nil {
		return x.PlayerPair
	}
	return 0
}

type BaccaratUpdateDesk struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	NPlayers            int32                  `protobuf:"varint,1,opt,name=n_players,json=nPlayers,proto3" json:"n_players,omitempty"`
	IsUpdateUserBet     bool                   `protobuf:"varint,2,opt,name=is_update_user_bet,json=isUpdateUserBet,proto3" json:"is_update_user_bet,omitempty"`
	IsUpdateDeskCell    bool                   `protobuf:"varint,3,opt,name=is_update_desk_cell,json=isUpdateDeskCell,proto3" json:"is_update_desk_cell,omitempty"`
	IsUpdateGameHistory bool                   `protobuf:"varint,4,opt,name=is_update_game_history,json=isUpdateGameHistory,proto3" json:"is_update_game_history,omitempty"`
	UserBet             *BaccaratPlayerBet     `protobuf:"bytes,5,opt,name=user_bet,json=userBet,proto3" json:"user_bet,omitempty"`
	DeskCells           []*BaccaratBetCellInfo `protobuf:"bytes,6,rep,name=desk_cells,json=deskCells,proto3" json:"desk_cells,omitempty"`
	History             *BaccaratSimpleHistory `protobuf:"bytes,7,opt,name=history,proto3" json:"history,omitempty"`
	DetailedHistory     []TypeWinBaccarat      `protobuf:"varint,8,rep,packed,name=detailed_history,json=detailedHistory,proto3,enum=proto.TypeWinBaccarat" json:"detailed_history,omitempty"`
	Error               *Error                 `protobuf:"bytes,9,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BaccaratUpdateDesk) Reset() {
	*x = BaccaratUpdateDesk{}
	mi := &file_baccarat_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaccaratUpdateDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratUpdateDesk) ProtoMessage() {}

func (x *BaccaratUpdateDesk) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratUpdateDesk.ProtoReflect.Descriptor instead.
func (*BaccaratUpdateDesk) Descriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{9}
}

func (x *BaccaratUpdateDesk) GetNPlayers() int32 {
	if x != nil {
		return x.NPlayers
	}
	return 0
}

func (x *BaccaratUpdateDesk) GetIsUpdateUserBet() bool {
	if x != nil {
		return x.IsUpdateUserBet
	}
	return false
}

func (x *BaccaratUpdateDesk) GetIsUpdateDeskCell() bool {
	if x != nil {
		return x.IsUpdateDeskCell
	}
	return false
}

func (x *BaccaratUpdateDesk) GetIsUpdateGameHistory() bool {
	if x != nil {
		return x.IsUpdateGameHistory
	}
	return false
}

func (x *BaccaratUpdateDesk) GetUserBet() *BaccaratPlayerBet {
	if x != nil {
		return x.UserBet
	}
	return nil
}

func (x *BaccaratUpdateDesk) GetDeskCells() []*BaccaratBetCellInfo {
	if x != nil {
		return x.DeskCells
	}
	return nil
}

func (x *BaccaratUpdateDesk) GetHistory() *BaccaratSimpleHistory {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *BaccaratUpdateDesk) GetDetailedHistory() []TypeWinBaccarat {
	if x != nil {
		return x.DetailedHistory
	}
	return nil
}

func (x *BaccaratUpdateDesk) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BaccaratBetActionReject struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Reason        BaccaratBetRejectedReason `protobuf:"varint,1,opt,name=reason,proto3,enum=proto.BaccaratBetRejectedReason" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaccaratBetActionReject) Reset() {
	*x = BaccaratBetActionReject{}
	mi := &file_baccarat_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaccaratBetActionReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratBetActionReject) ProtoMessage() {}

func (x *BaccaratBetActionReject) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratBetActionReject.ProtoReflect.Descriptor instead.
func (*BaccaratBetActionReject) Descriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{10}
}

func (x *BaccaratBetActionReject) GetReason() BaccaratBetRejectedReason {
	if x != nil {
		return x.Reason
	}
	return BaccaratBetRejectedReason_BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_UNSPECIFIED
}

// send deal card server->client, is_player = true mean that that card is for
// player, else banker append those card into respectively player hand hands
// field is purely for sync between server and client, use it as u want
type BaccaratUpdateDeal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsPlayer      bool                   `protobuf:"varint,1,opt,name=is_player,json=isPlayer,proto3" json:"is_player,omitempty"`
	Cards         []*Card                `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
	Hands         *BaccaratHands         `protobuf:"bytes,3,opt,name=hands,proto3" json:"hands,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaccaratUpdateDeal) Reset() {
	*x = BaccaratUpdateDeal{}
	mi := &file_baccarat_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaccaratUpdateDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratUpdateDeal) ProtoMessage() {}

func (x *BaccaratUpdateDeal) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratUpdateDeal.ProtoReflect.Descriptor instead.
func (*BaccaratUpdateDeal) Descriptor() ([]byte, []int) {
	return file_baccarat_proto_rawDescGZIP(), []int{11}
}

func (x *BaccaratUpdateDeal) GetIsPlayer() bool {
	if x != nil {
		return x.IsPlayer
	}
	return false
}

func (x *BaccaratUpdateDeal) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *BaccaratUpdateDeal) GetHands() *BaccaratHands {
	if x != nil {
		return x.Hands
	}
	return nil
}

var File_baccarat_proto protoreflect.FileDescriptor

const file_baccarat_proto_rawDesc = "" +
	"\n" +
	"\x0ebaccarat.proto\x12\x05proto\x1a\x13chinese_poker.proto\x1a\fcommon.proto\"O\n" +
	"\vBaccaratBet\x12\x14\n" +
	"\x05chips\x18\x02 \x01(\x03R\x05chips\x12*\n" +
	"\x04cell\x18\x03 \x01(\x0e2\x16.proto.BaccaratBetCellR\x04cell\"P\n" +
	"\x11BaccaratBetResult\x12$\n" +
	"\x03bet\x18\x01 \x01(\v2\x12.proto.BaccaratBetR\x03bet\x12\x15\n" +
	"\x06is_win\x18\x02 \x01(\bR\x05isWin\"\x93\x01\n" +
	"\x11BaccaratPlayerBet\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12=\n" +
	"\vaction_type\x18\x02 \x01(\x0e2\x1c.proto.BaccaratBetActionTypeR\n" +
	"actionType\x12&\n" +
	"\x04bets\x18\x03 \x03(\v2\x12.proto.BaccaratBetR\x04bets\"b\n" +
	"\x17BaccaratPlayerBetResult\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12.\n" +
	"\x05lists\x18\x02 \x03(\v2\x18.proto.BaccaratBetResultR\x05lists\"`\n" +
	"\fBaccaratHand\x12!\n" +
	"\x05cards\x18\x01 \x03(\v2\v.proto.CardR\x05cards\x12\x14\n" +
	"\x05point\x18\x02 \x01(\x05R\x05point\x12\x17\n" +
	"\ais_pair\x18\x03 \x01(\bR\x06isPair\"i\n" +
	"\rBaccaratHands\x12+\n" +
	"\x06banker\x18\x01 \x01(\v2\x13.proto.BaccaratHandR\x06banker\x12+\n" +
	"\x06player\x18\x02 \x01(\v2\x13.proto.BaccaratHandR\x06player\"\xbd\x01\n" +
	"\x12BaccaratGameFinish\x12(\n" +
	"\x04hand\x18\x01 \x01(\v2\x14.proto.BaccaratHandsR\x04hand\x123\n" +
	"\twin_cells\x18\x03 \x03(\x0e2\x16.proto.BaccaratBetCellR\bwinCells\x12H\n" +
	"\x10list_bet_results\x18\x04 \x03(\v2\x1e.proto.BaccaratPlayerBetResultR\x0elistBetResults\"u\n" +
	"\x13BaccaratBetCellInfo\x12*\n" +
	"\x04cell\x18\x01 \x01(\x0e2\x16.proto.BaccaratBetCellR\x04cell\x12\x14\n" +
	"\x05chips\x18\x02 \x01(\x03R\x05chips\x12\x1c\n" +
	"\n" +
	"n_user_bet\x18\x03 \x01(\x05R\bnUserBet\"\xa9\x01\n" +
	"\x15BaccaratSimpleHistory\x12\x1d\n" +
	"\n" +
	"banker_win\x18\x01 \x01(\x05R\tbankerWin\x12\x1d\n" +
	"\n" +
	"player_win\x18\x02 \x01(\x05R\tplayerWin\x12\x10\n" +
	"\x03tie\x18\x03 \x01(\x05R\x03tie\x12\x1f\n" +
	"\vbanker_pair\x18\x04 \x01(\x05R\n" +
	"bankerPair\x12\x1f\n" +
	"\vplayer_pair\x18\x05 \x01(\x05R\n" +
	"playerPair\"\xd1\x03\n" +
	"\x12BaccaratUpdateDesk\x12\x1b\n" +
	"\tn_players\x18\x01 \x01(\x05R\bnPlayers\x12+\n" +
	"\x12is_update_user_bet\x18\x02 \x01(\bR\x0fisUpdateUserBet\x12-\n" +
	"\x13is_update_desk_cell\x18\x03 \x01(\bR\x10isUpdateDeskCell\x123\n" +
	"\x16is_update_game_history\x18\x04 \x01(\bR\x13isUpdateGameHistory\x123\n" +
	"\buser_bet\x18\x05 \x01(\v2\x18.proto.BaccaratPlayerBetR\auserBet\x129\n" +
	"\n" +
	"desk_cells\x18\x06 \x03(\v2\x1a.proto.BaccaratBetCellInfoR\tdeskCells\x126\n" +
	"\ahistory\x18\a \x01(\v2\x1c.proto.BaccaratSimpleHistoryR\ahistory\x12A\n" +
	"\x10detailed_history\x18\b \x03(\x0e2\x16.proto.TypeWinBaccaratR\x0fdetailedHistory\x12\"\n" +
	"\x05error\x18\t \x01(\v2\f.proto.ErrorR\x05error\"S\n" +
	"\x17BaccaratBetActionReject\x128\n" +
	"\x06reason\x18\x01 \x01(\x0e2 .proto.BaccaratBetRejectedReasonR\x06reason\"\x80\x01\n" +
	"\x12BaccaratUpdateDeal\x12\x1b\n" +
	"\tis_player\x18\x01 \x01(\bR\bisPlayer\x12!\n" +
	"\x05cards\x18\x02 \x03(\v2\v.proto.CardR\x05cards\x12*\n" +
	"\x05hands\x18\x03 \x01(\v2\x14.proto.BaccaratHandsR\x05hands*\xa5\x02\n" +
	"\x0fBaccaratBetCell\x12/\n" +
	"+BACCARAT_BET_CELL_BACCARAT_CELL_UNSPECIFIED\x10\x00\x12*\n" +
	"&BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER\x10\x01\x12*\n" +
	"&BACCARAT_BET_CELL_BACCARAT_CELL_BANKER\x10\x02\x12'\n" +
	"#BACCARAT_BET_CELL_BACCARAT_CELL_TIE\x10\x03\x12/\n" +
	"+BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER_PAIR\x10\x04\x12/\n" +
	"+BACCARAT_BET_CELL_BACCARAT_CELL_BANKER_PAIR\x10\x05*\xc5\x01\n" +
	"\x0fTypeWinBaccarat\x12\x19\n" +
	"\x15TYPEWIN_BACCARAT_NONE\x10\x00\x12\n" +
	"\n" +
	"\x06BANKER\x10\x01\x12\n" +
	"\n" +
	"\x06PLAYER\x10\x02\x12\a\n" +
	"\x03TIE\x10\x03\x12\f\n" +
	"\bPLAYER_P\x10f\x12\f\n" +
	"\bPLAYER_B\x10\f\x12\r\n" +
	"\tPLAYER_PB\x10p\x12\f\n" +
	"\bBANKER_P\x10e\x12\f\n" +
	"\bBANKER_B\x10\v\x12\r\n" +
	"\tBANKER_PB\x10o\x12\t\n" +
	"\x05TIE_P\x10g\x12\t\n" +
	"\x05TIE_B\x10\r\x12\n" +
	"\n" +
	"\x06TIE_PB\x10q*\xb8\x01\n" +
	"\x15BaccaratBetActionType\x12<\n" +
	"8BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_NORMAL_UNSPECIFIED\x10\x00\x12/\n" +
	"+BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_REBET\x10\x01\x120\n" +
	",BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_DOUBLE\x10\x02*\x8c\x03\n" +
	"\x19BaccaratBetRejectedReason\x12B\n" +
	">BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_UNSPECIFIED\x10\x00\x12I\n" +
	"EBACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_BALANCE_NOT_ENOUGH\x10\x01\x12M\n" +
	"IBACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_PREVIOUS_BET_NOT_EXIST\x10\x02\x12B\n" +
	">BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_ALREADY_BET\x10\x03\x12M\n" +
	"IBACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_EXCEED_MAX_BET_ALLOWED\x10\x04B(Z&github.com/nk-nigeria/cgp-common/protob\x06proto3"

var (
	file_baccarat_proto_rawDescOnce sync.Once
	file_baccarat_proto_rawDescData []byte
)

func file_baccarat_proto_rawDescGZIP() []byte {
	file_baccarat_proto_rawDescOnce.Do(func() {
		file_baccarat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_baccarat_proto_rawDesc), len(file_baccarat_proto_rawDesc)))
	})
	return file_baccarat_proto_rawDescData
}

var file_baccarat_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_baccarat_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_baccarat_proto_goTypes = []any{
	(BaccaratBetCell)(0),            // 0: proto.BaccaratBetCell
	(TypeWinBaccarat)(0),            // 1: proto.TypeWinBaccarat
	(BaccaratBetActionType)(0),      // 2: proto.BaccaratBetActionType
	(BaccaratBetRejectedReason)(0),  // 3: proto.BaccaratBetRejectedReason
	(*BaccaratBet)(nil),             // 4: proto.BaccaratBet
	(*BaccaratBetResult)(nil),       // 5: proto.BaccaratBetResult
	(*BaccaratPlayerBet)(nil),       // 6: proto.BaccaratPlayerBet
	(*BaccaratPlayerBetResult)(nil), // 7: proto.BaccaratPlayerBetResult
	(*BaccaratHand)(nil),            // 8: proto.BaccaratHand
	(*BaccaratHands)(nil),           // 9: proto.BaccaratHands
	(*BaccaratGameFinish)(nil),      // 10: proto.BaccaratGameFinish
	(*BaccaratBetCellInfo)(nil),     // 11: proto.BaccaratBetCellInfo
	(*BaccaratSimpleHistory)(nil),   // 12: proto.BaccaratSimpleHistory
	(*BaccaratUpdateDesk)(nil),      // 13: proto.BaccaratUpdateDesk
	(*BaccaratBetActionReject)(nil), // 14: proto.BaccaratBetActionReject
	(*BaccaratUpdateDeal)(nil),      // 15: proto.BaccaratUpdateDeal
	(*Card)(nil),                    // 16: proto.Card
	(*Error)(nil),                   // 17: proto.Error
}
var file_baccarat_proto_depIdxs = []int32{
	0,  // 0: proto.BaccaratBet.cell:type_name -> proto.BaccaratBetCell
	4,  // 1: proto.BaccaratBetResult.bet:type_name -> proto.BaccaratBet
	2,  // 2: proto.BaccaratPlayerBet.action_type:type_name -> proto.BaccaratBetActionType
	4,  // 3: proto.BaccaratPlayerBet.bets:type_name -> proto.BaccaratBet
	5,  // 4: proto.BaccaratPlayerBetResult.lists:type_name -> proto.BaccaratBetResult
	16, // 5: proto.BaccaratHand.cards:type_name -> proto.Card
	8,  // 6: proto.BaccaratHands.banker:type_name -> proto.BaccaratHand
	8,  // 7: proto.BaccaratHands.player:type_name -> proto.BaccaratHand
	9,  // 8: proto.BaccaratGameFinish.hand:type_name -> proto.BaccaratHands
	0,  // 9: proto.BaccaratGameFinish.win_cells:type_name -> proto.BaccaratBetCell
	7,  // 10: proto.BaccaratGameFinish.list_bet_results:type_name -> proto.BaccaratPlayerBetResult
	0,  // 11: proto.BaccaratBetCellInfo.cell:type_name -> proto.BaccaratBetCell
	6,  // 12: proto.BaccaratUpdateDesk.user_bet:type_name -> proto.BaccaratPlayerBet
	11, // 13: proto.BaccaratUpdateDesk.desk_cells:type_name -> proto.BaccaratBetCellInfo
	12, // 14: proto.BaccaratUpdateDesk.history:type_name -> proto.BaccaratSimpleHistory
	1,  // 15: proto.BaccaratUpdateDesk.detailed_history:type_name -> proto.TypeWinBaccarat
	17, // 16: proto.BaccaratUpdateDesk.error:type_name -> proto.Error
	3,  // 17: proto.BaccaratBetActionReject.reason:type_name -> proto.BaccaratBetRejectedReason
	16, // 18: proto.BaccaratUpdateDeal.cards:type_name -> proto.Card
	9,  // 19: proto.BaccaratUpdateDeal.hands:type_name -> proto.BaccaratHands
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_baccarat_proto_init() }
func file_baccarat_proto_init() {
	if File_baccarat_proto != nil {
		return
	}
	file_chinese_poker_proto_init()
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_baccarat_proto_rawDesc), len(file_baccarat_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_baccarat_proto_goTypes,
		DependencyIndexes: file_baccarat_proto_depIdxs,
		EnumInfos:         file_baccarat_proto_enumTypes,
		MessageInfos:      file_baccarat_proto_msgTypes,
	}.Build()
	File_baccarat_proto = out.File
	file_baccarat_proto_goTypes = nil
	file_baccarat_proto_depIdxs = nil
}
