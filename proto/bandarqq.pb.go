// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: bandarqq.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QQBetCell int32

const (
	QQBetCell_CELL_RED       QQBetCell = 0
	QQBetCell_CELL_RED_TWIN  QQBetCell = 1
	QQBetCell_CELL_RED_QIU   QQBetCell = 2
	QQBetCell_CELL_BLUE      QQBetCell = 3
	QQBetCell_CELL_BLUE_TWIN QQBetCell = 4
	QQBetCell_CELL_BLUE_QIU  QQBetCell = 5
	QQBetCell_CELL_DRAW      QQBetCell = 6
	QQBetCell_CELL_QIU_QIU   QQBetCell = 7
	QQBetCell_CELL_SIX_TWINS QQBetCell = 8
)

// Enum value maps for QQBetCell.
var (
	QQBetCell_name = map[int32]string{
		0: "CELL_RED",
		1: "CELL_RED_TWIN",
		2: "CELL_RED_QIU",
		3: "CELL_BLUE",
		4: "CELL_BLUE_TWIN",
		5: "CELL_BLUE_QIU",
		6: "CELL_DRAW",
		7: "CELL_QIU_QIU",
		8: "CELL_SIX_TWINS",
	}
	QQBetCell_value = map[string]int32{
		"CELL_RED":       0,
		"CELL_RED_TWIN":  1,
		"CELL_RED_QIU":   2,
		"CELL_BLUE":      3,
		"CELL_BLUE_TWIN": 4,
		"CELL_BLUE_QIU":  5,
		"CELL_DRAW":      6,
		"CELL_QIU_QIU":   7,
		"CELL_SIX_TWINS": 8,
	}
)

func (x QQBetCell) Enum() *QQBetCell {
	p := new(QQBetCell)
	*p = x
	return p
}

func (x QQBetCell) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QQBetCell) Descriptor() protoreflect.EnumDescriptor {
	return file_bandarqq_proto_enumTypes[0].Descriptor()
}

func (QQBetCell) Type() protoreflect.EnumType {
	return &file_bandarqq_proto_enumTypes[0]
}

func (x QQBetCell) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QQBetCell.Descriptor instead.
func (QQBetCell) EnumDescriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{0}
}

type QQHandType int32

const (
	QQHandType_NORMAL QQHandType = 0
	QQHandType_QIU    QQHandType = 1
	QQHandType_SIX    QQHandType = 2
	QQHandType_TWIN   QQHandType = 3
)

// Enum value maps for QQHandType.
var (
	QQHandType_name = map[int32]string{
		0: "NORMAL",
		1: "QIU",
		2: "SIX",
		3: "TWIN",
	}
	QQHandType_value = map[string]int32{
		"NORMAL": 0,
		"QIU":    1,
		"SIX":    2,
		"TWIN":   3,
	}
)

func (x QQHandType) Enum() *QQHandType {
	p := new(QQHandType)
	*p = x
	return p
}

func (x QQHandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QQHandType) Descriptor() protoreflect.EnumDescriptor {
	return file_bandarqq_proto_enumTypes[1].Descriptor()
}

func (QQHandType) Type() protoreflect.EnumType {
	return &file_bandarqq_proto_enumTypes[1]
}

func (x QQHandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QQHandType.Descriptor instead.
func (QQHandType) EnumDescriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{1}
}

type Domino struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Top           int32                  `protobuf:"varint,1,opt,name=top,proto3" json:"top,omitempty"`
	Bottom        int32                  `protobuf:"varint,2,opt,name=bottom,proto3" json:"bottom,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Domino) Reset() {
	*x = Domino{}
	mi := &file_bandarqq_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Domino) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Domino) ProtoMessage() {}

func (x *Domino) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Domino.ProtoReflect.Descriptor instead.
func (*Domino) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{0}
}

func (x *Domino) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *Domino) GetBottom() int32 {
	if x != nil {
		return x.Bottom
	}
	return 0
}

type DominoList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dominos       []*Domino              `protobuf:"bytes,1,rep,name=dominos,proto3" json:"dominos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DominoList) Reset() {
	*x = DominoList{}
	mi := &file_bandarqq_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DominoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DominoList) ProtoMessage() {}

func (x *DominoList) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DominoList.ProtoReflect.Descriptor instead.
func (*DominoList) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{1}
}

func (x *DominoList) GetDominos() []*Domino {
	if x != nil {
		return x.Dominos
	}
	return nil
}

type QQBet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chips         int64                  `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	Cell          QQBetCell              `protobuf:"varint,3,opt,name=cell,proto3,enum=proto.QQBetCell" json:"cell,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QQBet) Reset() {
	*x = QQBet{}
	mi := &file_bandarqq_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQBet) ProtoMessage() {}

func (x *QQBet) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQBet.ProtoReflect.Descriptor instead.
func (*QQBet) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{2}
}

func (x *QQBet) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *QQBet) GetCell() QQBetCell {
	if x != nil {
		return x.Cell
	}
	return QQBetCell_CELL_RED
}

type QQBetResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bet           *QQBet                 `protobuf:"bytes,1,opt,name=bet,proto3" json:"bet,omitempty"`
	IsWin         bool                   `protobuf:"varint,2,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QQBetResult) Reset() {
	*x = QQBetResult{}
	mi := &file_bandarqq_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQBetResult) ProtoMessage() {}

func (x *QQBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQBetResult.ProtoReflect.Descriptor instead.
func (*QQBetResult) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{3}
}

func (x *QQBetResult) GetBet() *QQBet {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *QQBetResult) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

// message from client to server indicate user placing bet
type QQPlayerBets struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Bets          []*QQBet               `protobuf:"bytes,2,rep,name=bets,proto3" json:"bets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QQPlayerBets) Reset() {
	*x = QQPlayerBets{}
	mi := &file_bandarqq_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQPlayerBets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQPlayerBets) ProtoMessage() {}

func (x *QQPlayerBets) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQPlayerBets.ProtoReflect.Descriptor instead.
func (*QQPlayerBets) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{4}
}

func (x *QQPlayerBets) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *QQPlayerBets) GetBets() []*QQBet {
	if x != nil {
		return x.Bets
	}
	return nil
}

// endgame result for 1 player
// win_bets contains the bets in the cell that player win
// in_chip is total of bet chips
// win_chip is raw
// chip is amount of win chip, if it's negative then player lost that game
type QQPlayerBetResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BetResults    []*QQBetResult         `protobuf:"bytes,2,rep,name=bet_results,json=betResults,proto3" json:"bet_results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QQPlayerBetResult) Reset() {
	*x = QQPlayerBetResult{}
	mi := &file_bandarqq_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQPlayerBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQPlayerBetResult) ProtoMessage() {}

func (x *QQPlayerBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQPlayerBetResult.ProtoReflect.Descriptor instead.
func (*QQPlayerBetResult) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{5}
}

func (x *QQPlayerBetResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *QQPlayerBetResult) GetBetResults() []*QQBetResult {
	if x != nil {
		return x.BetResults
	}
	return nil
}

// endgame result for all user playing in that game
type QQListPlayerBetResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*QQPlayerBetResult   `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QQListPlayerBetResult) Reset() {
	*x = QQListPlayerBetResult{}
	mi := &file_bandarqq_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQListPlayerBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQListPlayerBetResult) ProtoMessage() {}

func (x *QQListPlayerBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQListPlayerBetResult.ProtoReflect.Descriptor instead.
func (*QQListPlayerBetResult) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{6}
}

func (x *QQListPlayerBetResult) GetResults() []*QQPlayerBetResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// info of 1 hand
type QQHand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dominos       []*Domino              `protobuf:"bytes,1,rep,name=dominos,proto3" json:"dominos,omitempty"`
	Type          QQHandType             `protobuf:"varint,2,opt,name=type,proto3,enum=proto.QQHandType" json:"type,omitempty"`
	Point         int32                  `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QQHand) Reset() {
	*x = QQHand{}
	mi := &file_bandarqq_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQHand) ProtoMessage() {}

func (x *QQHand) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQHand.ProtoReflect.Descriptor instead.
func (*QQHand) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{7}
}

func (x *QQHand) GetDominos() []*Domino {
	if x != nil {
		return x.Dominos
	}
	return nil
}

func (x *QQHand) GetType() QQHandType {
	if x != nil {
		return x.Type
	}
	return QQHandType_NORMAL
}

func (x *QQHand) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

type QQPlayerEngameResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Balance       int64                  `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	WinAmount     int64                  `protobuf:"varint,3,opt,name=win_amount,json=winAmount,proto3" json:"win_amount,omitempty"`
	BetResult     *QQPlayerBetResult     `protobuf:"bytes,4,opt,name=bet_result,json=betResult,proto3" json:"bet_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QQPlayerEngameResult) Reset() {
	*x = QQPlayerEngameResult{}
	mi := &file_bandarqq_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQPlayerEngameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQPlayerEngameResult) ProtoMessage() {}

func (x *QQPlayerEngameResult) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQPlayerEngameResult.ProtoReflect.Descriptor instead.
func (*QQPlayerEngameResult) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{8}
}

func (x *QQPlayerEngameResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *QQPlayerEngameResult) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *QQPlayerEngameResult) GetWinAmount() int64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

func (x *QQPlayerEngameResult) GetBetResult() *QQPlayerBetResult {
	if x != nil {
		return x.BetResult
	}
	return nil
}

// message from server to client when the game end
// red's and blue's hand
// win_cells is list of winning cells
type QQGameFinish struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Hands            *QQGameFinishHand      `protobuf:"bytes,1,opt,name=hands,proto3" json:"hands,omitempty"`
	WinCells         []QQBetCell            `protobuf:"varint,3,rep,packed,name=win_cells,json=winCells,proto3,enum=proto.QQBetCell" json:"win_cells,omitempty"`
	Result           *QQPlayerEngameResult  `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	PlayersWinAmount map[string]int64       `protobuf:"bytes,5,rep,name=players_win_amount,json=playersWinAmount,proto3" json:"players_win_amount,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *QQGameFinish) Reset() {
	*x = QQGameFinish{}
	mi := &file_bandarqq_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQGameFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQGameFinish) ProtoMessage() {}

func (x *QQGameFinish) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQGameFinish.ProtoReflect.Descriptor instead.
func (*QQGameFinish) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{9}
}

func (x *QQGameFinish) GetHands() *QQGameFinishHand {
	if x != nil {
		return x.Hands
	}
	return nil
}

func (x *QQGameFinish) GetWinCells() []QQBetCell {
	if x != nil {
		return x.WinCells
	}
	return nil
}

func (x *QQGameFinish) GetResult() *QQPlayerEngameResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QQGameFinish) GetPlayersWinAmount() map[string]int64 {
	if x != nil {
		return x.PlayersWinAmount
	}
	return nil
}

type QQGameFinishHand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RedHand       *QQHand                `protobuf:"bytes,1,opt,name=red_hand,json=redHand,proto3" json:"red_hand,omitempty"`
	BlueHand      *QQHand                `protobuf:"bytes,2,opt,name=blue_hand,json=blueHand,proto3" json:"blue_hand,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QQGameFinishHand) Reset() {
	*x = QQGameFinishHand{}
	mi := &file_bandarqq_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQGameFinishHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQGameFinishHand) ProtoMessage() {}

func (x *QQGameFinishHand) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQGameFinishHand.ProtoReflect.Descriptor instead.
func (*QQGameFinishHand) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{10}
}

func (x *QQGameFinishHand) GetRedHand() *QQHand {
	if x != nil {
		return x.RedHand
	}
	return nil
}

func (x *QQGameFinishHand) GetBlueHand() *QQHand {
	if x != nil {
		return x.BlueHand
	}
	return nil
}

// game history of prev hands
type QQHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HandHistories []*QQGameFinishHand    `protobuf:"bytes,1,rep,name=hand_histories,json=handHistories,proto3" json:"hand_histories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QQHistory) Reset() {
	*x = QQHistory{}
	mi := &file_bandarqq_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQHistory) ProtoMessage() {}

func (x *QQHistory) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQHistory.ProtoReflect.Descriptor instead.
func (*QQHistory) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{11}
}

func (x *QQHistory) GetHandHistories() []*QQGameFinishHand {
	if x != nil {
		return x.HandHistories
	}
	return nil
}

// amount and number of user placed bet in a cell
type QQDeskCellBet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cell          QQBetCell              `protobuf:"varint,1,opt,name=cell,proto3,enum=proto.QQBetCell" json:"cell,omitempty"`
	Chips         int64                  `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	NUserBet      int32                  `protobuf:"varint,3,opt,name=n_user_bet,json=nUserBet,proto3" json:"n_user_bet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QQDeskCellBet) Reset() {
	*x = QQDeskCellBet{}
	mi := &file_bandarqq_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQDeskCellBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQDeskCellBet) ProtoMessage() {}

func (x *QQDeskCellBet) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQDeskCellBet.ProtoReflect.Descriptor instead.
func (*QQDeskCellBet) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{12}
}

func (x *QQDeskCellBet) GetCell() QQBetCell {
	if x != nil {
		return x.Cell
	}
	return QQBetCell_CELL_RED
}

func (x *QQDeskCellBet) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *QQDeskCellBet) GetNUserBet() int32 {
	if x != nil {
		return x.NUserBet
	}
	return 0
}

type QQDeskListCellBet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListCellBet   []*QQDeskCellBet       `protobuf:"bytes,1,rep,name=list_cell_bet,json=listCellBet,proto3" json:"list_cell_bet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QQDeskListCellBet) Reset() {
	*x = QQDeskListCellBet{}
	mi := &file_bandarqq_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQDeskListCellBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQDeskListCellBet) ProtoMessage() {}

func (x *QQDeskListCellBet) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQDeskListCellBet.ProtoReflect.Descriptor instead.
func (*QQDeskListCellBet) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{13}
}

func (x *QQDeskListCellBet) GetListCellBet() []*QQDeskCellBet {
	if x != nil {
		return x.ListCellBet
	}
	return nil
}

// message from server to client
// indicate changing in desk status
// - num of playing
// - acknowledge user bet -> update_user_bets=true
// - update total bet in each cell by all of the users -> update_cell_bets=true
// - update game history -> update_game_history=true
type QQUpdateDesk struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	NPlayers          int32                  `protobuf:"varint,1,opt,name=n_players,json=nPlayers,proto3" json:"n_players,omitempty"`
	UpdateUserBets    bool                   `protobuf:"varint,2,opt,name=update_user_bets,json=updateUserBets,proto3" json:"update_user_bets,omitempty"`
	UpdateCellBets    bool                   `protobuf:"varint,3,opt,name=update_cell_bets,json=updateCellBets,proto3" json:"update_cell_bets,omitempty"`
	UpdateGameHistory bool                   `protobuf:"varint,4,opt,name=update_game_history,json=updateGameHistory,proto3" json:"update_game_history,omitempty"`
	UserBets          *QQPlayerBets          `protobuf:"bytes,5,opt,name=user_bets,json=userBets,proto3" json:"user_bets,omitempty"`
	ListCellBet       *QQDeskListCellBet     `protobuf:"bytes,6,opt,name=list_cell_bet,json=listCellBet,proto3" json:"list_cell_bet,omitempty"`
	History           *QQHistory             `protobuf:"bytes,7,opt,name=history,proto3" json:"history,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *QQUpdateDesk) Reset() {
	*x = QQUpdateDesk{}
	mi := &file_bandarqq_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QQUpdateDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQUpdateDesk) ProtoMessage() {}

func (x *QQUpdateDesk) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQUpdateDesk.ProtoReflect.Descriptor instead.
func (*QQUpdateDesk) Descriptor() ([]byte, []int) {
	return file_bandarqq_proto_rawDescGZIP(), []int{14}
}

func (x *QQUpdateDesk) GetNPlayers() int32 {
	if x != nil {
		return x.NPlayers
	}
	return 0
}

func (x *QQUpdateDesk) GetUpdateUserBets() bool {
	if x != nil {
		return x.UpdateUserBets
	}
	return false
}

func (x *QQUpdateDesk) GetUpdateCellBets() bool {
	if x != nil {
		return x.UpdateCellBets
	}
	return false
}

func (x *QQUpdateDesk) GetUpdateGameHistory() bool {
	if x != nil {
		return x.UpdateGameHistory
	}
	return false
}

func (x *QQUpdateDesk) GetUserBets() *QQPlayerBets {
	if x != nil {
		return x.UserBets
	}
	return nil
}

func (x *QQUpdateDesk) GetListCellBet() *QQDeskListCellBet {
	if x != nil {
		return x.ListCellBet
	}
	return nil
}

func (x *QQUpdateDesk) GetHistory() *QQHistory {
	if x != nil {
		return x.History
	}
	return nil
}

var File_bandarqq_proto protoreflect.FileDescriptor

const file_bandarqq_proto_rawDesc = "" +
	"\n" +
	"\x0ebandarqq.proto\x12\x05proto\"2\n" +
	"\x06Domino\x12\x10\n" +
	"\x03top\x18\x01 \x01(\x05R\x03top\x12\x16\n" +
	"\x06bottom\x18\x02 \x01(\x05R\x06bottom\"5\n" +
	"\n" +
	"DominoList\x12'\n" +
	"\adominos\x18\x01 \x03(\v2\r.proto.DominoR\adominos\"C\n" +
	"\x05QQBet\x12\x14\n" +
	"\x05chips\x18\x02 \x01(\x03R\x05chips\x12$\n" +
	"\x04cell\x18\x03 \x01(\x0e2\x10.proto.QQBetCellR\x04cell\"D\n" +
	"\vQQBetResult\x12\x1e\n" +
	"\x03bet\x18\x01 \x01(\v2\f.proto.QQBetR\x03bet\x12\x15\n" +
	"\x06is_win\x18\x02 \x01(\bR\x05isWin\"I\n" +
	"\fQQPlayerBets\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12 \n" +
	"\x04bets\x18\x02 \x03(\v2\f.proto.QQBetR\x04bets\"a\n" +
	"\x11QQPlayerBetResult\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x123\n" +
	"\vbet_results\x18\x02 \x03(\v2\x12.proto.QQBetResultR\n" +
	"betResults\"K\n" +
	"\x15QQListPlayerBetResult\x122\n" +
	"\aresults\x18\x01 \x03(\v2\x18.proto.QQPlayerBetResultR\aresults\"n\n" +
	"\x06QQHand\x12'\n" +
	"\adominos\x18\x01 \x03(\v2\r.proto.DominoR\adominos\x12%\n" +
	"\x04type\x18\x02 \x01(\x0e2\x11.proto.QQHandTypeR\x04type\x12\x14\n" +
	"\x05point\x18\x03 \x01(\x05R\x05point\"\xa1\x01\n" +
	"\x14QQPlayerEngameResult\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x18\n" +
	"\abalance\x18\x02 \x01(\x03R\abalance\x12\x1d\n" +
	"\n" +
	"win_amount\x18\x03 \x01(\x03R\twinAmount\x127\n" +
	"\n" +
	"bet_result\x18\x04 \x01(\v2\x18.proto.QQPlayerBetResultR\tbetResult\"\xbf\x02\n" +
	"\fQQGameFinish\x12-\n" +
	"\x05hands\x18\x01 \x01(\v2\x17.proto.QQGameFinishHandR\x05hands\x12-\n" +
	"\twin_cells\x18\x03 \x03(\x0e2\x10.proto.QQBetCellR\bwinCells\x123\n" +
	"\x06result\x18\x04 \x01(\v2\x1b.proto.QQPlayerEngameResultR\x06result\x12W\n" +
	"\x12players_win_amount\x18\x05 \x03(\v2).proto.QQGameFinish.PlayersWinAmountEntryR\x10playersWinAmount\x1aC\n" +
	"\x15PlayersWinAmountEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"h\n" +
	"\x10QQGameFinishHand\x12(\n" +
	"\bred_hand\x18\x01 \x01(\v2\r.proto.QQHandR\aredHand\x12*\n" +
	"\tblue_hand\x18\x02 \x01(\v2\r.proto.QQHandR\bblueHand\"K\n" +
	"\tQQHistory\x12>\n" +
	"\x0ehand_histories\x18\x01 \x03(\v2\x17.proto.QQGameFinishHandR\rhandHistories\"i\n" +
	"\rQQDeskCellBet\x12$\n" +
	"\x04cell\x18\x01 \x01(\x0e2\x10.proto.QQBetCellR\x04cell\x12\x14\n" +
	"\x05chips\x18\x02 \x01(\x03R\x05chips\x12\x1c\n" +
	"\n" +
	"n_user_bet\x18\x03 \x01(\x05R\bnUserBet\"M\n" +
	"\x11QQDeskListCellBet\x128\n" +
	"\rlist_cell_bet\x18\x01 \x03(\v2\x14.proto.QQDeskCellBetR\vlistCellBet\"\xcb\x02\n" +
	"\fQQUpdateDesk\x12\x1b\n" +
	"\tn_players\x18\x01 \x01(\x05R\bnPlayers\x12(\n" +
	"\x10update_user_bets\x18\x02 \x01(\bR\x0eupdateUserBets\x12(\n" +
	"\x10update_cell_bets\x18\x03 \x01(\bR\x0eupdateCellBets\x12.\n" +
	"\x13update_game_history\x18\x04 \x01(\bR\x11updateGameHistory\x120\n" +
	"\tuser_bets\x18\x05 \x01(\v2\x13.proto.QQPlayerBetsR\buserBets\x12<\n" +
	"\rlist_cell_bet\x18\x06 \x01(\v2\x18.proto.QQDeskListCellBetR\vlistCellBet\x12*\n" +
	"\ahistory\x18\a \x01(\v2\x10.proto.QQHistoryR\ahistory*\xa9\x01\n" +
	"\tQQBetCell\x12\f\n" +
	"\bCELL_RED\x10\x00\x12\x11\n" +
	"\rCELL_RED_TWIN\x10\x01\x12\x10\n" +
	"\fCELL_RED_QIU\x10\x02\x12\r\n" +
	"\tCELL_BLUE\x10\x03\x12\x12\n" +
	"\x0eCELL_BLUE_TWIN\x10\x04\x12\x11\n" +
	"\rCELL_BLUE_QIU\x10\x05\x12\r\n" +
	"\tCELL_DRAW\x10\x06\x12\x10\n" +
	"\fCELL_QIU_QIU\x10\a\x12\x12\n" +
	"\x0eCELL_SIX_TWINS\x10\b*4\n" +
	"\n" +
	"QQHandType\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x00\x12\a\n" +
	"\x03QIU\x10\x01\x12\a\n" +
	"\x03SIX\x10\x02\x12\b\n" +
	"\x04TWIN\x10\x03B4Z2github.com/nk-nigeria/whot-module/cgp-common/protob\x06proto3"

var (
	file_bandarqq_proto_rawDescOnce sync.Once
	file_bandarqq_proto_rawDescData []byte
)

func file_bandarqq_proto_rawDescGZIP() []byte {
	file_bandarqq_proto_rawDescOnce.Do(func() {
		file_bandarqq_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bandarqq_proto_rawDesc), len(file_bandarqq_proto_rawDesc)))
	})
	return file_bandarqq_proto_rawDescData
}

var file_bandarqq_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bandarqq_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_bandarqq_proto_goTypes = []any{
	(QQBetCell)(0),                // 0: proto.QQBetCell
	(QQHandType)(0),               // 1: proto.QQHandType
	(*Domino)(nil),                // 2: proto.Domino
	(*DominoList)(nil),            // 3: proto.DominoList
	(*QQBet)(nil),                 // 4: proto.QQBet
	(*QQBetResult)(nil),           // 5: proto.QQBetResult
	(*QQPlayerBets)(nil),          // 6: proto.QQPlayerBets
	(*QQPlayerBetResult)(nil),     // 7: proto.QQPlayerBetResult
	(*QQListPlayerBetResult)(nil), // 8: proto.QQListPlayerBetResult
	(*QQHand)(nil),                // 9: proto.QQHand
	(*QQPlayerEngameResult)(nil),  // 10: proto.QQPlayerEngameResult
	(*QQGameFinish)(nil),          // 11: proto.QQGameFinish
	(*QQGameFinishHand)(nil),      // 12: proto.QQGameFinishHand
	(*QQHistory)(nil),             // 13: proto.QQHistory
	(*QQDeskCellBet)(nil),         // 14: proto.QQDeskCellBet
	(*QQDeskListCellBet)(nil),     // 15: proto.QQDeskListCellBet
	(*QQUpdateDesk)(nil),          // 16: proto.QQUpdateDesk
	nil,                           // 17: proto.QQGameFinish.PlayersWinAmountEntry
}
var file_bandarqq_proto_depIdxs = []int32{
	2,  // 0: proto.DominoList.dominos:type_name -> proto.Domino
	0,  // 1: proto.QQBet.cell:type_name -> proto.QQBetCell
	4,  // 2: proto.QQBetResult.bet:type_name -> proto.QQBet
	4,  // 3: proto.QQPlayerBets.bets:type_name -> proto.QQBet
	5,  // 4: proto.QQPlayerBetResult.bet_results:type_name -> proto.QQBetResult
	7,  // 5: proto.QQListPlayerBetResult.results:type_name -> proto.QQPlayerBetResult
	2,  // 6: proto.QQHand.dominos:type_name -> proto.Domino
	1,  // 7: proto.QQHand.type:type_name -> proto.QQHandType
	7,  // 8: proto.QQPlayerEngameResult.bet_result:type_name -> proto.QQPlayerBetResult
	12, // 9: proto.QQGameFinish.hands:type_name -> proto.QQGameFinishHand
	0,  // 10: proto.QQGameFinish.win_cells:type_name -> proto.QQBetCell
	10, // 11: proto.QQGameFinish.result:type_name -> proto.QQPlayerEngameResult
	17, // 12: proto.QQGameFinish.players_win_amount:type_name -> proto.QQGameFinish.PlayersWinAmountEntry
	9,  // 13: proto.QQGameFinishHand.red_hand:type_name -> proto.QQHand
	9,  // 14: proto.QQGameFinishHand.blue_hand:type_name -> proto.QQHand
	12, // 15: proto.QQHistory.hand_histories:type_name -> proto.QQGameFinishHand
	0,  // 16: proto.QQDeskCellBet.cell:type_name -> proto.QQBetCell
	14, // 17: proto.QQDeskListCellBet.list_cell_bet:type_name -> proto.QQDeskCellBet
	6,  // 18: proto.QQUpdateDesk.user_bets:type_name -> proto.QQPlayerBets
	15, // 19: proto.QQUpdateDesk.list_cell_bet:type_name -> proto.QQDeskListCellBet
	13, // 20: proto.QQUpdateDesk.history:type_name -> proto.QQHistory
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_bandarqq_proto_init() }
func file_bandarqq_proto_init() {
	if File_bandarqq_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bandarqq_proto_rawDesc), len(file_bandarqq_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bandarqq_proto_goTypes,
		DependencyIndexes: file_bandarqq_proto_depIdxs,
		EnumInfos:         file_bandarqq_proto_enumTypes,
		MessageInfos:      file_bandarqq_proto_msgTypes,
	}.Build()
	File_bandarqq_proto = out.File
	file_bandarqq_proto_goTypes = nil
	file_bandarqq_proto_depIdxs = nil
}
