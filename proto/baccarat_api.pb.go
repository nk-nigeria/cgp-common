// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: baccarat_api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BaccaratBetCell int32

const (
	BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_UNSPECIFIED BaccaratBetCell = 0
	BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER      BaccaratBetCell = 1
	BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_BANKER      BaccaratBetCell = 2
	BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_TIE         BaccaratBetCell = 3
	BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER_PAIR BaccaratBetCell = 4
	BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_BANKER_PAIR BaccaratBetCell = 5
)

// Enum value maps for BaccaratBetCell.
var (
	BaccaratBetCell_name = map[int32]string{
		0: "BACCARAT_BET_CELL_BACCARAT_CELL_UNSPECIFIED",
		1: "BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER",
		2: "BACCARAT_BET_CELL_BACCARAT_CELL_BANKER",
		3: "BACCARAT_BET_CELL_BACCARAT_CELL_TIE",
		4: "BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER_PAIR",
		5: "BACCARAT_BET_CELL_BACCARAT_CELL_BANKER_PAIR",
	}
	BaccaratBetCell_value = map[string]int32{
		"BACCARAT_BET_CELL_BACCARAT_CELL_UNSPECIFIED": 0,
		"BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER":      1,
		"BACCARAT_BET_CELL_BACCARAT_CELL_BANKER":      2,
		"BACCARAT_BET_CELL_BACCARAT_CELL_TIE":         3,
		"BACCARAT_BET_CELL_BACCARAT_CELL_PLAYER_PAIR": 4,
		"BACCARAT_BET_CELL_BACCARAT_CELL_BANKER_PAIR": 5,
	}
)

func (x BaccaratBetCell) Enum() *BaccaratBetCell {
	p := new(BaccaratBetCell)
	*p = x
	return p
}

func (x BaccaratBetCell) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaccaratBetCell) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_api_proto_enumTypes[0].Descriptor()
}

func (BaccaratBetCell) Type() protoreflect.EnumType {
	return &file_baccarat_api_proto_enumTypes[0]
}

func (x BaccaratBetCell) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaccaratBetCell.Descriptor instead.
func (BaccaratBetCell) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{0}
}

type BaccaratBetActionType int32

const (
	BaccaratBetActionType_BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_NORMAL_UNSPECIFIED BaccaratBetActionType = 0
	BaccaratBetActionType_BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_REBET              BaccaratBetActionType = 1
	BaccaratBetActionType_BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_DOUBLE             BaccaratBetActionType = 2
)

// Enum value maps for BaccaratBetActionType.
var (
	BaccaratBetActionType_name = map[int32]string{
		0: "BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_NORMAL_UNSPECIFIED",
		1: "BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_REBET",
		2: "BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_DOUBLE",
	}
	BaccaratBetActionType_value = map[string]int32{
		"BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_NORMAL_UNSPECIFIED": 0,
		"BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_REBET":              1,
		"BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_DOUBLE":             2,
	}
)

func (x BaccaratBetActionType) Enum() *BaccaratBetActionType {
	p := new(BaccaratBetActionType)
	*p = x
	return p
}

func (x BaccaratBetActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaccaratBetActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_api_proto_enumTypes[1].Descriptor()
}

func (BaccaratBetActionType) Type() protoreflect.EnumType {
	return &file_baccarat_api_proto_enumTypes[1]
}

func (x BaccaratBetActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaccaratBetActionType.Descriptor instead.
func (BaccaratBetActionType) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{1}
}

type BaccaratBetRejectedReason int32

const (
	BaccaratBetRejectedReason_BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_UNSPECIFIED            BaccaratBetRejectedReason = 0
	BaccaratBetRejectedReason_BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_BALANCE_NOT_ENOUGH     BaccaratBetRejectedReason = 1
	BaccaratBetRejectedReason_BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_PREVIOUS_BET_NOT_EXIST BaccaratBetRejectedReason = 2
	BaccaratBetRejectedReason_BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_ALREADY_BET            BaccaratBetRejectedReason = 3
	BaccaratBetRejectedReason_BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_EXCEED_MAX_BET_ALLOWED BaccaratBetRejectedReason = 4
)

// Enum value maps for BaccaratBetRejectedReason.
var (
	BaccaratBetRejectedReason_name = map[int32]string{
		0: "BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_UNSPECIFIED",
		1: "BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_BALANCE_NOT_ENOUGH",
		2: "BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_PREVIOUS_BET_NOT_EXIST",
		3: "BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_ALREADY_BET",
		4: "BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_EXCEED_MAX_BET_ALLOWED",
	}
	BaccaratBetRejectedReason_value = map[string]int32{
		"BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_UNSPECIFIED":            0,
		"BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_BALANCE_NOT_ENOUGH":     1,
		"BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_PREVIOUS_BET_NOT_EXIST": 2,
		"BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_ALREADY_BET":            3,
		"BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_EXCEED_MAX_BET_ALLOWED": 4,
	}
)

func (x BaccaratBetRejectedReason) Enum() *BaccaratBetRejectedReason {
	p := new(BaccaratBetRejectedReason)
	*p = x
	return p
}

func (x BaccaratBetRejectedReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaccaratBetRejectedReason) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_api_proto_enumTypes[2].Descriptor()
}

func (BaccaratBetRejectedReason) Type() protoreflect.EnumType {
	return &file_baccarat_api_proto_enumTypes[2]
}

func (x BaccaratBetRejectedReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaccaratBetRejectedReason.Descriptor instead.
func (BaccaratBetRejectedReason) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{2}
}

type BaccaratBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chips int64           `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	Cell  BaccaratBetCell `protobuf:"varint,3,opt,name=cell,proto3,enum=api.BaccaratBetCell" json:"cell,omitempty"`
}

func (x *BaccaratBet) Reset() {
	*x = BaccaratBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baccarat_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaccaratBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratBet) ProtoMessage() {}

func (x *BaccaratBet) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratBet.ProtoReflect.Descriptor instead.
func (*BaccaratBet) Descriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{0}
}

func (x *BaccaratBet) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *BaccaratBet) GetCell() BaccaratBetCell {
	if x != nil {
		return x.Cell
	}
	return BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_UNSPECIFIED
}

type BaccaratBetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bet   *BaccaratBet `protobuf:"bytes,1,opt,name=bet,proto3" json:"bet,omitempty"`
	IsWin bool         `protobuf:"varint,2,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
}

func (x *BaccaratBetResult) Reset() {
	*x = BaccaratBetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baccarat_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaccaratBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratBetResult) ProtoMessage() {}

func (x *BaccaratBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratBetResult.ProtoReflect.Descriptor instead.
func (*BaccaratBetResult) Descriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{1}
}

func (x *BaccaratBetResult) GetBet() *BaccaratBet {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *BaccaratBetResult) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

type BaccaratPlayerBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ActionType BaccaratBetActionType `protobuf:"varint,2,opt,name=action_type,json=actionType,proto3,enum=api.BaccaratBetActionType" json:"action_type,omitempty"`
	Bets       []*BaccaratBet        `protobuf:"bytes,3,rep,name=bets,proto3" json:"bets,omitempty"`
}

func (x *BaccaratPlayerBet) Reset() {
	*x = BaccaratPlayerBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baccarat_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaccaratPlayerBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratPlayerBet) ProtoMessage() {}

func (x *BaccaratPlayerBet) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratPlayerBet.ProtoReflect.Descriptor instead.
func (*BaccaratPlayerBet) Descriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{2}
}

func (x *BaccaratPlayerBet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BaccaratPlayerBet) GetActionType() BaccaratBetActionType {
	if x != nil {
		return x.ActionType
	}
	return BaccaratBetActionType_BACCARAT_BET_ACTION_TYPE_BACCARAT_BET_NORMAL_UNSPECIFIED
}

func (x *BaccaratPlayerBet) GetBets() []*BaccaratBet {
	if x != nil {
		return x.Bets
	}
	return nil
}

type BaccaratPlayerBetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string               `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Lists  []*BaccaratBetResult `protobuf:"bytes,2,rep,name=lists,proto3" json:"lists,omitempty"`
}

func (x *BaccaratPlayerBetResult) Reset() {
	*x = BaccaratPlayerBetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baccarat_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaccaratPlayerBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratPlayerBetResult) ProtoMessage() {}

func (x *BaccaratPlayerBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratPlayerBetResult.ProtoReflect.Descriptor instead.
func (*BaccaratPlayerBetResult) Descriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{3}
}

func (x *BaccaratPlayerBetResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BaccaratPlayerBetResult) GetLists() []*BaccaratBetResult {
	if x != nil {
		return x.Lists
	}
	return nil
}

type BaccaratHand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards  []*Card `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	Point  int32   `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	IsPair bool    `protobuf:"varint,3,opt,name=is_pair,json=isPair,proto3" json:"is_pair,omitempty"`
}

func (x *BaccaratHand) Reset() {
	*x = BaccaratHand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baccarat_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaccaratHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratHand) ProtoMessage() {}

func (x *BaccaratHand) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratHand.ProtoReflect.Descriptor instead.
func (*BaccaratHand) Descriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{4}
}

func (x *BaccaratHand) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *BaccaratHand) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *BaccaratHand) GetIsPair() bool {
	if x != nil {
		return x.IsPair
	}
	return false
}

type BaccaratHands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Banker *BaccaratHand `protobuf:"bytes,1,opt,name=banker,proto3" json:"banker,omitempty"`
	Player *BaccaratHand `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
}

func (x *BaccaratHands) Reset() {
	*x = BaccaratHands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baccarat_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaccaratHands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratHands) ProtoMessage() {}

func (x *BaccaratHands) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratHands.ProtoReflect.Descriptor instead.
func (*BaccaratHands) Descriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{5}
}

func (x *BaccaratHands) GetBanker() *BaccaratHand {
	if x != nil {
		return x.Banker
	}
	return nil
}

func (x *BaccaratHands) GetPlayer() *BaccaratHand {
	if x != nil {
		return x.Player
	}
	return nil
}

type BaccaratGameFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hand           *BaccaratHands             `protobuf:"bytes,1,opt,name=hand,proto3" json:"hand,omitempty"`
	WinCells       []BaccaratBetCell          `protobuf:"varint,3,rep,packed,name=win_cells,json=winCells,proto3,enum=api.BaccaratBetCell" json:"win_cells,omitempty"`
	ListBetResults []*BaccaratPlayerBetResult `protobuf:"bytes,4,rep,name=list_bet_results,json=listBetResults,proto3" json:"list_bet_results,omitempty"`
}

func (x *BaccaratGameFinish) Reset() {
	*x = BaccaratGameFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baccarat_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaccaratGameFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratGameFinish) ProtoMessage() {}

func (x *BaccaratGameFinish) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratGameFinish.ProtoReflect.Descriptor instead.
func (*BaccaratGameFinish) Descriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{6}
}

func (x *BaccaratGameFinish) GetHand() *BaccaratHands {
	if x != nil {
		return x.Hand
	}
	return nil
}

func (x *BaccaratGameFinish) GetWinCells() []BaccaratBetCell {
	if x != nil {
		return x.WinCells
	}
	return nil
}

func (x *BaccaratGameFinish) GetListBetResults() []*BaccaratPlayerBetResult {
	if x != nil {
		return x.ListBetResults
	}
	return nil
}

type BaccaratBetCellInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cell     BaccaratBetCell `protobuf:"varint,1,opt,name=cell,proto3,enum=api.BaccaratBetCell" json:"cell,omitempty"`
	Chips    int64           `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	NUserBet int32           `protobuf:"varint,3,opt,name=n_user_bet,json=nUserBet,proto3" json:"n_user_bet,omitempty"`
}

func (x *BaccaratBetCellInfo) Reset() {
	*x = BaccaratBetCellInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baccarat_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaccaratBetCellInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratBetCellInfo) ProtoMessage() {}

func (x *BaccaratBetCellInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratBetCellInfo.ProtoReflect.Descriptor instead.
func (*BaccaratBetCellInfo) Descriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{7}
}

func (x *BaccaratBetCellInfo) GetCell() BaccaratBetCell {
	if x != nil {
		return x.Cell
	}
	return BaccaratBetCell_BACCARAT_BET_CELL_BACCARAT_CELL_UNSPECIFIED
}

func (x *BaccaratBetCellInfo) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *BaccaratBetCellInfo) GetNUserBet() int32 {
	if x != nil {
		return x.NUserBet
	}
	return 0
}

type BaccaratSimpleHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankerWin  int32 `protobuf:"varint,1,opt,name=banker_win,json=bankerWin,proto3" json:"banker_win,omitempty"`
	PlayerWin  int32 `protobuf:"varint,2,opt,name=player_win,json=playerWin,proto3" json:"player_win,omitempty"`
	Tie        int32 `protobuf:"varint,3,opt,name=tie,proto3" json:"tie,omitempty"`
	BankerPair int32 `protobuf:"varint,4,opt,name=banker_pair,json=bankerPair,proto3" json:"banker_pair,omitempty"`
	PlayerPair int32 `protobuf:"varint,5,opt,name=player_pair,json=playerPair,proto3" json:"player_pair,omitempty"`
}

func (x *BaccaratSimpleHistory) Reset() {
	*x = BaccaratSimpleHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baccarat_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaccaratSimpleHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratSimpleHistory) ProtoMessage() {}

func (x *BaccaratSimpleHistory) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratSimpleHistory.ProtoReflect.Descriptor instead.
func (*BaccaratSimpleHistory) Descriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{8}
}

func (x *BaccaratSimpleHistory) GetBankerWin() int32 {
	if x != nil {
		return x.BankerWin
	}
	return 0
}

func (x *BaccaratSimpleHistory) GetPlayerWin() int32 {
	if x != nil {
		return x.PlayerWin
	}
	return 0
}

func (x *BaccaratSimpleHistory) GetTie() int32 {
	if x != nil {
		return x.Tie
	}
	return 0
}

func (x *BaccaratSimpleHistory) GetBankerPair() int32 {
	if x != nil {
		return x.BankerPair
	}
	return 0
}

func (x *BaccaratSimpleHistory) GetPlayerPair() int32 {
	if x != nil {
		return x.PlayerPair
	}
	return 0
}

type BaccaratUpdateDesk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NPlayers            int32                  `protobuf:"varint,1,opt,name=n_players,json=nPlayers,proto3" json:"n_players,omitempty"`
	IsUpdateUserBet     bool                   `protobuf:"varint,2,opt,name=is_update_user_bet,json=isUpdateUserBet,proto3" json:"is_update_user_bet,omitempty"`
	IsUpdateDeskCell    bool                   `protobuf:"varint,3,opt,name=is_update_desk_cell,json=isUpdateDeskCell,proto3" json:"is_update_desk_cell,omitempty"`
	IsUpdateGameHistory bool                   `protobuf:"varint,4,opt,name=is_update_game_history,json=isUpdateGameHistory,proto3" json:"is_update_game_history,omitempty"`
	UserBet             *BaccaratPlayerBet     `protobuf:"bytes,5,opt,name=user_bet,json=userBet,proto3" json:"user_bet,omitempty"`
	DeskCells           []*BaccaratBetCellInfo `protobuf:"bytes,6,rep,name=desk_cells,json=deskCells,proto3" json:"desk_cells,omitempty"`
	History             *BaccaratSimpleHistory `protobuf:"bytes,7,opt,name=history,proto3" json:"history,omitempty"`
}

func (x *BaccaratUpdateDesk) Reset() {
	*x = BaccaratUpdateDesk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baccarat_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaccaratUpdateDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratUpdateDesk) ProtoMessage() {}

func (x *BaccaratUpdateDesk) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratUpdateDesk.ProtoReflect.Descriptor instead.
func (*BaccaratUpdateDesk) Descriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{9}
}

func (x *BaccaratUpdateDesk) GetNPlayers() int32 {
	if x != nil {
		return x.NPlayers
	}
	return 0
}

func (x *BaccaratUpdateDesk) GetIsUpdateUserBet() bool {
	if x != nil {
		return x.IsUpdateUserBet
	}
	return false
}

func (x *BaccaratUpdateDesk) GetIsUpdateDeskCell() bool {
	if x != nil {
		return x.IsUpdateDeskCell
	}
	return false
}

func (x *BaccaratUpdateDesk) GetIsUpdateGameHistory() bool {
	if x != nil {
		return x.IsUpdateGameHistory
	}
	return false
}

func (x *BaccaratUpdateDesk) GetUserBet() *BaccaratPlayerBet {
	if x != nil {
		return x.UserBet
	}
	return nil
}

func (x *BaccaratUpdateDesk) GetDeskCells() []*BaccaratBetCellInfo {
	if x != nil {
		return x.DeskCells
	}
	return nil
}

func (x *BaccaratUpdateDesk) GetHistory() *BaccaratSimpleHistory {
	if x != nil {
		return x.History
	}
	return nil
}

type BaccaratBetActionReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason BaccaratBetRejectedReason `protobuf:"varint,1,opt,name=reason,proto3,enum=api.BaccaratBetRejectedReason" json:"reason,omitempty"`
}

func (x *BaccaratBetActionReject) Reset() {
	*x = BaccaratBetActionReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baccarat_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaccaratBetActionReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratBetActionReject) ProtoMessage() {}

func (x *BaccaratBetActionReject) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratBetActionReject.ProtoReflect.Descriptor instead.
func (*BaccaratBetActionReject) Descriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{10}
}

func (x *BaccaratBetActionReject) GetReason() BaccaratBetRejectedReason {
	if x != nil {
		return x.Reason
	}
	return BaccaratBetRejectedReason_BACCARAT_BET_REJECTED_REASON_BACCARAT_BET_REJECTED_UNSPECIFIED
}

// send deal card server->client, is_player = true mean that that card is for
// player, else banker append those card into respectively player hand hands
// field is purely for sync between server and client, use it as u want
type BaccaratUpdateDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPlayer bool           `protobuf:"varint,1,opt,name=is_player,json=isPlayer,proto3" json:"is_player,omitempty"`
	Cards    []*Card        `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
	Hands    *BaccaratHands `protobuf:"bytes,3,opt,name=hands,proto3" json:"hands,omitempty"`
}

func (x *BaccaratUpdateDeal) Reset() {
	*x = BaccaratUpdateDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baccarat_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaccaratUpdateDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaccaratUpdateDeal) ProtoMessage() {}

func (x *BaccaratUpdateDeal) ProtoReflect() protoreflect.Message {
	mi := &file_baccarat_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaccaratUpdateDeal.ProtoReflect.Descriptor instead.
func (*BaccaratUpdateDeal) Descriptor() ([]byte, []int) {
	return file_baccarat_api_proto_rawDescGZIP(), []int{11}
}

func (x *BaccaratUpdateDeal) GetIsPlayer() bool {
	if x != nil {
		return x.IsPlayer
	}
	return false
}

func (x *BaccaratUpdateDeal) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *BaccaratUpdateDeal) GetHands() *BaccaratHands {
	if x != nil {
		return x.Hands
	}
	return nil
}

var File_baccarat_api_proto protoreflect.FileDescriptor

var file_baccarat_api_proto_rawDesc = []byte{
	0x0a, 0x12, 0x62, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x63, 0x61,
	0x72, 0x61, 0x74, 0x42, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x04,
	0x63, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x42, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x22, 0x4e, 0x0a, 0x11, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72,
	0x61, 0x74, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x62,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42,
	0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x42, 0x65, 0x74, 0x52, 0x03, 0x62, 0x65, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x63, 0x63, 0x61,
	0x72, 0x61, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x42, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x42,
	0x65, 0x74, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x22, 0x60, 0x0a, 0x17, 0x42, 0x61, 0x63, 0x63,
	0x61, 0x72, 0x61, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x0c, 0x42, 0x61,
	0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x50, 0x61, 0x69, 0x72, 0x22, 0x65, 0x0a, 0x0d, 0x42, 0x61,
	0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x62,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x06,
	0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x63,
	0x63, 0x61, 0x72, 0x61, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x22, 0xb7, 0x01, 0x0a, 0x12, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x04, 0x68, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x63,
	0x63, 0x61, 0x72, 0x61, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x68, 0x61, 0x6e, 0x64,
	0x12, 0x31, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72,
	0x61, 0x74, 0x42, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x13, 0x42,
	0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x42, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x42,
	0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69,
	0x70, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x22, 0xa9, 0x01, 0x0a, 0x15, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x22, 0xe4, 0x02, 0x0a,
	0x12, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x2d, 0x0a,
	0x13, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x16,
	0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x31, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72,
	0x61, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42,
	0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x42, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x64, 0x65, 0x73, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x34, 0x0a,
	0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x22, 0x51, 0x0a, 0x17, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x42,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x36,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x12, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72,
	0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x68, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x68,
	0x61, 0x6e, 0x64, 0x73, 0x2a, 0xa5, 0x02, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61,
	0x74, 0x42, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x2f, 0x0a, 0x2b, 0x42, 0x41, 0x43, 0x43,
	0x41, 0x52, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x42, 0x41,
	0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x41, 0x43,
	0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x42,
	0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41,
	0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x42, 0x41, 0x43, 0x43, 0x41,
	0x52, 0x41, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x42, 0x45,
	0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x49, 0x45, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x42, 0x41,
	0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f,
	0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x42,
	0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x05, 0x2a, 0xb8, 0x01, 0x0a,
	0x15, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x42, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x38, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52,
	0x41, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54,
	0x5f, 0x42, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45,
	0x42, 0x45, 0x54, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41,
	0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x44,
	0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x8c, 0x03, 0x0a, 0x19, 0x42, 0x61, 0x63, 0x63,
	0x61, 0x72, 0x61, 0x74, 0x42, 0x65, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x3e, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41,
	0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x42,
	0x45, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x49, 0x0a, 0x45, 0x42, 0x41, 0x43,
	0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52,
	0x41, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55,
	0x47, 0x48, 0x10, 0x01, 0x12, 0x4d, 0x0a, 0x49, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54,
	0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x42, 0x45,
	0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49,
	0x4f, 0x55, 0x53, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x42, 0x0a, 0x3e, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f,
	0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x42, 0x45, 0x54, 0x10, 0x03, 0x12, 0x4d, 0x0a, 0x49, 0x42, 0x41, 0x43, 0x43, 0x41,
	0x52, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x43, 0x43, 0x41, 0x52, 0x41, 0x54,
	0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0x04, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x67, 0x70, 0x2d, 0x62, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_baccarat_api_proto_rawDescOnce sync.Once
	file_baccarat_api_proto_rawDescData = file_baccarat_api_proto_rawDesc
)

func file_baccarat_api_proto_rawDescGZIP() []byte {
	file_baccarat_api_proto_rawDescOnce.Do(func() {
		file_baccarat_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_baccarat_api_proto_rawDescData)
	})
	return file_baccarat_api_proto_rawDescData
}

var file_baccarat_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_baccarat_api_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_baccarat_api_proto_goTypes = []any{
	(BaccaratBetCell)(0),            // 0: api.BaccaratBetCell
	(BaccaratBetActionType)(0),      // 1: api.BaccaratBetActionType
	(BaccaratBetRejectedReason)(0),  // 2: api.BaccaratBetRejectedReason
	(*BaccaratBet)(nil),             // 3: api.BaccaratBet
	(*BaccaratBetResult)(nil),       // 4: api.BaccaratBetResult
	(*BaccaratPlayerBet)(nil),       // 5: api.BaccaratPlayerBet
	(*BaccaratPlayerBetResult)(nil), // 6: api.BaccaratPlayerBetResult
	(*BaccaratHand)(nil),            // 7: api.BaccaratHand
	(*BaccaratHands)(nil),           // 8: api.BaccaratHands
	(*BaccaratGameFinish)(nil),      // 9: api.BaccaratGameFinish
	(*BaccaratBetCellInfo)(nil),     // 10: api.BaccaratBetCellInfo
	(*BaccaratSimpleHistory)(nil),   // 11: api.BaccaratSimpleHistory
	(*BaccaratUpdateDesk)(nil),      // 12: api.BaccaratUpdateDesk
	(*BaccaratBetActionReject)(nil), // 13: api.BaccaratBetActionReject
	(*BaccaratUpdateDeal)(nil),      // 14: api.BaccaratUpdateDeal
	(*Card)(nil),                    // 15: api.Card
}
var file_baccarat_api_proto_depIdxs = []int32{
	0,  // 0: api.BaccaratBet.cell:type_name -> api.BaccaratBetCell
	3,  // 1: api.BaccaratBetResult.bet:type_name -> api.BaccaratBet
	1,  // 2: api.BaccaratPlayerBet.action_type:type_name -> api.BaccaratBetActionType
	3,  // 3: api.BaccaratPlayerBet.bets:type_name -> api.BaccaratBet
	4,  // 4: api.BaccaratPlayerBetResult.lists:type_name -> api.BaccaratBetResult
	15, // 5: api.BaccaratHand.cards:type_name -> api.Card
	7,  // 6: api.BaccaratHands.banker:type_name -> api.BaccaratHand
	7,  // 7: api.BaccaratHands.player:type_name -> api.BaccaratHand
	8,  // 8: api.BaccaratGameFinish.hand:type_name -> api.BaccaratHands
	0,  // 9: api.BaccaratGameFinish.win_cells:type_name -> api.BaccaratBetCell
	6,  // 10: api.BaccaratGameFinish.list_bet_results:type_name -> api.BaccaratPlayerBetResult
	0,  // 11: api.BaccaratBetCellInfo.cell:type_name -> api.BaccaratBetCell
	5,  // 12: api.BaccaratUpdateDesk.user_bet:type_name -> api.BaccaratPlayerBet
	10, // 13: api.BaccaratUpdateDesk.desk_cells:type_name -> api.BaccaratBetCellInfo
	11, // 14: api.BaccaratUpdateDesk.history:type_name -> api.BaccaratSimpleHistory
	2,  // 15: api.BaccaratBetActionReject.reason:type_name -> api.BaccaratBetRejectedReason
	15, // 16: api.BaccaratUpdateDeal.cards:type_name -> api.Card
	8,  // 17: api.BaccaratUpdateDeal.hands:type_name -> api.BaccaratHands
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_baccarat_api_proto_init() }
func file_baccarat_api_proto_init() {
	if File_baccarat_api_proto != nil {
		return
	}
	file_chinese_poker_game_api_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_baccarat_api_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BaccaratBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baccarat_api_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BaccaratBetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baccarat_api_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*BaccaratPlayerBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baccarat_api_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BaccaratPlayerBetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baccarat_api_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BaccaratHand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baccarat_api_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BaccaratHands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baccarat_api_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BaccaratGameFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baccarat_api_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*BaccaratBetCellInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baccarat_api_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*BaccaratSimpleHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baccarat_api_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*BaccaratUpdateDesk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baccarat_api_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*BaccaratBetActionReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baccarat_api_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*BaccaratUpdateDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_baccarat_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_baccarat_api_proto_goTypes,
		DependencyIndexes: file_baccarat_api_proto_depIdxs,
		EnumInfos:         file_baccarat_api_proto_enumTypes,
		MessageInfos:      file_baccarat_api_proto_msgTypes,
	}.Build()
	File_baccarat_api_proto = out.File
	file_baccarat_api_proto_rawDesc = nil
	file_baccarat_api_proto_goTypes = nil
	file_baccarat_api_proto_depIdxs = nil
}
