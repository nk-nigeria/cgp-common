// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: match.proto

// The realtime protocol for the template match engine.

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The complete set of rpc used for communication between clients and server.
type RPCCode int32

const (
	// No opcode specified. Unused.
	RPCCode_RPC_FIND_MATCH   RPCCode = 0
	RPCCode_RPC_CREATE_MATCH RPCCode = 1
)

// Enum value maps for RPCCode.
var (
	RPCCode_name = map[int32]string{
		0: "RPC_FIND_MATCH",
		1: "RPC_CREATE_MATCH",
	}
	RPCCode_value = map[string]int32{
		"RPC_FIND_MATCH":   0,
		"RPC_CREATE_MATCH": 1,
	}
)

func (x RPCCode) Enum() *RPCCode {
	p := new(RPCCode)
	*p = x
	return p
}

func (x RPCCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RPCCode) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[0].Descriptor()
}

func (RPCCode) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[0]
}

func (x RPCCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RPCCode.Descriptor instead.
func (RPCCode) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0}
}

type BetDisableType int32

const (
	BetDisableType_BET_DISABLE_TYPE_UNSPECIFIED     BetDisableType = 0
	BetDisableType_BET_DISABLE_TYPE_NOT_ENOUGH_CHIP BetDisableType = 1
	BetDisableType_BET_DISABLE_TYPE_BELOW_MIN_VIP   BetDisableType = 2
	BetDisableType_BET_DISABLE_TYPE_ABOVE_MAX_VIP   BetDisableType = 3
)

// Enum value maps for BetDisableType.
var (
	BetDisableType_name = map[int32]string{
		0: "BET_DISABLE_TYPE_UNSPECIFIED",
		1: "BET_DISABLE_TYPE_NOT_ENOUGH_CHIP",
		2: "BET_DISABLE_TYPE_BELOW_MIN_VIP",
		3: "BET_DISABLE_TYPE_ABOVE_MAX_VIP",
	}
	BetDisableType_value = map[string]int32{
		"BET_DISABLE_TYPE_UNSPECIFIED":     0,
		"BET_DISABLE_TYPE_NOT_ENOUGH_CHIP": 1,
		"BET_DISABLE_TYPE_BELOW_MIN_VIP":   2,
		"BET_DISABLE_TYPE_ABOVE_MAX_VIP":   3,
	}
)

func (x BetDisableType) Enum() *BetDisableType {
	p := new(BetDisableType)
	*p = x
	return p
}

func (x BetDisableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BetDisableType) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[1].Descriptor()
}

func (BetDisableType) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[1]
}

func (x BetDisableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BetDisableType.Descriptor instead.
func (BetDisableType) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{1}
}

// Payload for an RPC request to find a match.
type RpcFindMatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User can choose a fast or normal speed match.
	MarkUnit      int32  `protobuf:"varint,1,opt,name=mark_unit,json=markUnit,proto3" json:"mark_unit,omitempty"`
	GameCode      string `protobuf:"bytes,2,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	WithNonOpen   bool   `protobuf:"varint,3,opt,name=with_non_open,json=withNonOpen,proto3" json:"with_non_open,omitempty"`
	Create        bool   `protobuf:"varint,4,opt,name=create,proto3" json:"create,omitempty"`
	MockCodeCard  int32  `protobuf:"varint,5,opt,name=mock_code_card,json=mockCodeCard,proto3" json:"mock_code_card,omitempty"`
	UserData      string `protobuf:"bytes,6,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	LastBet       int64  `protobuf:"varint,7,opt,name=last_bet,json=lastBet,proto3" json:"last_bet,omitempty"`
	Password      string `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`
	TableId       string `protobuf:"bytes,9,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RpcFindMatchRequest) Reset() {
	*x = RpcFindMatchRequest{}
	mi := &file_match_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcFindMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcFindMatchRequest) ProtoMessage() {}

func (x *RpcFindMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcFindMatchRequest.ProtoReflect.Descriptor instead.
func (*RpcFindMatchRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0}
}

func (x *RpcFindMatchRequest) GetMarkUnit() int32 {
	if x != nil {
		return x.MarkUnit
	}
	return 0
}

func (x *RpcFindMatchRequest) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *RpcFindMatchRequest) GetWithNonOpen() bool {
	if x != nil {
		return x.WithNonOpen
	}
	return false
}

func (x *RpcFindMatchRequest) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *RpcFindMatchRequest) GetMockCodeCard() int32 {
	if x != nil {
		return x.MockCodeCard
	}
	return 0
}

func (x *RpcFindMatchRequest) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *RpcFindMatchRequest) GetLastBet() int64 {
	if x != nil {
		return x.LastBet
	}
	return 0
}

func (x *RpcFindMatchRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RpcFindMatchRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type Match struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	MatchId      string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Size         int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	MaxSize      int32                  `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	Name         string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	MarkUnit     int32                  `protobuf:"varint,5,opt,name=mark_unit,json=markUnit,proto3" json:"mark_unit,omitempty"`
	Open         bool                   `protobuf:"varint,6,opt,name=open,proto3" json:"open,omitempty"`
	MockCodeCard int32                  `protobuf:"varint,7,opt,name=mock_code_card,json=mockCodeCard,proto3" json:"mock_code_card,omitempty"`
	UserData     string                 `protobuf:"bytes,8,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	LastBet      int64                  `protobuf:"varint,9,opt,name=last_bet,json=lastBet,proto3" json:"last_bet,omitempty"`
	UserCreated  *Profile               `protobuf:"bytes,10,opt,name=user_created,json=userCreated,proto3" json:"user_created,omitempty"`
	TableId      string                 `protobuf:"bytes,11,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	NumBot       int32                  `protobuf:"varint,12,opt,name=num_bot,json=numBot,proto3" json:"num_bot,omitempty"`
	Password     string                 `protobuf:"bytes,13,opt,name=password,proto3" json:"password,omitempty"`
	// repeated string players = 14;
	Profiles          []*SimpleProfile `protobuf:"bytes,15,rep,name=profiles,proto3" json:"profiles,omitempty"`
	Bet               *Bet             `protobuf:"bytes,16,opt,name=bet,proto3" json:"bet,omitempty"`
	GameState         GameState        `protobuf:"varint,17,opt,name=game_state,json=gameState,proto3,enum=proto.GameState" json:"game_state,omitempty"`
	PlayingPlayers    []string         `protobuf:"bytes,18,rep,name=playing_players,json=playingPlayers,proto3" json:"playing_players,omitempty"`
	GameStateDuration map[int32]int32  `protobuf:"bytes,19,rep,name=game_state_duration,json=gameStateDuration,proto3" json:"game_state_duration,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Pot               int64            `protobuf:"varint,20,opt,name=pot,proto3" json:"pot,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Match) Reset() {
	*x = Match{}
	mi := &file_match_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{1}
}

func (x *Match) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *Match) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Match) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *Match) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Match) GetMarkUnit() int32 {
	if x != nil {
		return x.MarkUnit
	}
	return 0
}

func (x *Match) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *Match) GetMockCodeCard() int32 {
	if x != nil {
		return x.MockCodeCard
	}
	return 0
}

func (x *Match) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *Match) GetLastBet() int64 {
	if x != nil {
		return x.LastBet
	}
	return 0
}

func (x *Match) GetUserCreated() *Profile {
	if x != nil {
		return x.UserCreated
	}
	return nil
}

func (x *Match) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *Match) GetNumBot() int32 {
	if x != nil {
		return x.NumBot
	}
	return 0
}

func (x *Match) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Match) GetProfiles() []*SimpleProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *Match) GetBet() *Bet {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *Match) GetGameState() GameState {
	if x != nil {
		return x.GameState
	}
	return GameState_GAME_STATE_UNKNOWN
}

func (x *Match) GetPlayingPlayers() []string {
	if x != nil {
		return x.PlayingPlayers
	}
	return nil
}

func (x *Match) GetGameStateDuration() map[int32]int32 {
	if x != nil {
		return x.GameStateDuration
	}
	return nil
}

func (x *Match) GetPot() int64 {
	if x != nil {
		return x.Pot
	}
	return 0
}

type MatchInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	QueryUser     bool                   `protobuf:"varint,2,opt,name=query_user,json=queryUser,proto3" json:"query_user,omitempty"`
	NoCache       bool                   `protobuf:"varint,3,opt,name=no_cache,json=noCache,proto3" json:"no_cache,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchInfoRequest) Reset() {
	*x = MatchInfoRequest{}
	mi := &file_match_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfoRequest) ProtoMessage() {}

func (x *MatchInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfoRequest.ProtoReflect.Descriptor instead.
func (*MatchInfoRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{2}
}

func (x *MatchInfoRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchInfoRequest) GetQueryUser() bool {
	if x != nil {
		return x.QueryUser
	}
	return false
}

func (x *MatchInfoRequest) GetNoCache() bool {
	if x != nil {
		return x.NoCache
	}
	return false
}

// Payload for an RPC response containing match IDs the user can join.
type RpcFindMatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// One or more matches that fit the user's request.
	Matches       []*Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RpcFindMatchResponse) Reset() {
	*x = RpcFindMatchResponse{}
	mi := &file_match_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcFindMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcFindMatchResponse) ProtoMessage() {}

func (x *RpcFindMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcFindMatchResponse.ProtoReflect.Descriptor instead.
func (*RpcFindMatchResponse) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{3}
}

func (x *RpcFindMatchResponse) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

// Payload for an RPC request to find a match.
type RpcCreateMatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MarkUnit      int32                  `protobuf:"varint,1,opt,name=mark_unit,json=markUnit,proto3" json:"mark_unit,omitempty"`
	GameCode      string                 `protobuf:"bytes,2,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Password      string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	LastBet       int64                  `protobuf:"varint,5,opt,name=last_bet,json=lastBet,proto3" json:"last_bet,omitempty"`
	MaxSize       int64                  `protobuf:"varint,6,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	CustomData    string                 `protobuf:"bytes,7,opt,name=custom_data,json=customData,proto3" json:"custom_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RpcCreateMatchRequest) Reset() {
	*x = RpcCreateMatchRequest{}
	mi := &file_match_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcCreateMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcCreateMatchRequest) ProtoMessage() {}

func (x *RpcCreateMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcCreateMatchRequest.ProtoReflect.Descriptor instead.
func (*RpcCreateMatchRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{4}
}

func (x *RpcCreateMatchRequest) GetMarkUnit() int32 {
	if x != nil {
		return x.MarkUnit
	}
	return 0
}

func (x *RpcCreateMatchRequest) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *RpcCreateMatchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RpcCreateMatchRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RpcCreateMatchRequest) GetLastBet() int64 {
	if x != nil {
		return x.LastBet
	}
	return 0
}

func (x *RpcCreateMatchRequest) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *RpcCreateMatchRequest) GetCustomData() string {
	if x != nil {
		return x.CustomData
	}
	return ""
}

// Payload for an RPC response containing match IDs the user can join.
type RpcCreateMatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// One or more matches that fit the user's request.
	MatchId       string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RpcCreateMatchResponse) Reset() {
	*x = RpcCreateMatchResponse{}
	mi := &file_match_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcCreateMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcCreateMatchResponse) ProtoMessage() {}

func (x *RpcCreateMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcCreateMatchResponse.ProtoReflect.Descriptor instead.
func (*RpcCreateMatchResponse) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{5}
}

func (x *RpcCreateMatchResponse) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type Bet struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Enable         bool                   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	MarkUnit       float32                `protobuf:"fixed32,3,opt,name=mark_unit,json=markUnit,proto3" json:"mark_unit,omitempty"` // mức cược (chip)
	GameId         int64                  `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	XJoin          float32                `protobuf:"fixed32,5,opt,name=x_join,json=xJoin,proto3" json:"x_join,omitempty"`
	AgJoin         int64                  `protobuf:"varint,6,opt,name=ag_join,json=agJoin,proto3" json:"ag_join,omitempty"`
	XPlayNow       float32                `protobuf:"fixed32,7,opt,name=x_play_now,json=xPlayNow,proto3" json:"x_play_now,omitempty"`
	AgPlayNow      int64                  `protobuf:"varint,8,opt,name=ag_play_now,json=agPlayNow,proto3" json:"ag_play_now,omitempty"`
	XLeave         float32                `protobuf:"fixed32,9,opt,name=x_leave,json=xLeave,proto3" json:"x_leave,omitempty"`
	AgLeave        int64                  `protobuf:"varint,10,opt,name=ag_leave,json=agLeave,proto3" json:"ag_leave,omitempty"`
	XFee           float32                `protobuf:"fixed32,11,opt,name=x_fee,json=xFee,proto3" json:"x_fee,omitempty"`
	AgFee          int64                  `protobuf:"varint,12,opt,name=ag_fee,json=agFee,proto3" json:"ag_fee,omitempty"`
	NewFee         float32                `protobuf:"fixed32,13,opt,name=new_fee,json=newFee,proto3" json:"new_fee,omitempty"`
	CountPlaying   int64                  `protobuf:"varint,14,opt,name=count_playing,json=countPlaying,proto3" json:"count_playing,omitempty"`
	MinVip         int64                  `protobuf:"varint,15,opt,name=min_vip,json=minVip,proto3" json:"min_vip,omitempty"`
	MaxVip         int64                  `protobuf:"varint,16,opt,name=max_vip,json=maxVip,proto3" json:"max_vip,omitempty"`
	BetDisableType BetDisableType         `protobuf:"varint,17,opt,name=bet_disable_type,json=betDisableType,proto3,enum=proto.BetDisableType" json:"bet_disable_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Bet) Reset() {
	*x = Bet{}
	mi := &file_match_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bet) ProtoMessage() {}

func (x *Bet) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bet.ProtoReflect.Descriptor instead.
func (*Bet) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{6}
}

func (x *Bet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bet) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Bet) GetMarkUnit() float32 {
	if x != nil {
		return x.MarkUnit
	}
	return 0
}

func (x *Bet) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *Bet) GetXJoin() float32 {
	if x != nil {
		return x.XJoin
	}
	return 0
}

func (x *Bet) GetAgJoin() int64 {
	if x != nil {
		return x.AgJoin
	}
	return 0
}

func (x *Bet) GetXPlayNow() float32 {
	if x != nil {
		return x.XPlayNow
	}
	return 0
}

func (x *Bet) GetAgPlayNow() int64 {
	if x != nil {
		return x.AgPlayNow
	}
	return 0
}

func (x *Bet) GetXLeave() float32 {
	if x != nil {
		return x.XLeave
	}
	return 0
}

func (x *Bet) GetAgLeave() int64 {
	if x != nil {
		return x.AgLeave
	}
	return 0
}

func (x *Bet) GetXFee() float32 {
	if x != nil {
		return x.XFee
	}
	return 0
}

func (x *Bet) GetAgFee() int64 {
	if x != nil {
		return x.AgFee
	}
	return 0
}

func (x *Bet) GetNewFee() float32 {
	if x != nil {
		return x.NewFee
	}
	return 0
}

func (x *Bet) GetCountPlaying() int64 {
	if x != nil {
		return x.CountPlaying
	}
	return 0
}

func (x *Bet) GetMinVip() int64 {
	if x != nil {
		return x.MinVip
	}
	return 0
}

func (x *Bet) GetMaxVip() int64 {
	if x != nil {
		return x.MaxVip
	}
	return 0
}

func (x *Bet) GetBetDisableType() BetDisableType {
	if x != nil {
		return x.BetDisableType
	}
	return BetDisableType_BET_DISABLE_TYPE_UNSPECIFIED
}

type Bets struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bets          []*Bet                 `protobuf:"bytes,1,rep,name=bets,proto3" json:"bets,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Offset        int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int64                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	BestChoice    *Bet                   `protobuf:"bytes,5,opt,name=best_choice,json=bestChoice,proto3" json:"best_choice,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bets) Reset() {
	*x = Bets{}
	mi := &file_match_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bets) ProtoMessage() {}

func (x *Bets) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bets.ProtoReflect.Descriptor instead.
func (*Bets) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{7}
}

func (x *Bets) GetBets() []*Bet {
	if x != nil {
		return x.Bets
	}
	return nil
}

func (x *Bets) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Bets) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Bets) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Bets) GetBestChoice() *Bet {
	if x != nil {
		return x.BestChoice
	}
	return nil
}

type BetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        int64                  `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int64                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BetRequest) Reset() {
	*x = BetRequest{}
	mi := &file_match_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetRequest) ProtoMessage() {}

func (x *BetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetRequest.ProtoReflect.Descriptor instead.
func (*BetRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{8}
}

func (x *BetRequest) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *BetRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *BetRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

var File_match_proto protoreflect.FileDescriptor

const file_match_proto_rawDesc = "" +
	"\n" +
	"\vmatch.proto\x12\x05proto\x1a\n" +
	"auth.proto\x1a\x11game_common.proto\"\xa0\x02\n" +
	"\x13RpcFindMatchRequest\x12\x1b\n" +
	"\tmark_unit\x18\x01 \x01(\x05R\bmarkUnit\x12\x1b\n" +
	"\tgame_code\x18\x02 \x01(\tR\bgameCode\x12\"\n" +
	"\rwith_non_open\x18\x03 \x01(\bR\vwithNonOpen\x12\x16\n" +
	"\x06create\x18\x04 \x01(\bR\x06create\x12$\n" +
	"\x0emock_code_card\x18\x05 \x01(\x05R\fmockCodeCard\x12\x1b\n" +
	"\tuser_data\x18\x06 \x01(\tR\buserData\x12\x19\n" +
	"\blast_bet\x18\a \x01(\x03R\alastBet\x12\x1a\n" +
	"\bpassword\x18\b \x01(\tR\bpassword\x12\x19\n" +
	"\btable_id\x18\t \x01(\tR\atableId\"\xce\x05\n" +
	"\x05Match\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchId\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x05R\x04size\x12\x19\n" +
	"\bmax_size\x18\x03 \x01(\x05R\amaxSize\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x1b\n" +
	"\tmark_unit\x18\x05 \x01(\x05R\bmarkUnit\x12\x12\n" +
	"\x04open\x18\x06 \x01(\bR\x04open\x12$\n" +
	"\x0emock_code_card\x18\a \x01(\x05R\fmockCodeCard\x12\x1b\n" +
	"\tuser_data\x18\b \x01(\tR\buserData\x12\x19\n" +
	"\blast_bet\x18\t \x01(\x03R\alastBet\x121\n" +
	"\fuser_created\x18\n" +
	" \x01(\v2\x0e.proto.ProfileR\vuserCreated\x12\x19\n" +
	"\btable_id\x18\v \x01(\tR\atableId\x12\x17\n" +
	"\anum_bot\x18\f \x01(\x05R\x06numBot\x12\x1a\n" +
	"\bpassword\x18\r \x01(\tR\bpassword\x120\n" +
	"\bprofiles\x18\x0f \x03(\v2\x14.proto.SimpleProfileR\bprofiles\x12\x1c\n" +
	"\x03bet\x18\x10 \x01(\v2\n" +
	".proto.BetR\x03bet\x12/\n" +
	"\n" +
	"game_state\x18\x11 \x01(\x0e2\x10.proto.GameStateR\tgameState\x12'\n" +
	"\x0fplaying_players\x18\x12 \x03(\tR\x0eplayingPlayers\x12S\n" +
	"\x13game_state_duration\x18\x13 \x03(\v2#.proto.Match.GameStateDurationEntryR\x11gameStateDuration\x12\x10\n" +
	"\x03pot\x18\x14 \x01(\x03R\x03pot\x1aD\n" +
	"\x16GameStateDurationEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"g\n" +
	"\x10MatchInfoRequest\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchId\x12\x1d\n" +
	"\n" +
	"query_user\x18\x02 \x01(\bR\tqueryUser\x12\x19\n" +
	"\bno_cache\x18\x03 \x01(\bR\anoCache\">\n" +
	"\x14RpcFindMatchResponse\x12&\n" +
	"\amatches\x18\x01 \x03(\v2\f.proto.MatchR\amatches\"\xd8\x01\n" +
	"\x15RpcCreateMatchRequest\x12\x1b\n" +
	"\tmark_unit\x18\x01 \x01(\x05R\bmarkUnit\x12\x1b\n" +
	"\tgame_code\x18\x02 \x01(\tR\bgameCode\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12\x19\n" +
	"\blast_bet\x18\x05 \x01(\x03R\alastBet\x12\x19\n" +
	"\bmax_size\x18\x06 \x01(\x03R\amaxSize\x12\x1f\n" +
	"\vcustom_data\x18\a \x01(\tR\n" +
	"customData\"3\n" +
	"\x16RpcCreateMatchResponse\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchId\"\xe2\x03\n" +
	"\x03Bet\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x16\n" +
	"\x06enable\x18\x02 \x01(\bR\x06enable\x12\x1b\n" +
	"\tmark_unit\x18\x03 \x01(\x02R\bmarkUnit\x12\x17\n" +
	"\agame_id\x18\x04 \x01(\x03R\x06gameId\x12\x15\n" +
	"\x06x_join\x18\x05 \x01(\x02R\x05xJoin\x12\x17\n" +
	"\aag_join\x18\x06 \x01(\x03R\x06agJoin\x12\x1c\n" +
	"\n" +
	"x_play_now\x18\a \x01(\x02R\bxPlayNow\x12\x1e\n" +
	"\vag_play_now\x18\b \x01(\x03R\tagPlayNow\x12\x17\n" +
	"\ax_leave\x18\t \x01(\x02R\x06xLeave\x12\x19\n" +
	"\bag_leave\x18\n" +
	" \x01(\x03R\aagLeave\x12\x13\n" +
	"\x05x_fee\x18\v \x01(\x02R\x04xFee\x12\x15\n" +
	"\x06ag_fee\x18\f \x01(\x03R\x05agFee\x12\x17\n" +
	"\anew_fee\x18\r \x01(\x02R\x06newFee\x12#\n" +
	"\rcount_playing\x18\x0e \x01(\x03R\fcountPlaying\x12\x17\n" +
	"\amin_vip\x18\x0f \x01(\x03R\x06minVip\x12\x17\n" +
	"\amax_vip\x18\x10 \x01(\x03R\x06maxVip\x12?\n" +
	"\x10bet_disable_type\x18\x11 \x01(\x0e2\x15.proto.BetDisableTypeR\x0ebetDisableType\"\x97\x01\n" +
	"\x04Bets\x12\x1e\n" +
	"\x04bets\x18\x01 \x03(\v2\n" +
	".proto.BetR\x04bets\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x03R\x06offset\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x03R\x05limit\x12+\n" +
	"\vbest_choice\x18\x05 \x01(\v2\n" +
	".proto.BetR\n" +
	"bestChoice\"S\n" +
	"\n" +
	"BetRequest\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x03R\x06gameId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x03R\x05limit*3\n" +
	"\aRPCCode\x12\x12\n" +
	"\x0eRPC_FIND_MATCH\x10\x00\x12\x14\n" +
	"\x10RPC_CREATE_MATCH\x10\x01*\xa0\x01\n" +
	"\x0eBetDisableType\x12 \n" +
	"\x1cBET_DISABLE_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" BET_DISABLE_TYPE_NOT_ENOUGH_CHIP\x10\x01\x12\"\n" +
	"\x1eBET_DISABLE_TYPE_BELOW_MIN_VIP\x10\x02\x12\"\n" +
	"\x1eBET_DISABLE_TYPE_ABOVE_MAX_VIP\x10\x03B4Z2github.com/nk-nigeria/whot-module/cgp-common/protob\x06proto3"

var (
	file_match_proto_rawDescOnce sync.Once
	file_match_proto_rawDescData []byte
)

func file_match_proto_rawDescGZIP() []byte {
	file_match_proto_rawDescOnce.Do(func() {
		file_match_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_match_proto_rawDesc), len(file_match_proto_rawDesc)))
	})
	return file_match_proto_rawDescData
}

var file_match_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_match_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_match_proto_goTypes = []any{
	(RPCCode)(0),                   // 0: proto.RPCCode
	(BetDisableType)(0),            // 1: proto.BetDisableType
	(*RpcFindMatchRequest)(nil),    // 2: proto.RpcFindMatchRequest
	(*Match)(nil),                  // 3: proto.Match
	(*MatchInfoRequest)(nil),       // 4: proto.MatchInfoRequest
	(*RpcFindMatchResponse)(nil),   // 5: proto.RpcFindMatchResponse
	(*RpcCreateMatchRequest)(nil),  // 6: proto.RpcCreateMatchRequest
	(*RpcCreateMatchResponse)(nil), // 7: proto.RpcCreateMatchResponse
	(*Bet)(nil),                    // 8: proto.Bet
	(*Bets)(nil),                   // 9: proto.Bets
	(*BetRequest)(nil),             // 10: proto.BetRequest
	nil,                            // 11: proto.Match.GameStateDurationEntry
	(*Profile)(nil),                // 12: proto.Profile
	(*SimpleProfile)(nil),          // 13: proto.SimpleProfile
	(GameState)(0),                 // 14: proto.GameState
}
var file_match_proto_depIdxs = []int32{
	12, // 0: proto.Match.user_created:type_name -> proto.Profile
	13, // 1: proto.Match.profiles:type_name -> proto.SimpleProfile
	8,  // 2: proto.Match.bet:type_name -> proto.Bet
	14, // 3: proto.Match.game_state:type_name -> proto.GameState
	11, // 4: proto.Match.game_state_duration:type_name -> proto.Match.GameStateDurationEntry
	3,  // 5: proto.RpcFindMatchResponse.matches:type_name -> proto.Match
	1,  // 6: proto.Bet.bet_disable_type:type_name -> proto.BetDisableType
	8,  // 7: proto.Bets.bets:type_name -> proto.Bet
	8,  // 8: proto.Bets.best_choice:type_name -> proto.Bet
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_match_proto_init() }
func file_match_proto_init() {
	if File_match_proto != nil {
		return
	}
	file_auth_proto_init()
	file_game_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_match_proto_rawDesc), len(file_match_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_match_proto_goTypes,
		DependencyIndexes: file_match_proto_depIdxs,
		EnumInfos:         file_match_proto_enumTypes,
		MessageInfos:      file_match_proto_msgTypes,
	}.Build()
	File_match_proto = out.File
	file_match_proto_goTypes = nil
	file_match_proto_depIdxs = nil
}
