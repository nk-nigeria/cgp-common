// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: color_game.proto

// The realtime protocol for the template match engine.

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Color int32

const (
	Color_COLOR_UNSPECIFIED Color = 0
	Color_COLOR_YELLOW      Color = 1
	Color_COLOR_WHITE       Color = 2
	Color_COLOR_PINK        Color = 4
	Color_COLOR_BLUE        Color = 8
	Color_COLOR_RED         Color = 16
	Color_COLOR_GREEN       Color = 32
)

// Enum value maps for Color.
var (
	Color_name = map[int32]string{
		0:  "COLOR_UNSPECIFIED",
		1:  "COLOR_YELLOW",
		2:  "COLOR_WHITE",
		4:  "COLOR_PINK",
		8:  "COLOR_BLUE",
		16: "COLOR_RED",
		32: "COLOR_GREEN",
	}
	Color_value = map[string]int32{
		"COLOR_UNSPECIFIED": 0,
		"COLOR_YELLOW":      1,
		"COLOR_WHITE":       2,
		"COLOR_PINK":        4,
		"COLOR_BLUE":        8,
		"COLOR_RED":         16,
		"COLOR_GREEN":       32,
	}
)

func (x Color) Enum() *Color {
	p := new(Color)
	*p = x
	return p
}

func (x Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Color) Descriptor() protoreflect.EnumDescriptor {
	return file_color_game_proto_enumTypes[0].Descriptor()
}

func (Color) Type() protoreflect.EnumType {
	return &file_color_game_proto_enumTypes[0]
}

func (x Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Color.Descriptor instead.
func (Color) EnumDescriptor() ([]byte, []int) {
	return file_color_game_proto_rawDescGZIP(), []int{0}
}

type BetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string     `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Bets   []*InfoBet `protobuf:"bytes,2,rep,name=bets,proto3" json:"bets,omitempty"`
	IsWin  bool       `protobuf:"varint,3,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
}

func (x *BetResult) Reset() {
	*x = BetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetResult) ProtoMessage() {}

func (x *BetResult) ProtoReflect() protoreflect.Message {
	mi := &file_color_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetResult.ProtoReflect.Descriptor instead.
func (*BetResult) Descriptor() ([]byte, []int) {
	return file_color_game_proto_rawDescGZIP(), []int{0}
}

func (x *BetResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BetResult) GetBets() []*InfoBet {
	if x != nil {
		return x.Bets
	}
	return nil
}

func (x *BetResult) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

type ColorGameFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RollColor    *ListColor   `protobuf:"bytes,1,opt,name=roll_color,json=rollColor,proto3" json:"roll_color,omitempty"`
	BetResults   []*BetResult `protobuf:"bytes,2,rep,name=bet_results,json=betResults,proto3" json:"bet_results,omitempty"`
	HistoryRolls *HistoryRoll `protobuf:"bytes,3,opt,name=history_rolls,json=historyRolls,proto3" json:"history_rolls,omitempty"`
}

func (x *ColorGameFinish) Reset() {
	*x = ColorGameFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorGameFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorGameFinish) ProtoMessage() {}

func (x *ColorGameFinish) ProtoReflect() protoreflect.Message {
	mi := &file_color_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorGameFinish.ProtoReflect.Descriptor instead.
func (*ColorGameFinish) Descriptor() ([]byte, []int) {
	return file_color_game_proto_rawDescGZIP(), []int{1}
}

func (x *ColorGameFinish) GetRollColor() *ListColor {
	if x != nil {
		return x.RollColor
	}
	return nil
}

func (x *ColorGameFinish) GetBetResults() []*BetResult {
	if x != nil {
		return x.BetResults
	}
	return nil
}

func (x *ColorGameFinish) GetHistoryRolls() *HistoryRoll {
	if x != nil {
		return x.HistoryRolls
	}
	return nil
}

type ListColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Colors []int32 `protobuf:"varint,1,rep,packed,name=colors,proto3" json:"colors,omitempty"`
}

func (x *ListColor) Reset() {
	*x = ListColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListColor) ProtoMessage() {}

func (x *ListColor) ProtoReflect() protoreflect.Message {
	mi := &file_color_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListColor.ProtoReflect.Descriptor instead.
func (*ListColor) Descriptor() ([]byte, []int) {
	return file_color_game_proto_rawDescGZIP(), []int{2}
}

func (x *ListColor) GetColors() []int32 {
	if x != nil {
		return x.Colors
	}
	return nil
}

type RateColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Percent int32 `protobuf:"varint,2,opt,name=percent,proto3" json:"percent,omitempty"`
}

func (x *RateColor) Reset() {
	*x = RateColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateColor) ProtoMessage() {}

func (x *RateColor) ProtoReflect() protoreflect.Message {
	mi := &file_color_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateColor.ProtoReflect.Descriptor instead.
func (*RateColor) Descriptor() ([]byte, []int) {
	return file_color_game_proto_rawDescGZIP(), []int{3}
}

func (x *RateColor) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RateColor) GetPercent() int32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type HistoryRoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListColors []*ListColor `protobuf:"bytes,1,rep,name=list_colors,json=listColors,proto3" json:"list_colors,omitempty"`
	RateColors []*RateColor `protobuf:"bytes,2,rep,name=rate_colors,json=rateColors,proto3" json:"rate_colors,omitempty"`
}

func (x *HistoryRoll) Reset() {
	*x = HistoryRoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryRoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryRoll) ProtoMessage() {}

func (x *HistoryRoll) ProtoReflect() protoreflect.Message {
	mi := &file_color_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryRoll.ProtoReflect.Descriptor instead.
func (*HistoryRoll) Descriptor() ([]byte, []int) {
	return file_color_game_proto_rawDescGZIP(), []int{4}
}

func (x *HistoryRoll) GetListColors() []*ListColor {
	if x != nil {
		return x.ListColors
	}
	return nil
}

func (x *HistoryRoll) GetRateColors() []*RateColor {
	if x != nil {
		return x.RateColors
	}
	return nil
}

type InfoBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Chips       int64  `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	NUserBet    int32  `protobuf:"varint,3,opt,name=n_user_bet,json=nUserBet,proto3" json:"n_user_bet,omitempty"`
	Desp        string `protobuf:"bytes,4,opt,name=desp,proto3" json:"desp,omitempty"`
	ReqSpecGame int32  `protobuf:"varint,5,opt,name=req_spec_game,json=reqSpecGame,proto3" json:"req_spec_game,omitempty"`
	// broadcast new game data
	EmitNewgameEvent bool `protobuf:"varint,6,opt,name=emit_newgame_event,json=emitNewgameEvent,proto3" json:"emit_newgame_event,omitempty"`
	// delay broadcast result endgame, unit 1s,1m, 1h, golang durationformat
	DelayEmitResult string `protobuf:"bytes,7,opt,name=delay_emit_result,json=delayEmitResult,proto3" json:"delay_emit_result,omitempty"`
}

func (x *InfoBet) Reset() {
	*x = InfoBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoBet) ProtoMessage() {}

func (x *InfoBet) ProtoReflect() protoreflect.Message {
	mi := &file_color_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoBet.ProtoReflect.Descriptor instead.
func (*InfoBet) Descriptor() ([]byte, []int) {
	return file_color_game_proto_rawDescGZIP(), []int{5}
}

func (x *InfoBet) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InfoBet) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *InfoBet) GetNUserBet() int32 {
	if x != nil {
		return x.NUserBet
	}
	return 0
}

func (x *InfoBet) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

func (x *InfoBet) GetReqSpecGame() int32 {
	if x != nil {
		return x.ReqSpecGame
	}
	return 0
}

func (x *InfoBet) GetEmitNewgameEvent() bool {
	if x != nil {
		return x.EmitNewgameEvent
	}
	return false
}

func (x *InfoBet) GetDelayEmitResult() string {
	if x != nil {
		return x.DelayEmitResult
	}
	return ""
}

type ListInfoBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListBets []*InfoBet `protobuf:"bytes,1,rep,name=list_bets,json=listBets,proto3" json:"list_bets,omitempty"`
}

func (x *ListInfoBet) Reset() {
	*x = ListInfoBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInfoBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInfoBet) ProtoMessage() {}

func (x *ListInfoBet) ProtoReflect() protoreflect.Message {
	mi := &file_color_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInfoBet.ProtoReflect.Descriptor instead.
func (*ListInfoBet) Descriptor() ([]byte, []int) {
	return file_color_game_proto_rawDescGZIP(), []int{6}
}

func (x *ListInfoBet) GetListBets() []*InfoBet {
	if x != nil {
		return x.ListBets
	}
	return nil
}

type UpdateDesk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NPlayer           int32        `protobuf:"varint,1,opt,name=n_player,json=nPlayer,proto3" json:"n_player,omitempty"`
	UpdateUserBets    bool         `protobuf:"varint,2,opt,name=update_user_bets,json=updateUserBets,proto3" json:"update_user_bets,omitempty"`
	UpdateCellBets    bool         `protobuf:"varint,3,opt,name=update_cell_bets,json=updateCellBets,proto3" json:"update_cell_bets,omitempty"`
	UserBets          []*InfoBet   `protobuf:"bytes,4,rep,name=user_bets,json=userBets,proto3" json:"user_bets,omitempty"`
	CellBets          []*InfoBet   `protobuf:"bytes,5,rep,name=cell_bets,json=cellBets,proto3" json:"cell_bets,omitempty"`
	UpdateHistoryRoll bool         `protobuf:"varint,6,opt,name=update_history_roll,json=updateHistoryRoll,proto3" json:"update_history_roll,omitempty"`
	HistoryRolls      *HistoryRoll `protobuf:"bytes,7,opt,name=history_rolls,json=historyRolls,proto3" json:"history_rolls,omitempty"`
}

func (x *UpdateDesk) Reset() {
	*x = UpdateDesk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_game_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDesk) ProtoMessage() {}

func (x *UpdateDesk) ProtoReflect() protoreflect.Message {
	mi := &file_color_game_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDesk.ProtoReflect.Descriptor instead.
func (*UpdateDesk) Descriptor() ([]byte, []int) {
	return file_color_game_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateDesk) GetNPlayer() int32 {
	if x != nil {
		return x.NPlayer
	}
	return 0
}

func (x *UpdateDesk) GetUpdateUserBets() bool {
	if x != nil {
		return x.UpdateUserBets
	}
	return false
}

func (x *UpdateDesk) GetUpdateCellBets() bool {
	if x != nil {
		return x.UpdateCellBets
	}
	return false
}

func (x *UpdateDesk) GetUserBets() []*InfoBet {
	if x != nil {
		return x.UserBets
	}
	return nil
}

func (x *UpdateDesk) GetCellBets() []*InfoBet {
	if x != nil {
		return x.CellBets
	}
	return nil
}

func (x *UpdateDesk) GetUpdateHistoryRoll() bool {
	if x != nil {
		return x.UpdateHistoryRoll
	}
	return false
}

func (x *UpdateDesk) GetHistoryRolls() *HistoryRoll {
	if x != nil {
		return x.HistoryRolls
	}
	return nil
}

type RuleLucky struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GameCode   string  `protobuf:"bytes,2,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	CoRateMin  float32 `protobuf:"fixed32,3,opt,name=co_rate_min,json=coRateMin,proto3" json:"co_rate_min,omitempty"`
	CoRateMax  float32 `protobuf:"fixed32,4,opt,name=co_rate_max,json=coRateMax,proto3" json:"co_rate_max,omitempty"`
	CiMin      float32 `protobuf:"fixed32,5,opt,name=ci_min,json=ciMin,proto3" json:"ci_min,omitempty"`
	CiMax      float32 `protobuf:"fixed32,6,opt,name=ci_max,json=ciMax,proto3" json:"ci_max,omitempty"`
	CoIndayMin float32 `protobuf:"fixed32,7,opt,name=co_inday_min,json=coIndayMin,proto3" json:"co_inday_min,omitempty"`
	CoIndayMax float32 `protobuf:"fixed32,8,opt,name=co_inday_max,json=coIndayMax,proto3" json:"co_inday_max,omitempty"`
	Base_1     int64   `protobuf:"varint,9,opt,name=base_1,json=base1,proto3" json:"base_1,omitempty"`
	Base_2     int64   `protobuf:"varint,10,opt,name=base_2,json=base2,proto3" json:"base_2,omitempty"`
	Base_3     int64   `protobuf:"varint,11,opt,name=base_3,json=base3,proto3" json:"base_3,omitempty"`
	Base_4     int64   `protobuf:"varint,12,opt,name=base_4,json=base4,proto3" json:"base_4,omitempty"`
}

func (x *RuleLucky) Reset() {
	*x = RuleLucky{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_game_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleLucky) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleLucky) ProtoMessage() {}

func (x *RuleLucky) ProtoReflect() protoreflect.Message {
	mi := &file_color_game_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleLucky.ProtoReflect.Descriptor instead.
func (*RuleLucky) Descriptor() ([]byte, []int) {
	return file_color_game_proto_rawDescGZIP(), []int{8}
}

func (x *RuleLucky) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RuleLucky) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *RuleLucky) GetCoRateMin() float32 {
	if x != nil {
		return x.CoRateMin
	}
	return 0
}

func (x *RuleLucky) GetCoRateMax() float32 {
	if x != nil {
		return x.CoRateMax
	}
	return 0
}

func (x *RuleLucky) GetCiMin() float32 {
	if x != nil {
		return x.CiMin
	}
	return 0
}

func (x *RuleLucky) GetCiMax() float32 {
	if x != nil {
		return x.CiMax
	}
	return 0
}

func (x *RuleLucky) GetCoIndayMin() float32 {
	if x != nil {
		return x.CoIndayMin
	}
	return 0
}

func (x *RuleLucky) GetCoIndayMax() float32 {
	if x != nil {
		return x.CoIndayMax
	}
	return 0
}

func (x *RuleLucky) GetBase_1() int64 {
	if x != nil {
		return x.Base_1
	}
	return 0
}

func (x *RuleLucky) GetBase_2() int64 {
	if x != nil {
		return x.Base_2
	}
	return 0
}

func (x *RuleLucky) GetBase_3() int64 {
	if x != nil {
		return x.Base_3
	}
	return 0
}

func (x *RuleLucky) GetBase_4() int64 {
	if x != nil {
		return x.Base_4
	}
	return 0
}

type RulesLucky struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules  *RuleLucky `protobuf:"bytes,1,opt,name=rules,proto3" json:"rules,omitempty"`
	Limit  int64      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64      `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Total  int64      `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RulesLucky) Reset() {
	*x = RulesLucky{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_game_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RulesLucky) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RulesLucky) ProtoMessage() {}

func (x *RulesLucky) ProtoReflect() protoreflect.Message {
	mi := &file_color_game_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RulesLucky.ProtoReflect.Descriptor instead.
func (*RulesLucky) Descriptor() ([]byte, []int) {
	return file_color_game_proto_rawDescGZIP(), []int{9}
}

func (x *RulesLucky) GetRules() *RuleLucky {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RulesLucky) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RulesLucky) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RulesLucky) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_color_game_proto protoreflect.FileDescriptor

var file_color_game_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x5d, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x04, 0x62, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x65, 0x74, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x6f,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09,
	0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x62, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a,
	0x62, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0d, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x6f, 0x6c, 0x6c, 0x52, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x6c, 0x6c,
	0x73, 0x22, 0x23, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x22, 0x35, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x6f, 0x0a,
	0x0b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x2f, 0x0a, 0x0b,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a,
	0x0b, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x22, 0xdf,
	0x01, 0x0a, 0x07, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x53, 0x70,
	0x65, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x6e,
	0x65, 0x77, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x65, 0x6d, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x67, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6d,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x38, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x65, 0x74, 0x12,
	0x29, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x65, 0x74,
	0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x74, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x65, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x65, 0x74, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x35,
	0x0a, 0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x22, 0xc6, 0x02, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x75,
	0x63, 0x6b, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e,
	0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78,
	0x12, 0x15, 0x0a, 0x06, 0x63, 0x69, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x63, 0x69, 0x4d, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x69, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x69, 0x4d, 0x61, 0x78, 0x12, 0x20,
	0x0a, 0x0c, 0x63, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x49, 0x6e, 0x64, 0x61, 0x79, 0x4d, 0x69, 0x6e,
	0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x49, 0x6e, 0x64, 0x61, 0x79, 0x4d,
	0x61, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x31, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x32,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x33, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x34, 0x22, 0x76,
	0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x12, 0x24, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2a, 0x81, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x50, 0x49, 0x4e, 0x4b, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x20, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x69, 0x61, 0x6f, 0x6c, 0x69, 0x6e,
	0x6b, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x63, 0x67, 0x70, 0x2d, 0x62, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_color_game_proto_rawDescOnce sync.Once
	file_color_game_proto_rawDescData = file_color_game_proto_rawDesc
)

func file_color_game_proto_rawDescGZIP() []byte {
	file_color_game_proto_rawDescOnce.Do(func() {
		file_color_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_color_game_proto_rawDescData)
	})
	return file_color_game_proto_rawDescData
}

var file_color_game_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_color_game_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_color_game_proto_goTypes = []interface{}{
	(Color)(0),              // 0: api.Color
	(*BetResult)(nil),       // 1: api.BetResult
	(*ColorGameFinish)(nil), // 2: api.ColorGameFinish
	(*ListColor)(nil),       // 3: api.ListColor
	(*RateColor)(nil),       // 4: api.RateColor
	(*HistoryRoll)(nil),     // 5: api.HistoryRoll
	(*InfoBet)(nil),         // 6: api.InfoBet
	(*ListInfoBet)(nil),     // 7: api.ListInfoBet
	(*UpdateDesk)(nil),      // 8: api.UpdateDesk
	(*RuleLucky)(nil),       // 9: api.RuleLucky
	(*RulesLucky)(nil),      // 10: api.RulesLucky
}
var file_color_game_proto_depIdxs = []int32{
	6,  // 0: api.BetResult.bets:type_name -> api.InfoBet
	3,  // 1: api.ColorGameFinish.roll_color:type_name -> api.ListColor
	1,  // 2: api.ColorGameFinish.bet_results:type_name -> api.BetResult
	5,  // 3: api.ColorGameFinish.history_rolls:type_name -> api.HistoryRoll
	3,  // 4: api.HistoryRoll.list_colors:type_name -> api.ListColor
	4,  // 5: api.HistoryRoll.rate_colors:type_name -> api.RateColor
	6,  // 6: api.ListInfoBet.list_bets:type_name -> api.InfoBet
	6,  // 7: api.UpdateDesk.user_bets:type_name -> api.InfoBet
	6,  // 8: api.UpdateDesk.cell_bets:type_name -> api.InfoBet
	5,  // 9: api.UpdateDesk.history_rolls:type_name -> api.HistoryRoll
	9,  // 10: api.RulesLucky.rules:type_name -> api.RuleLucky
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_color_game_proto_init() }
func file_color_game_proto_init() {
	if File_color_game_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_color_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorGameFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_game_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_game_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryRoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_game_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_game_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInfoBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_game_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDesk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_game_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleLucky); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_game_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RulesLucky); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_color_game_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_color_game_proto_goTypes,
		DependencyIndexes: file_color_game_proto_depIdxs,
		EnumInfos:         file_color_game_proto_enumTypes,
		MessageInfos:      file_color_game_proto_msgTypes,
	}.Build()
	File_color_game_proto = out.File
	file_color_game_proto_rawDesc = nil
	file_color_game_proto_goTypes = nil
	file_color_game_proto_depIdxs = nil
}
