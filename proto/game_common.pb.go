// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: game_common.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardStatus int32

const (
	CardStatus_STATUS_HOLD   CardStatus = 0
	CardStatus_STATUS_UNHOLD CardStatus = 1
)

// Enum value maps for CardStatus.
var (
	CardStatus_name = map[int32]string{
		0: "STATUS_HOLD",
		1: "STATUS_UNHOLD",
	}
	CardStatus_value = map[string]int32{
		"STATUS_HOLD":   0,
		"STATUS_UNHOLD": 1,
	}
)

func (x CardStatus) Enum() *CardStatus {
	p := new(CardStatus)
	*p = x
	return p
}

func (x CardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_game_common_proto_enumTypes[0].Descriptor()
}

func (CardStatus) Type() protoreflect.EnumType {
	return &file_game_common_proto_enumTypes[0]
}

func (x CardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardStatus.Descriptor instead.
func (CardStatus) EnumDescriptor() ([]byte, []int) {
	return file_game_common_proto_rawDescGZIP(), []int{0}
}

type GameState int32

const (
	GameState_GAME_STATE_UNKNOWN   GameState = 0
	GameState_GAME_STATE_IDLE      GameState = 1
	GameState_GAME_STATE_MATCHING  GameState = 2
	GameState_GAME_STATE_PREPARING GameState = 3
	GameState_GAME_STATE_PLAY      GameState = 4
	GameState_GAME_STATE_REWARD    GameState = 5
	GameState_GAME_STATE_FINISH    GameState = 6
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0: "GAME_STATE_UNKNOWN",
		1: "GAME_STATE_IDLE",
		2: "GAME_STATE_MATCHING",
		3: "GAME_STATE_PREPARING",
		4: "GAME_STATE_PLAY",
		5: "GAME_STATE_REWARD",
		6: "GAME_STATE_FINISH",
	}
	GameState_value = map[string]int32{
		"GAME_STATE_UNKNOWN":   0,
		"GAME_STATE_IDLE":      1,
		"GAME_STATE_MATCHING":  2,
		"GAME_STATE_PREPARING": 3,
		"GAME_STATE_PLAY":      4,
		"GAME_STATE_REWARD":    5,
		"GAME_STATE_FINISH":    6,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_game_common_proto_enumTypes[1].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_game_common_proto_enumTypes[1]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_game_common_proto_rawDescGZIP(), []int{1}
}

type OpCodeRequest int32

const (
	OpCodeRequest_OPCODE_UNSPECIFIED OpCodeRequest = 0
	// New game round starting.
	OpCodeRequest_OPCODE_REQUEST_NEW_GAME        OpCodeRequest = 1
	OpCodeRequest_OPCODE_REQUEST_LEAVE_GAME      OpCodeRequest = 2
	OpCodeRequest_OPCODE_REQUEST_PLAY_CARD       OpCodeRequest = 3 // client chơi 1 lá
	OpCodeRequest_OPCODE_REQUEST_DRAW_CARD       OpCodeRequest = 4 // client yêu cầu rút bài
	OpCodeRequest_OPCODE_REQUEST_CALL_WHOT       OpCodeRequest = 5 // nếu client đánh WHOT, call lựa chọn suit
	OpCodeRequest_OPCODE_USER_INTERACT_CARDS     OpCodeRequest = 6 // client tương tác với cards
	OpCodeRequest_OPCODE_REQUEST_SPIN            OpCodeRequest = 7 // game slots
	OpCodeRequest_OPCODE_REQUEST_BET             OpCodeRequest = 8
	OpCodeRequest_OPCODE_REQUEST_USER_IN_TABLE   OpCodeRequest = 9  // get table info
	OpCodeRequest_OPCODE_REQUEST_INFO_TABLE      OpCodeRequest = 10 //
	OpCodeRequest_OPCODE_REQUEST_HISTORY_RESULT  OpCodeRequest = 11 //
	OpCodeRequest_OPCODE_REQUEST_BUY_SIXIANG_GEM OpCodeRequest = 12
	OpCodeRequest_OPCODE_REQUEST_TIP_INGAME      OpCodeRequest = 13
	OpCodeRequest_OPCODE_REQUEST_SYNC_TABLE      OpCodeRequest = 14
	OpCodeRequest_OPCODE_REQUEST_COMBINE_CARDS   OpCodeRequest = 15
	OpCodeRequest_OPCODE_REQUEST_SHOW_CARDS      OpCodeRequest = 16
	OpCodeRequest_OPCODE_REQUEST_DECLARE_CARDS   OpCodeRequest = 17
	// HK Poker OpCodes
	OpCodeRequest_OPCODE_REQUEST_PLAYER_ACTION OpCodeRequest = 18 // HK Poker betting action
	OpCodeRequest_OPCODE_REQUEST_CARD_SWAP     OpCodeRequest = 19 // HK Poker card swap (Round 4)
)

// Enum value maps for OpCodeRequest.
var (
	OpCodeRequest_name = map[int32]string{
		0:  "OPCODE_UNSPECIFIED",
		1:  "OPCODE_REQUEST_NEW_GAME",
		2:  "OPCODE_REQUEST_LEAVE_GAME",
		3:  "OPCODE_REQUEST_PLAY_CARD",
		4:  "OPCODE_REQUEST_DRAW_CARD",
		5:  "OPCODE_REQUEST_CALL_WHOT",
		6:  "OPCODE_USER_INTERACT_CARDS",
		7:  "OPCODE_REQUEST_SPIN",
		8:  "OPCODE_REQUEST_BET",
		9:  "OPCODE_REQUEST_USER_IN_TABLE",
		10: "OPCODE_REQUEST_INFO_TABLE",
		11: "OPCODE_REQUEST_HISTORY_RESULT",
		12: "OPCODE_REQUEST_BUY_SIXIANG_GEM",
		13: "OPCODE_REQUEST_TIP_INGAME",
		14: "OPCODE_REQUEST_SYNC_TABLE",
		15: "OPCODE_REQUEST_COMBINE_CARDS",
		16: "OPCODE_REQUEST_SHOW_CARDS",
		17: "OPCODE_REQUEST_DECLARE_CARDS",
		18: "OPCODE_REQUEST_PLAYER_ACTION",
		19: "OPCODE_REQUEST_CARD_SWAP",
	}
	OpCodeRequest_value = map[string]int32{
		"OPCODE_UNSPECIFIED":             0,
		"OPCODE_REQUEST_NEW_GAME":        1,
		"OPCODE_REQUEST_LEAVE_GAME":      2,
		"OPCODE_REQUEST_PLAY_CARD":       3,
		"OPCODE_REQUEST_DRAW_CARD":       4,
		"OPCODE_REQUEST_CALL_WHOT":       5,
		"OPCODE_USER_INTERACT_CARDS":     6,
		"OPCODE_REQUEST_SPIN":            7,
		"OPCODE_REQUEST_BET":             8,
		"OPCODE_REQUEST_USER_IN_TABLE":   9,
		"OPCODE_REQUEST_INFO_TABLE":      10,
		"OPCODE_REQUEST_HISTORY_RESULT":  11,
		"OPCODE_REQUEST_BUY_SIXIANG_GEM": 12,
		"OPCODE_REQUEST_TIP_INGAME":      13,
		"OPCODE_REQUEST_SYNC_TABLE":      14,
		"OPCODE_REQUEST_COMBINE_CARDS":   15,
		"OPCODE_REQUEST_SHOW_CARDS":      16,
		"OPCODE_REQUEST_DECLARE_CARDS":   17,
		"OPCODE_REQUEST_PLAYER_ACTION":   18,
		"OPCODE_REQUEST_CARD_SWAP":       19,
	}
)

func (x OpCodeRequest) Enum() *OpCodeRequest {
	p := new(OpCodeRequest)
	*p = x
	return p
}

func (x OpCodeRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpCodeRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_game_common_proto_enumTypes[2].Descriptor()
}

func (OpCodeRequest) Type() protoreflect.EnumType {
	return &file_game_common_proto_enumTypes[2]
}

func (x OpCodeRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpCodeRequest.Descriptor instead.
func (OpCodeRequest) EnumDescriptor() ([]byte, []int) {
	return file_game_common_proto_rawDescGZIP(), []int{2}
}

type OpCodeUpdate int32

const (
	OpCodeUpdate_OPCODE_UPDATE_UNSPECIFIED      OpCodeUpdate = 0
	OpCodeUpdate_OPCODE_UPDATE_TABLE            OpCodeUpdate = 1 // message UpdateTable
	OpCodeUpdate_OPCODE_UPDATE_DEAL             OpCodeUpdate = 2 // message UpdateDeal
	OpCodeUpdate_OPCODE_UPDATE_FINISH           OpCodeUpdate = 3 // message UpdateFinish
	OpCodeUpdate_OPCODE_UPDATE_REJECTED         OpCodeUpdate = 4
	OpCodeUpdate_OPCODE_UPDATE_GAME_STATE       OpCodeUpdate = 5
	OpCodeUpdate_OPCODE_UPDATE_CARD_PLAYED      OpCodeUpdate = 6 // ai đó đã đánh bài
	OpCodeUpdate_OPCODE_UPDATE_DRAW_RESULT      OpCodeUpdate = 7 // kết quả rút bài (ai đó rút)
	OpCodeUpdate_OPCODE_UPDATE_CALL_WHOT_RESULT OpCodeUpdate = 8 // kết quả chọn suit sau khi đánh WHOT
	OpCodeUpdate_OPCODE_UPDATE_TURN             OpCodeUpdate = 9 // thông báo tới lượt ai
	OpCodeUpdate_OPCODE_UPDATE_CARD_STATE       OpCodeUpdate = 10
	OpCodeUpdate_OPCODE_UPDATE_WALLET           OpCodeUpdate = 11
	OpCodeUpdate_OPCODE_KICK_OFF_THE_TABLE      OpCodeUpdate = 12
	OpCodeUpdate_OPCODE_UPDATE_USER_INFO        OpCodeUpdate = 13
	OpCodeUpdate_OPCODE_USER_IN_TABLE_INFO      OpCodeUpdate = 14
	OpCodeUpdate_OPCODE_ERROR                   OpCodeUpdate = 15
	OpCodeUpdate_OPCODE_BUY_SIXIANG_GEM         OpCodeUpdate = 16
	OpCodeUpdate_OPCODE_PLAYER_CHANGE           OpCodeUpdate = 17
	OpCodeUpdate_OPCODE_RESPONSE_TIP_INGAME     OpCodeUpdate = 18
	OpCodeUpdate_OPCODE_RESPONSE_SYNC_TABLE     OpCodeUpdate = 19
	// HK Poker OpCodes
	OpCodeUpdate_OPCODE_UPDATE_PLAYER_ACTION OpCodeUpdate = 20 // Player betting action update
	OpCodeUpdate_OPCODE_UPDATE_NEW_ROUND     OpCodeUpdate = 21 // New betting round
	OpCodeUpdate_OPCODE_UPDATE_CARD_SWAP     OpCodeUpdate = 22 // Card swap result
	OpCodeUpdate_OPCODE_UPDATE_SHOWDOWN      OpCodeUpdate = 23 // Showdown results
	OpCodeUpdate_OPCODE_UPDATE_BETTING_STATE OpCodeUpdate = 24 // Betting state update (optional)
)

// Enum value maps for OpCodeUpdate.
var (
	OpCodeUpdate_name = map[int32]string{
		0:  "OPCODE_UPDATE_UNSPECIFIED",
		1:  "OPCODE_UPDATE_TABLE",
		2:  "OPCODE_UPDATE_DEAL",
		3:  "OPCODE_UPDATE_FINISH",
		4:  "OPCODE_UPDATE_REJECTED",
		5:  "OPCODE_UPDATE_GAME_STATE",
		6:  "OPCODE_UPDATE_CARD_PLAYED",
		7:  "OPCODE_UPDATE_DRAW_RESULT",
		8:  "OPCODE_UPDATE_CALL_WHOT_RESULT",
		9:  "OPCODE_UPDATE_TURN",
		10: "OPCODE_UPDATE_CARD_STATE",
		11: "OPCODE_UPDATE_WALLET",
		12: "OPCODE_KICK_OFF_THE_TABLE",
		13: "OPCODE_UPDATE_USER_INFO",
		14: "OPCODE_USER_IN_TABLE_INFO",
		15: "OPCODE_ERROR",
		16: "OPCODE_BUY_SIXIANG_GEM",
		17: "OPCODE_PLAYER_CHANGE",
		18: "OPCODE_RESPONSE_TIP_INGAME",
		19: "OPCODE_RESPONSE_SYNC_TABLE",
		20: "OPCODE_UPDATE_PLAYER_ACTION",
		21: "OPCODE_UPDATE_NEW_ROUND",
		22: "OPCODE_UPDATE_CARD_SWAP",
		23: "OPCODE_UPDATE_SHOWDOWN",
		24: "OPCODE_UPDATE_BETTING_STATE",
	}
	OpCodeUpdate_value = map[string]int32{
		"OPCODE_UPDATE_UNSPECIFIED":      0,
		"OPCODE_UPDATE_TABLE":            1,
		"OPCODE_UPDATE_DEAL":             2,
		"OPCODE_UPDATE_FINISH":           3,
		"OPCODE_UPDATE_REJECTED":         4,
		"OPCODE_UPDATE_GAME_STATE":       5,
		"OPCODE_UPDATE_CARD_PLAYED":      6,
		"OPCODE_UPDATE_DRAW_RESULT":      7,
		"OPCODE_UPDATE_CALL_WHOT_RESULT": 8,
		"OPCODE_UPDATE_TURN":             9,
		"OPCODE_UPDATE_CARD_STATE":       10,
		"OPCODE_UPDATE_WALLET":           11,
		"OPCODE_KICK_OFF_THE_TABLE":      12,
		"OPCODE_UPDATE_USER_INFO":        13,
		"OPCODE_USER_IN_TABLE_INFO":      14,
		"OPCODE_ERROR":                   15,
		"OPCODE_BUY_SIXIANG_GEM":         16,
		"OPCODE_PLAYER_CHANGE":           17,
		"OPCODE_RESPONSE_TIP_INGAME":     18,
		"OPCODE_RESPONSE_SYNC_TABLE":     19,
		"OPCODE_UPDATE_PLAYER_ACTION":    20,
		"OPCODE_UPDATE_NEW_ROUND":        21,
		"OPCODE_UPDATE_CARD_SWAP":        22,
		"OPCODE_UPDATE_SHOWDOWN":         23,
		"OPCODE_UPDATE_BETTING_STATE":    24,
	}
)

func (x OpCodeUpdate) Enum() *OpCodeUpdate {
	p := new(OpCodeUpdate)
	*p = x
	return p
}

func (x OpCodeUpdate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpCodeUpdate) Descriptor() protoreflect.EnumDescriptor {
	return file_game_common_proto_enumTypes[3].Descriptor()
}

func (OpCodeUpdate) Type() protoreflect.EnumType {
	return &file_game_common_proto_enumTypes[3]
}

func (x OpCodeUpdate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpCodeUpdate.Descriptor instead.
func (OpCodeUpdate) EnumDescriptor() ([]byte, []int) {
	return file_game_common_proto_rawDescGZIP(), []int{3}
}

type Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserName      string                 `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Wallet        string                 `protobuf:"bytes,3,opt,name=wallet,proto3" json:"wallet,omitempty"`
	IsPlaying     bool                   `protobuf:"varint,4,opt,name=is_playing,json=isPlaying,proto3" json:"is_playing,omitempty"`
	VipLevel      int64                  `protobuf:"varint,6,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
	AvatarId      string                 `protobuf:"bytes,7,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Sid           int64                  `protobuf:"varint,8,opt,name=sid,proto3" json:"sid,omitempty"`
	Order         int32                  `protobuf:"varint,9,opt,name=order,proto3" json:"order,omitempty"`
	CardStatus    CardStatus             `protobuf:"varint,10,opt,name=card_status,json=cardStatus,proto3,enum=proto.CardStatus" json:"card_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Player) Reset() {
	*x = Player{}
	mi := &file_game_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_game_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_game_common_proto_rawDescGZIP(), []int{0}
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Player) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *Player) GetIsPlaying() bool {
	if x != nil {
		return x.IsPlaying
	}
	return false
}

func (x *Player) GetVipLevel() int64 {
	if x != nil {
		return x.VipLevel
	}
	return 0
}

func (x *Player) GetAvatarId() string {
	if x != nil {
		return x.AvatarId
	}
	return ""
}

func (x *Player) GetSid() int64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *Player) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Player) GetCardStatus() CardStatus {
	if x != nil {
		return x.CardStatus
	}
	return CardStatus_STATUS_HOLD
}

type Jackpot struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GameCode       string                 `protobuf:"bytes,3,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	Chips          int64                  `protobuf:"varint,4,opt,name=chips,proto3" json:"chips,omitempty"`
	CreateTimeUnix int64                  `protobuf:"varint,5,opt,name=create_time_unix,json=createTimeUnix,proto3" json:"create_time_unix,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Jackpot) Reset() {
	*x = Jackpot{}
	mi := &file_game_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Jackpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jackpot) ProtoMessage() {}

func (x *Jackpot) ProtoReflect() protoreflect.Message {
	mi := &file_game_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jackpot.ProtoReflect.Descriptor instead.
func (*Jackpot) Descriptor() ([]byte, []int) {
	return file_game_common_proto_rawDescGZIP(), []int{1}
}

func (x *Jackpot) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Jackpot) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Jackpot) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *Jackpot) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *Jackpot) GetCreateTimeUnix() int64 {
	if x != nil {
		return x.CreateTimeUnix
	}
	return 0
}

type BalanceUpdate struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UserId             string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AmountChipBefore   int64                  `protobuf:"varint,2,opt,name=amount_chip_before,json=amountChipBefore,proto3" json:"amount_chip_before,omitempty"`
	AmountChipCurrent  int64                  `protobuf:"varint,3,opt,name=amount_chip_current,json=amountChipCurrent,proto3" json:"amount_chip_current,omitempty"`
	AmountChipAdd      int64                  `protobuf:"varint,4,opt,name=amount_chip_add,json=amountChipAdd,proto3" json:"amount_chip_add,omitempty"`
	AmoutChipBet       int64                  `protobuf:"varint,5,opt,name=amout_chip_bet,json=amoutChipBet,proto3" json:"amout_chip_bet,omitempty"`
	AmoutChipFee       int64                  `protobuf:"varint,6,opt,name=amout_chip_fee,json=amoutChipFee,proto3" json:"amout_chip_fee,omitempty"`
	AmoutChipAddPrefee int64                  `protobuf:"varint,7,opt,name=amout_chip_add_prefee,json=amoutChipAddPrefee,proto3" json:"amout_chip_add_prefee,omitempty"`
	TotalChipInMatch   int64                  `protobuf:"varint,8,opt,name=total_chip_in_match,json=totalChipInMatch,proto3" json:"total_chip_in_match,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BalanceUpdate) Reset() {
	*x = BalanceUpdate{}
	mi := &file_game_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceUpdate) ProtoMessage() {}

func (x *BalanceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_game_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceUpdate.ProtoReflect.Descriptor instead.
func (*BalanceUpdate) Descriptor() ([]byte, []int) {
	return file_game_common_proto_rawDescGZIP(), []int{2}
}

func (x *BalanceUpdate) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BalanceUpdate) GetAmountChipBefore() int64 {
	if x != nil {
		return x.AmountChipBefore
	}
	return 0
}

func (x *BalanceUpdate) GetAmountChipCurrent() int64 {
	if x != nil {
		return x.AmountChipCurrent
	}
	return 0
}

func (x *BalanceUpdate) GetAmountChipAdd() int64 {
	if x != nil {
		return x.AmountChipAdd
	}
	return 0
}

func (x *BalanceUpdate) GetAmoutChipBet() int64 {
	if x != nil {
		return x.AmoutChipBet
	}
	return 0
}

func (x *BalanceUpdate) GetAmoutChipFee() int64 {
	if x != nil {
		return x.AmoutChipFee
	}
	return 0
}

func (x *BalanceUpdate) GetAmoutChipAddPrefee() int64 {
	if x != nil {
		return x.AmoutChipAddPrefee
	}
	return 0
}

func (x *BalanceUpdate) GetTotalChipInMatch() int64 {
	if x != nil {
		return x.TotalChipInMatch
	}
	return 0
}

type BalanceResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Updates       []*BalanceUpdate       `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	Jackpot       *Jackpot               `protobuf:"bytes,2,opt,name=jackpot,proto3" json:"jackpot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BalanceResult) Reset() {
	*x = BalanceResult{}
	mi := &file_game_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceResult) ProtoMessage() {}

func (x *BalanceResult) ProtoReflect() protoreflect.Message {
	mi := &file_game_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceResult.ProtoReflect.Descriptor instead.
func (*BalanceResult) Descriptor() ([]byte, []int) {
	return file_game_common_proto_rawDescGZIP(), []int{3}
}

func (x *BalanceResult) GetUpdates() []*BalanceUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *BalanceResult) GetJackpot() *Jackpot {
	if x != nil {
		return x.Jackpot
	}
	return nil
}

type HitJackpotHistory struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserName       string                 `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Chips          int64                  `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	CreateTimeUnix int64                  `protobuf:"varint,3,opt,name=create_time_unix,json=createTimeUnix,proto3" json:"create_time_unix,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HitJackpotHistory) Reset() {
	*x = HitJackpotHistory{}
	mi := &file_game_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HitJackpotHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HitJackpotHistory) ProtoMessage() {}

func (x *HitJackpotHistory) ProtoReflect() protoreflect.Message {
	mi := &file_game_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HitJackpotHistory.ProtoReflect.Descriptor instead.
func (*HitJackpotHistory) Descriptor() ([]byte, []int) {
	return file_game_common_proto_rawDescGZIP(), []int{4}
}

func (x *HitJackpotHistory) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *HitJackpotHistory) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *HitJackpotHistory) GetCreateTimeUnix() int64 {
	if x != nil {
		return x.CreateTimeUnix
	}
	return 0
}

type UpdateTable struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Players        []*Player              `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	PlayingPlayers []*Player              `protobuf:"bytes,2,rep,name=playing_players,json=playingPlayers,proto3" json:"playing_players,omitempty"`
	JoinPlayers    []*Player              `protobuf:"bytes,3,rep,name=join_players,json=joinPlayers,proto3" json:"join_players,omitempty"`
	LeavePlayers   []*Player              `protobuf:"bytes,4,rep,name=leave_players,json=leavePlayers,proto3" json:"leave_players,omitempty"`
	Bet            int64                  `protobuf:"varint,5,opt,name=bet,proto3" json:"bet,omitempty"`                                 // chip bet info
	Vip            int64                  `protobuf:"varint,6,opt,name=vip,proto3" json:"vip,omitempty"`                                 // min level vip require join room
	TimePlay       int64                  `protobuf:"varint,7,opt,name=time_play,json=timePlay,proto3" json:"time_play,omitempty"`       // timestamp play game
	RemainTime     int64                  `protobuf:"varint,8,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"` // remain time to end game
	GameState      GameState              `protobuf:"varint,9,opt,name=game_state,json=gameState,proto3,enum=proto.GameState" json:"game_state,omitempty"`
	JpTreasure     *Jackpot               `protobuf:"bytes,10,opt,name=jp_treasure,json=jpTreasure,proto3" json:"jp_treasure,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateTable) Reset() {
	*x = UpdateTable{}
	mi := &file_game_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTable) ProtoMessage() {}

func (x *UpdateTable) ProtoReflect() protoreflect.Message {
	mi := &file_game_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTable.ProtoReflect.Descriptor instead.
func (*UpdateTable) Descriptor() ([]byte, []int) {
	return file_game_common_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateTable) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *UpdateTable) GetPlayingPlayers() []*Player {
	if x != nil {
		return x.PlayingPlayers
	}
	return nil
}

func (x *UpdateTable) GetJoinPlayers() []*Player {
	if x != nil {
		return x.JoinPlayers
	}
	return nil
}

func (x *UpdateTable) GetLeavePlayers() []*Player {
	if x != nil {
		return x.LeavePlayers
	}
	return nil
}

func (x *UpdateTable) GetBet() int64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *UpdateTable) GetVip() int64 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *UpdateTable) GetTimePlay() int64 {
	if x != nil {
		return x.TimePlay
	}
	return 0
}

func (x *UpdateTable) GetRemainTime() int64 {
	if x != nil {
		return x.RemainTime
	}
	return 0
}

func (x *UpdateTable) GetGameState() GameState {
	if x != nil {
		return x.GameState
	}
	return GameState_GAME_STATE_UNKNOWN
}

func (x *UpdateTable) GetJpTreasure() *Jackpot {
	if x != nil {
		return x.JpTreasure
	}
	return nil
}

var File_game_common_proto protoreflect.FileDescriptor

const file_game_common_proto_rawDesc = "" +
	"\n" +
	"\x11game_common.proto\x12\x05proto\"\x82\x02\n" +
	"\x06Player\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tuser_name\x18\x02 \x01(\tR\buserName\x12\x16\n" +
	"\x06wallet\x18\x03 \x01(\tR\x06wallet\x12\x1d\n" +
	"\n" +
	"is_playing\x18\x04 \x01(\bR\tisPlaying\x12\x1b\n" +
	"\tvip_level\x18\x06 \x01(\x03R\bvipLevel\x12\x1b\n" +
	"\tavatar_id\x18\a \x01(\tR\bavatarId\x12\x10\n" +
	"\x03sid\x18\b \x01(\x03R\x03sid\x12\x14\n" +
	"\x05order\x18\t \x01(\x05R\x05order\x122\n" +
	"\vcard_status\x18\n" +
	" \x01(\x0e2\x11.proto.CardStatusR\n" +
	"cardStatus\"\x8f\x01\n" +
	"\aJackpot\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x1b\n" +
	"\tgame_code\x18\x03 \x01(\tR\bgameCode\x12\x14\n" +
	"\x05chips\x18\x04 \x01(\x03R\x05chips\x12(\n" +
	"\x10create_time_unix\x18\x05 \x01(\x03R\x0ecreateTimeUnix\"\xdc\x02\n" +
	"\rBalanceUpdate\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12,\n" +
	"\x12amount_chip_before\x18\x02 \x01(\x03R\x10amountChipBefore\x12.\n" +
	"\x13amount_chip_current\x18\x03 \x01(\x03R\x11amountChipCurrent\x12&\n" +
	"\x0famount_chip_add\x18\x04 \x01(\x03R\ramountChipAdd\x12$\n" +
	"\x0eamout_chip_bet\x18\x05 \x01(\x03R\famoutChipBet\x12$\n" +
	"\x0eamout_chip_fee\x18\x06 \x01(\x03R\famoutChipFee\x121\n" +
	"\x15amout_chip_add_prefee\x18\a \x01(\x03R\x12amoutChipAddPrefee\x12-\n" +
	"\x13total_chip_in_match\x18\b \x01(\x03R\x10totalChipInMatch\"i\n" +
	"\rBalanceResult\x12.\n" +
	"\aupdates\x18\x01 \x03(\v2\x14.proto.BalanceUpdateR\aupdates\x12(\n" +
	"\ajackpot\x18\x02 \x01(\v2\x0e.proto.JackpotR\ajackpot\"p\n" +
	"\x11HitJackpotHistory\x12\x1b\n" +
	"\tuser_name\x18\x01 \x01(\tR\buserName\x12\x14\n" +
	"\x05chips\x18\x02 \x01(\x03R\x05chips\x12(\n" +
	"\x10create_time_unix\x18\x03 \x01(\x03R\x0ecreateTimeUnix\"\x98\x03\n" +
	"\vUpdateTable\x12'\n" +
	"\aplayers\x18\x01 \x03(\v2\r.proto.PlayerR\aplayers\x126\n" +
	"\x0fplaying_players\x18\x02 \x03(\v2\r.proto.PlayerR\x0eplayingPlayers\x120\n" +
	"\fjoin_players\x18\x03 \x03(\v2\r.proto.PlayerR\vjoinPlayers\x122\n" +
	"\rleave_players\x18\x04 \x03(\v2\r.proto.PlayerR\fleavePlayers\x12\x10\n" +
	"\x03bet\x18\x05 \x01(\x03R\x03bet\x12\x10\n" +
	"\x03vip\x18\x06 \x01(\x03R\x03vip\x12\x1b\n" +
	"\ttime_play\x18\a \x01(\x03R\btimePlay\x12\x1f\n" +
	"\vremain_time\x18\b \x01(\x03R\n" +
	"remainTime\x12/\n" +
	"\n" +
	"game_state\x18\t \x01(\x0e2\x10.proto.GameStateR\tgameState\x12/\n" +
	"\vjp_treasure\x18\n" +
	" \x01(\v2\x0e.proto.JackpotR\n" +
	"jpTreasure*0\n" +
	"\n" +
	"CardStatus\x12\x0f\n" +
	"\vSTATUS_HOLD\x10\x00\x12\x11\n" +
	"\rSTATUS_UNHOLD\x10\x01*\xae\x01\n" +
	"\tGameState\x12\x16\n" +
	"\x12GAME_STATE_UNKNOWN\x10\x00\x12\x13\n" +
	"\x0fGAME_STATE_IDLE\x10\x01\x12\x17\n" +
	"\x13GAME_STATE_MATCHING\x10\x02\x12\x18\n" +
	"\x14GAME_STATE_PREPARING\x10\x03\x12\x13\n" +
	"\x0fGAME_STATE_PLAY\x10\x04\x12\x15\n" +
	"\x11GAME_STATE_REWARD\x10\x05\x12\x15\n" +
	"\x11GAME_STATE_FINISH\x10\x06*\xf7\x04\n" +
	"\rOpCodeRequest\x12\x16\n" +
	"\x12OPCODE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17OPCODE_REQUEST_NEW_GAME\x10\x01\x12\x1d\n" +
	"\x19OPCODE_REQUEST_LEAVE_GAME\x10\x02\x12\x1c\n" +
	"\x18OPCODE_REQUEST_PLAY_CARD\x10\x03\x12\x1c\n" +
	"\x18OPCODE_REQUEST_DRAW_CARD\x10\x04\x12\x1c\n" +
	"\x18OPCODE_REQUEST_CALL_WHOT\x10\x05\x12\x1e\n" +
	"\x1aOPCODE_USER_INTERACT_CARDS\x10\x06\x12\x17\n" +
	"\x13OPCODE_REQUEST_SPIN\x10\a\x12\x16\n" +
	"\x12OPCODE_REQUEST_BET\x10\b\x12 \n" +
	"\x1cOPCODE_REQUEST_USER_IN_TABLE\x10\t\x12\x1d\n" +
	"\x19OPCODE_REQUEST_INFO_TABLE\x10\n" +
	"\x12!\n" +
	"\x1dOPCODE_REQUEST_HISTORY_RESULT\x10\v\x12\"\n" +
	"\x1eOPCODE_REQUEST_BUY_SIXIANG_GEM\x10\f\x12\x1d\n" +
	"\x19OPCODE_REQUEST_TIP_INGAME\x10\r\x12\x1d\n" +
	"\x19OPCODE_REQUEST_SYNC_TABLE\x10\x0e\x12 \n" +
	"\x1cOPCODE_REQUEST_COMBINE_CARDS\x10\x0f\x12\x1d\n" +
	"\x19OPCODE_REQUEST_SHOW_CARDS\x10\x10\x12 \n" +
	"\x1cOPCODE_REQUEST_DECLARE_CARDS\x10\x11\x12 \n" +
	"\x1cOPCODE_REQUEST_PLAYER_ACTION\x10\x12\x12\x1c\n" +
	"\x18OPCODE_REQUEST_CARD_SWAP\x10\x13*\xdf\x05\n" +
	"\fOpCodeUpdate\x12\x1d\n" +
	"\x19OPCODE_UPDATE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13OPCODE_UPDATE_TABLE\x10\x01\x12\x16\n" +
	"\x12OPCODE_UPDATE_DEAL\x10\x02\x12\x18\n" +
	"\x14OPCODE_UPDATE_FINISH\x10\x03\x12\x1a\n" +
	"\x16OPCODE_UPDATE_REJECTED\x10\x04\x12\x1c\n" +
	"\x18OPCODE_UPDATE_GAME_STATE\x10\x05\x12\x1d\n" +
	"\x19OPCODE_UPDATE_CARD_PLAYED\x10\x06\x12\x1d\n" +
	"\x19OPCODE_UPDATE_DRAW_RESULT\x10\a\x12\"\n" +
	"\x1eOPCODE_UPDATE_CALL_WHOT_RESULT\x10\b\x12\x16\n" +
	"\x12OPCODE_UPDATE_TURN\x10\t\x12\x1c\n" +
	"\x18OPCODE_UPDATE_CARD_STATE\x10\n" +
	"\x12\x18\n" +
	"\x14OPCODE_UPDATE_WALLET\x10\v\x12\x1d\n" +
	"\x19OPCODE_KICK_OFF_THE_TABLE\x10\f\x12\x1b\n" +
	"\x17OPCODE_UPDATE_USER_INFO\x10\r\x12\x1d\n" +
	"\x19OPCODE_USER_IN_TABLE_INFO\x10\x0e\x12\x10\n" +
	"\fOPCODE_ERROR\x10\x0f\x12\x1a\n" +
	"\x16OPCODE_BUY_SIXIANG_GEM\x10\x10\x12\x18\n" +
	"\x14OPCODE_PLAYER_CHANGE\x10\x11\x12\x1e\n" +
	"\x1aOPCODE_RESPONSE_TIP_INGAME\x10\x12\x12\x1e\n" +
	"\x1aOPCODE_RESPONSE_SYNC_TABLE\x10\x13\x12\x1f\n" +
	"\x1bOPCODE_UPDATE_PLAYER_ACTION\x10\x14\x12\x1b\n" +
	"\x17OPCODE_UPDATE_NEW_ROUND\x10\x15\x12\x1b\n" +
	"\x17OPCODE_UPDATE_CARD_SWAP\x10\x16\x12\x1a\n" +
	"\x16OPCODE_UPDATE_SHOWDOWN\x10\x17\x12\x1f\n" +
	"\x1bOPCODE_UPDATE_BETTING_STATE\x10\x18B(Z&github.com/nk-nigeria/cgp-common/protob\x06proto3"

var (
	file_game_common_proto_rawDescOnce sync.Once
	file_game_common_proto_rawDescData []byte
)

func file_game_common_proto_rawDescGZIP() []byte {
	file_game_common_proto_rawDescOnce.Do(func() {
		file_game_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_game_common_proto_rawDesc), len(file_game_common_proto_rawDesc)))
	})
	return file_game_common_proto_rawDescData
}

var file_game_common_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_game_common_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_game_common_proto_goTypes = []any{
	(CardStatus)(0),           // 0: proto.CardStatus
	(GameState)(0),            // 1: proto.GameState
	(OpCodeRequest)(0),        // 2: proto.OpCodeRequest
	(OpCodeUpdate)(0),         // 3: proto.OpCodeUpdate
	(*Player)(nil),            // 4: proto.Player
	(*Jackpot)(nil),           // 5: proto.Jackpot
	(*BalanceUpdate)(nil),     // 6: proto.BalanceUpdate
	(*BalanceResult)(nil),     // 7: proto.BalanceResult
	(*HitJackpotHistory)(nil), // 8: proto.HitJackpotHistory
	(*UpdateTable)(nil),       // 9: proto.UpdateTable
}
var file_game_common_proto_depIdxs = []int32{
	0, // 0: proto.Player.card_status:type_name -> proto.CardStatus
	6, // 1: proto.BalanceResult.updates:type_name -> proto.BalanceUpdate
	5, // 2: proto.BalanceResult.jackpot:type_name -> proto.Jackpot
	4, // 3: proto.UpdateTable.players:type_name -> proto.Player
	4, // 4: proto.UpdateTable.playing_players:type_name -> proto.Player
	4, // 5: proto.UpdateTable.join_players:type_name -> proto.Player
	4, // 6: proto.UpdateTable.leave_players:type_name -> proto.Player
	1, // 7: proto.UpdateTable.game_state:type_name -> proto.GameState
	5, // 8: proto.UpdateTable.jp_treasure:type_name -> proto.Jackpot
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_game_common_proto_init() }
func file_game_common_proto_init() {
	if File_game_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_game_common_proto_rawDesc), len(file_game_common_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_game_common_proto_goTypes,
		DependencyIndexes: file_game_common_proto_depIdxs,
		EnumInfos:         file_game_common_proto_enumTypes,
		MessageInfos:      file_game_common_proto_msgTypes,
	}.Build()
	File_game_common_proto = out.File
	file_game_common_proto_goTypes = nil
	file_game_common_proto_depIdxs = nil
}
