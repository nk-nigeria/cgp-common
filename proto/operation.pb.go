// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: operation.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurrencyUnitId int32

const (
	CurrencyUnitId_CURRENCY_UNIT_ID_UNSPECIFIED CurrencyUnitId = 0
	CurrencyUnitId_CURRENCY_UNIT_ID_VN          CurrencyUnitId = 1
)

// Enum value maps for CurrencyUnitId.
var (
	CurrencyUnitId_name = map[int32]string{
		0: "CURRENCY_UNIT_ID_UNSPECIFIED",
		1: "CURRENCY_UNIT_ID_VN",
	}
	CurrencyUnitId_value = map[string]int32{
		"CURRENCY_UNIT_ID_UNSPECIFIED": 0,
		"CURRENCY_UNIT_ID_VN":          1,
	}
)

func (x CurrencyUnitId) Enum() *CurrencyUnitId {
	p := new(CurrencyUnitId)
	*p = x
	return p
}

func (x CurrencyUnitId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrencyUnitId) Descriptor() protoreflect.EnumDescriptor {
	return file_operation_proto_enumTypes[0].Descriptor()
}

func (CurrencyUnitId) Type() protoreflect.EnumType {
	return &file_operation_proto_enumTypes[0]
}

func (x CurrencyUnitId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrencyUnitId.Descriptor instead.
func (CurrencyUnitId) EnumDescriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{0}
}

type OpPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName    string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	GameId      int64  `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GameName    string `protobuf:"bytes,4,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`
	NoBet       int64  `protobuf:"varint,5,opt,name=no_bet,json=noBet,proto3" json:"no_bet,omitempty"`
	NoWin       int64  `protobuf:"varint,6,opt,name=no_win,json=noWin,proto3" json:"no_win,omitempty"`
	NoLost      int64  `protobuf:"varint,7,opt,name=no_lost,json=noLost,proto3" json:"no_lost,omitempty"`
	ChipWin     uint64 `protobuf:"varint,8,opt,name=chip_win,json=chipWin,proto3" json:"chip_win,omitempty"`
	ChipLost    uint64 `protobuf:"varint,9,opt,name=chip_lost,json=chipLost,proto3" json:"chip_lost,omitempty"`
	ChipBalance int64  `protobuf:"varint,10,opt,name=chip_balance,json=chipBalance,proto3" json:"chip_balance,omitempty"`
	Action      int64  `protobuf:"varint,11,opt,name=action,proto3" json:"action,omitempty"`
	Status      string `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	DateUnix    int64  `protobuf:"varint,13,opt,name=date_unix,json=dateUnix,proto3" json:"date_unix,omitempty"`
	Mcb         int64  `protobuf:"varint,14,opt,name=mcb,proto3" json:"mcb,omitempty"`
	UserSid     int64  `protobuf:"varint,15,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
}

func (x *OpPlayer) Reset() {
	*x = OpPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpPlayer) ProtoMessage() {}

func (x *OpPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpPlayer.ProtoReflect.Descriptor instead.
func (*OpPlayer) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{0}
}

func (x *OpPlayer) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OpPlayer) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *OpPlayer) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *OpPlayer) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *OpPlayer) GetNoBet() int64 {
	if x != nil {
		return x.NoBet
	}
	return 0
}

func (x *OpPlayer) GetNoWin() int64 {
	if x != nil {
		return x.NoWin
	}
	return 0
}

func (x *OpPlayer) GetNoLost() int64 {
	if x != nil {
		return x.NoLost
	}
	return 0
}

func (x *OpPlayer) GetChipWin() uint64 {
	if x != nil {
		return x.ChipWin
	}
	return 0
}

func (x *OpPlayer) GetChipLost() uint64 {
	if x != nil {
		return x.ChipLost
	}
	return 0
}

func (x *OpPlayer) GetChipBalance() int64 {
	if x != nil {
		return x.ChipBalance
	}
	return 0
}

func (x *OpPlayer) GetAction() int64 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *OpPlayer) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OpPlayer) GetDateUnix() int64 {
	if x != nil {
		return x.DateUnix
	}
	return 0
}

func (x *OpPlayer) GetMcb() int64 {
	if x != nil {
		return x.Mcb
	}
	return 0
}

func (x *OpPlayer) GetUserSid() int64 {
	if x != nil {
		return x.UserSid
	}
	return 0
}

type OpPlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GameId   int64  `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	FromUnix int64  `protobuf:"varint,3,opt,name=from_unix,json=fromUnix,proto3" json:"from_unix,omitempty"`
	ToUnix   int64  `protobuf:"varint,4,opt,name=to_unix,json=toUnix,proto3" json:"to_unix,omitempty"`
	Action   int64  `protobuf:"varint,5,opt,name=action,proto3" json:"action,omitempty"`
	Offset   int64  `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int64  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	UserSid  int64  `protobuf:"varint,8,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
}

func (x *OpPlayerRequest) Reset() {
	*x = OpPlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpPlayerRequest) ProtoMessage() {}

func (x *OpPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpPlayerRequest.ProtoReflect.Descriptor instead.
func (*OpPlayerRequest) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{1}
}

func (x *OpPlayerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OpPlayerRequest) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *OpPlayerRequest) GetFromUnix() int64 {
	if x != nil {
		return x.FromUnix
	}
	return 0
}

func (x *OpPlayerRequest) GetToUnix() int64 {
	if x != nil {
		return x.ToUnix
	}
	return 0
}

func (x *OpPlayerRequest) GetAction() int64 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *OpPlayerRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *OpPlayerRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *OpPlayerRequest) GetUserSid() int64 {
	if x != nil {
		return x.UserSid
	}
	return 0
}

type OpPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpPlayers     []*OpPlayer `protobuf:"bytes,1,rep,name=op_players,json=opPlayers,proto3" json:"op_players,omitempty"`
	Total         int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Offset        int64       `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int64       `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	TotalChipWin  uint64      `protobuf:"varint,5,opt,name=total_chip_win,json=totalChipWin,proto3" json:"total_chip_win,omitempty"`
	TotalChipLost uint64      `protobuf:"varint,6,opt,name=total_chip_lost,json=totalChipLost,proto3" json:"total_chip_lost,omitempty"`
}

func (x *OpPlayerResponse) Reset() {
	*x = OpPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpPlayerResponse) ProtoMessage() {}

func (x *OpPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpPlayerResponse.ProtoReflect.Descriptor instead.
func (*OpPlayerResponse) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{2}
}

func (x *OpPlayerResponse) GetOpPlayers() []*OpPlayer {
	if x != nil {
		return x.OpPlayers
	}
	return nil
}

func (x *OpPlayerResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OpPlayerResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *OpPlayerResponse) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *OpPlayerResponse) GetTotalChipWin() uint64 {
	if x != nil {
		return x.TotalChipWin
	}
	return 0
}

func (x *OpPlayerResponse) GetTotalChipLost() uint64 {
	if x != nil {
		return x.TotalChipLost
	}
	return 0
}

type MatchDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId         int64  `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GameName       string `protobuf:"bytes,2,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`
	Mcb            int64  `protobuf:"varint,3,opt,name=mcb,proto3" json:"mcb,omitempty"`
	NumMatchPlayed int64  `protobuf:"varint,4,opt,name=num_match_played,json=numMatchPlayed,proto3" json:"num_match_played,omitempty"`
	ChipFee        uint64 `protobuf:"varint,5,opt,name=chip_fee,json=chipFee,proto3" json:"chip_fee,omitempty"`
	Detail         string `protobuf:"bytes,6,opt,name=detail,proto3" json:"detail,omitempty"`
	TableId        int64  `protobuf:"varint,7,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	DateUnix       int64  `protobuf:"varint,8,opt,name=date_unix,json=dateUnix,proto3" json:"date_unix,omitempty"`
	CreatedAtUnix  int64  `protobuf:"varint,9,opt,name=created_at_unix,json=createdAtUnix,proto3" json:"created_at_unix,omitempty"`
	ChipWin        int64  `protobuf:"varint,10,opt,name=chip_win,json=chipWin,proto3" json:"chip_win,omitempty"`
	ChipLose       int64  `protobuf:"varint,11,opt,name=chip_lose,json=chipLose,proto3" json:"chip_lose,omitempty"`
}

func (x *MatchDetail) Reset() {
	*x = MatchDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDetail) ProtoMessage() {}

func (x *MatchDetail) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDetail.ProtoReflect.Descriptor instead.
func (*MatchDetail) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{3}
}

func (x *MatchDetail) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *MatchDetail) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *MatchDetail) GetMcb() int64 {
	if x != nil {
		return x.Mcb
	}
	return 0
}

func (x *MatchDetail) GetNumMatchPlayed() int64 {
	if x != nil {
		return x.NumMatchPlayed
	}
	return 0
}

func (x *MatchDetail) GetChipFee() uint64 {
	if x != nil {
		return x.ChipFee
	}
	return 0
}

func (x *MatchDetail) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *MatchDetail) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MatchDetail) GetDateUnix() int64 {
	if x != nil {
		return x.DateUnix
	}
	return 0
}

func (x *MatchDetail) GetCreatedAtUnix() int64 {
	if x != nil {
		return x.CreatedAtUnix
	}
	return 0
}

func (x *MatchDetail) GetChipWin() int64 {
	if x != nil {
		return x.ChipWin
	}
	return 0
}

func (x *MatchDetail) GetChipLose() int64 {
	if x != nil {
		return x.ChipLose
	}
	return 0
}

type MatchDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId      int64 `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	FromUnix    int64 `protobuf:"varint,2,opt,name=from_unix,json=fromUnix,proto3" json:"from_unix,omitempty"`
	ToUnix      int64 `protobuf:"varint,3,opt,name=to_unix,json=toUnix,proto3" json:"to_unix,omitempty"`
	UserSid     int64 `protobuf:"varint,4,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
	UserPairSid int64 `protobuf:"varint,5,opt,name=user_pair_sid,json=userPairSid,proto3" json:"user_pair_sid,omitempty"`
	Limit       int64 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int64 `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *MatchDetailRequest) Reset() {
	*x = MatchDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDetailRequest) ProtoMessage() {}

func (x *MatchDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDetailRequest.ProtoReflect.Descriptor instead.
func (*MatchDetailRequest) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{4}
}

func (x *MatchDetailRequest) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *MatchDetailRequest) GetFromUnix() int64 {
	if x != nil {
		return x.FromUnix
	}
	return 0
}

func (x *MatchDetailRequest) GetToUnix() int64 {
	if x != nil {
		return x.ToUnix
	}
	return 0
}

func (x *MatchDetailRequest) GetUserSid() int64 {
	if x != nil {
		return x.UserSid
	}
	return 0
}

func (x *MatchDetailRequest) GetUserPairSid() int64 {
	if x != nil {
		return x.UserPairSid
	}
	return 0
}

func (x *MatchDetailRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MatchDetailRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type MatchDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchDetails []*MatchDetail `protobuf:"bytes,1,rep,name=match_details,json=matchDetails,proto3" json:"match_details,omitempty"`
	Total        int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Limit        int64          `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset       int64          `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *MatchDetailResponse) Reset() {
	*x = MatchDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDetailResponse) ProtoMessage() {}

func (x *MatchDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDetailResponse.ProtoReflect.Descriptor instead.
func (*MatchDetailResponse) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{5}
}

func (x *MatchDetailResponse) GetMatchDetails() []*MatchDetail {
	if x != nil {
		return x.MatchDetails
	}
	return nil
}

func (x *MatchDetailResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MatchDetailResponse) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MatchDetailResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type PlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Chip    int64  `protobuf:"varint,2,opt,name=chip,proto3" json:"chip,omitempty"`
	ChipAdd int64  `protobuf:"varint,3,opt,name=chip_add,json=chipAdd,proto3" json:"chip_add,omitempty"`
	UserSid int64  `protobuf:"varint,8,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
}

func (x *PlayerData) Reset() {
	*x = PlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerData) ProtoMessage() {}

func (x *PlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerData.ProtoReflect.Descriptor instead.
func (*PlayerData) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlayerData) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *PlayerData) GetChipAdd() int64 {
	if x != nil {
		return x.ChipAdd
	}
	return 0
}

func (x *PlayerData) GetUserSid() int64 {
	if x != nil {
		return x.UserSid
	}
	return 0
}

type MatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId   int64  `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GameCode string `protobuf:"bytes,3,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	Mcb      int64  `protobuf:"varint,4,opt,name=mcb,proto3" json:"mcb,omitempty"`
	ChipFee  int64  `protobuf:"varint,5,opt,name=chip_fee,json=chipFee,proto3" json:"chip_fee,omitempty"`
	MatchId  string `protobuf:"bytes,6,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	TableId  int64  `protobuf:"varint,7,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
}

func (x *MatchData) Reset() {
	*x = MatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchData) ProtoMessage() {}

func (x *MatchData) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchData.ProtoReflect.Descriptor instead.
func (*MatchData) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{7}
}

func (x *MatchData) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *MatchData) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *MatchData) GetMcb() int64 {
	if x != nil {
		return x.Mcb
	}
	return 0
}

func (x *MatchData) GetChipFee() int64 {
	if x != nil {
		return x.ChipFee
	}
	return 0
}

func (x *MatchData) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchData) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

type OpReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerData []*PlayerData `protobuf:"bytes,1,rep,name=player_data,json=playerData,proto3" json:"player_data,omitempty"`
	MatchData  *MatchData    `protobuf:"bytes,2,opt,name=match_data,json=matchData,proto3" json:"match_data,omitempty"`
}

func (x *OpReport) Reset() {
	*x = OpReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpReport) ProtoMessage() {}

func (x *OpReport) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpReport.ProtoReflect.Descriptor instead.
func (*OpReport) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{8}
}

func (x *OpReport) GetPlayerData() []*PlayerData {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *OpReport) GetMatchData() *MatchData {
	if x != nil {
		return x.MatchData
	}
	return nil
}

type GoldStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUpdateUnix int64        `protobuf:"varint,1,opt,name=time_update_unix,json=timeUpdateUnix,proto3" json:"time_update_unix,omitempty"`
	Pay            int64        `protobuf:"varint,2,opt,name=pay,proto3" json:"pay,omitempty"`
	Promotion      int64        `protobuf:"varint,3,opt,name=promotion,proto3" json:"promotion,omitempty"`
	MatchData      []*MatchData `protobuf:"bytes,4,rep,name=match_data,json=matchData,proto3" json:"match_data,omitempty"`
	AgCashout      int64        `protobuf:"varint,5,opt,name=ag_cashout,json=agCashout,proto3" json:"ag_cashout,omitempty"`
	AgBank         int64        `protobuf:"varint,6,opt,name=ag_bank,json=agBank,proto3" json:"ag_bank,omitempty"`
	Chips          int64        `protobuf:"varint,7,opt,name=chips,proto3" json:"chips,omitempty"`
}

func (x *GoldStatistic) Reset() {
	*x = GoldStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoldStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoldStatistic) ProtoMessage() {}

func (x *GoldStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoldStatistic.ProtoReflect.Descriptor instead.
func (*GoldStatistic) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{9}
}

func (x *GoldStatistic) GetTimeUpdateUnix() int64 {
	if x != nil {
		return x.TimeUpdateUnix
	}
	return 0
}

func (x *GoldStatistic) GetPay() int64 {
	if x != nil {
		return x.Pay
	}
	return 0
}

func (x *GoldStatistic) GetPromotion() int64 {
	if x != nil {
		return x.Promotion
	}
	return 0
}

func (x *GoldStatistic) GetMatchData() []*MatchData {
	if x != nil {
		return x.MatchData
	}
	return nil
}

func (x *GoldStatistic) GetAgCashout() int64 {
	if x != nil {
		return x.AgCashout
	}
	return 0
}

func (x *GoldStatistic) GetAgBank() int64 {
	if x != nil {
		return x.AgBank
	}
	return 0
}

func (x *GoldStatistic) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

type GoldStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUnix int64 `protobuf:"varint,1,opt,name=from_unix,json=fromUnix,proto3" json:"from_unix,omitempty"`
	ToUnix   int64 `protobuf:"varint,2,opt,name=to_unix,json=toUnix,proto3" json:"to_unix,omitempty"`
	Limit    int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GoldStatisticRequest) Reset() {
	*x = GoldStatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoldStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoldStatisticRequest) ProtoMessage() {}

func (x *GoldStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoldStatisticRequest.ProtoReflect.Descriptor instead.
func (*GoldStatisticRequest) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{10}
}

func (x *GoldStatisticRequest) GetFromUnix() int64 {
	if x != nil {
		return x.FromUnix
	}
	return 0
}

func (x *GoldStatisticRequest) GetToUnix() int64 {
	if x != nil {
		return x.ToUnix
	}
	return 0
}

func (x *GoldStatisticRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GoldStatisticRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GoldStatisticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoldStatistics []*GoldStatistic `protobuf:"bytes,1,rep,name=gold_statistics,json=goldStatistics,proto3" json:"gold_statistics,omitempty"`
	Limit          int64            `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int64            `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Total          int64            `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GoldStatisticResponse) Reset() {
	*x = GoldStatisticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoldStatisticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoldStatisticResponse) ProtoMessage() {}

func (x *GoldStatisticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoldStatisticResponse.ProtoReflect.Descriptor instead.
func (*GoldStatisticResponse) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{11}
}

func (x *GoldStatisticResponse) GetGoldStatistics() []*GoldStatistic {
	if x != nil {
		return x.GoldStatistics
	}
	return nil
}

func (x *GoldStatisticResponse) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GoldStatisticResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GoldStatisticResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UserStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalChipDeposit      int64                   `protobuf:"varint,1,opt,name=total_chip_deposit,json=totalChipDeposit,proto3" json:"total_chip_deposit,omitempty"`
	TotalChipWithDraw     int64                   `protobuf:"varint,2,opt,name=total_chip_with_draw,json=totalChipWithDraw,proto3" json:"total_chip_with_draw,omitempty"`
	TotalChipWin          int64                   `protobuf:"varint,3,opt,name=total_chip_win,json=totalChipWin,proto3" json:"total_chip_win,omitempty"`
	TotalChipLose         int64                   `protobuf:"varint,4,opt,name=total_chip_lose,json=totalChipLose,proto3" json:"total_chip_lose,omitempty"`
	TotalChipPromotion    int64                   `protobuf:"varint,5,opt,name=total_chip_promotion,json=totalChipPromotion,proto3" json:"total_chip_promotion,omitempty"`
	TotalChipSend         int64                   `protobuf:"varint,6,opt,name=total_chip_send,json=totalChipSend,proto3" json:"total_chip_send,omitempty"`
	TotalChipRecv         int64                   `protobuf:"varint,7,opt,name=total_chip_recv,json=totalChipRecv,proto3" json:"total_chip_recv,omitempty"`
	CoRatio               int64                   `protobuf:"varint,8,opt,name=co_ratio,json=coRatio,proto3" json:"co_ratio,omitempty"`
	TotalChipDeposit_3D   int64                   `protobuf:"varint,9,opt,name=total_chip_deposit_3d,json=totalChipDeposit3d,proto3" json:"total_chip_deposit_3d,omitempty"`
	TotalChipWithDraw_3D  int64                   `protobuf:"varint,10,opt,name=total_chip_with_draw_3d,json=totalChipWithDraw3d,proto3" json:"total_chip_with_draw_3d,omitempty"`
	Luck                  int64                   `protobuf:"varint,11,opt,name=luck,proto3" json:"luck,omitempty"`
	UserCreateTimeUnix    int64                   `protobuf:"varint,12,opt,name=user_create_time_unix,json=userCreateTimeUnix,proto3" json:"user_create_time_unix,omitempty"`
	UserStatGameHistories []*UserStatGameHistory  `protobuf:"bytes,13,rep,name=user_stat_game_histories,json=userStatGameHistories,proto3" json:"user_stat_game_histories,omitempty"`
	RecvChipStats         []*UserTransferGoldStat `protobuf:"bytes,14,rep,name=recv_chip_stats,json=recvChipStats,proto3" json:"recv_chip_stats,omitempty"`
	SendChipStats         []*UserTransferGoldStat `protobuf:"bytes,15,rep,name=send_chip_stats,json=sendChipStats,proto3" json:"send_chip_stats,omitempty"`
}

func (x *UserStatistic) Reset() {
	*x = UserStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatistic) ProtoMessage() {}

func (x *UserStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatistic.ProtoReflect.Descriptor instead.
func (*UserStatistic) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{12}
}

func (x *UserStatistic) GetTotalChipDeposit() int64 {
	if x != nil {
		return x.TotalChipDeposit
	}
	return 0
}

func (x *UserStatistic) GetTotalChipWithDraw() int64 {
	if x != nil {
		return x.TotalChipWithDraw
	}
	return 0
}

func (x *UserStatistic) GetTotalChipWin() int64 {
	if x != nil {
		return x.TotalChipWin
	}
	return 0
}

func (x *UserStatistic) GetTotalChipLose() int64 {
	if x != nil {
		return x.TotalChipLose
	}
	return 0
}

func (x *UserStatistic) GetTotalChipPromotion() int64 {
	if x != nil {
		return x.TotalChipPromotion
	}
	return 0
}

func (x *UserStatistic) GetTotalChipSend() int64 {
	if x != nil {
		return x.TotalChipSend
	}
	return 0
}

func (x *UserStatistic) GetTotalChipRecv() int64 {
	if x != nil {
		return x.TotalChipRecv
	}
	return 0
}

func (x *UserStatistic) GetCoRatio() int64 {
	if x != nil {
		return x.CoRatio
	}
	return 0
}

func (x *UserStatistic) GetTotalChipDeposit_3D() int64 {
	if x != nil {
		return x.TotalChipDeposit_3D
	}
	return 0
}

func (x *UserStatistic) GetTotalChipWithDraw_3D() int64 {
	if x != nil {
		return x.TotalChipWithDraw_3D
	}
	return 0
}

func (x *UserStatistic) GetLuck() int64 {
	if x != nil {
		return x.Luck
	}
	return 0
}

func (x *UserStatistic) GetUserCreateTimeUnix() int64 {
	if x != nil {
		return x.UserCreateTimeUnix
	}
	return 0
}

func (x *UserStatistic) GetUserStatGameHistories() []*UserStatGameHistory {
	if x != nil {
		return x.UserStatGameHistories
	}
	return nil
}

func (x *UserStatistic) GetRecvChipStats() []*UserTransferGoldStat {
	if x != nil {
		return x.RecvChipStats
	}
	return nil
}

func (x *UserStatistic) GetSendChipStats() []*UserTransferGoldStat {
	if x != nil {
		return x.SendChipStats
	}
	return nil
}

type UserStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FromUnix int64  `protobuf:"varint,2,opt,name=from_unix,json=fromUnix,proto3" json:"from_unix,omitempty"`
	ToUnix   int64  `protobuf:"varint,3,opt,name=to_unix,json=toUnix,proto3" json:"to_unix,omitempty"`
	UserSid  int64  `protobuf:"varint,4,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
	DeviceId string `protobuf:"bytes,5,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *UserStatisticRequest) Reset() {
	*x = UserStatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatisticRequest) ProtoMessage() {}

func (x *UserStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatisticRequest.ProtoReflect.Descriptor instead.
func (*UserStatisticRequest) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{13}
}

func (x *UserStatisticRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserStatisticRequest) GetFromUnix() int64 {
	if x != nil {
		return x.FromUnix
	}
	return 0
}

func (x *UserStatisticRequest) GetToUnix() int64 {
	if x != nil {
		return x.ToUnix
	}
	return 0
}

func (x *UserStatisticRequest) GetUserSid() int64 {
	if x != nil {
		return x.UserSid
	}
	return 0
}

func (x *UserStatisticRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type UserStatGameHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId        int64  `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GameName      string `protobuf:"bytes,2,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`
	TotalChipWin  int64  `protobuf:"varint,3,opt,name=total_chip_win,json=totalChipWin,proto3" json:"total_chip_win,omitempty"`
	TotalChipLost int64  `protobuf:"varint,4,opt,name=total_chip_lost,json=totalChipLost,proto3" json:"total_chip_lost,omitempty"`
}

func (x *UserStatGameHistory) Reset() {
	*x = UserStatGameHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatGameHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatGameHistory) ProtoMessage() {}

func (x *UserStatGameHistory) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatGameHistory.ProtoReflect.Descriptor instead.
func (*UserStatGameHistory) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{14}
}

func (x *UserStatGameHistory) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *UserStatGameHistory) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *UserStatGameHistory) GetTotalChipWin() int64 {
	if x != nil {
		return x.TotalChipWin
	}
	return 0
}

func (x *UserStatGameHistory) GetTotalChipLost() int64 {
	if x != nil {
		return x.TotalChipLost
	}
	return 0
}

type UserTransferGoldStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserSendId   string `protobuf:"bytes,1,opt,name=user_send_id,json=userSendId,proto3" json:"user_send_id,omitempty"`
	UserSendName string `protobuf:"bytes,2,opt,name=user_send_name,json=userSendName,proto3" json:"user_send_name,omitempty"`
	UserRecvId   string `protobuf:"bytes,3,opt,name=user_recv_id,json=userRecvId,proto3" json:"user_recv_id,omitempty"`
	UserRecvName string `protobuf:"bytes,4,opt,name=user_recv_name,json=userRecvName,proto3" json:"user_recv_name,omitempty"`
	Chip         int64  `protobuf:"varint,5,opt,name=chip,proto3" json:"chip,omitempty"`
}

func (x *UserTransferGoldStat) Reset() {
	*x = UserTransferGoldStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTransferGoldStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTransferGoldStat) ProtoMessage() {}

func (x *UserTransferGoldStat) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTransferGoldStat.ProtoReflect.Descriptor instead.
func (*UserTransferGoldStat) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{15}
}

func (x *UserTransferGoldStat) GetUserSendId() string {
	if x != nil {
		return x.UserSendId
	}
	return ""
}

func (x *UserTransferGoldStat) GetUserSendName() string {
	if x != nil {
		return x.UserSendName
	}
	return ""
}

func (x *UserTransferGoldStat) GetUserRecvId() string {
	if x != nil {
		return x.UserRecvId
	}
	return ""
}

func (x *UserTransferGoldStat) GetUserRecvName() string {
	if x != nil {
		return x.UserRecvName
	}
	return ""
}

func (x *UserTransferGoldStat) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile  *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	TotalIn  int64    `protobuf:"varint,2,opt,name=total_in,json=totalIn,proto3" json:"total_in,omitempty"`
	TotalOut int64    `protobuf:"varint,3,opt,name=total_out,json=totalOut,proto3" json:"total_out,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{16}
}

func (x *UserInfo) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *UserInfo) GetTotalIn() int64 {
	if x != nil {
		return x.TotalIn
	}
	return 0
}

func (x *UserInfo) GetTotalOut() int64 {
	if x != nil {
		return x.TotalOut
	}
	return 0
}

type UserInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfos []*UserInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"`
	Total     int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	DeviceId  string      `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	TotalIn   int64       `protobuf:"varint,4,opt,name=total_in,json=totalIn,proto3" json:"total_in,omitempty"`
	TotalOut  int64       `protobuf:"varint,5,opt,name=total_out,json=totalOut,proto3" json:"total_out,omitempty"`
	TotalLock int64       `protobuf:"varint,6,opt,name=total_lock,json=totalLock,proto3" json:"total_lock,omitempty"`
}

func (x *UserInfoResponse) Reset() {
	*x = UserInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoResponse) ProtoMessage() {}

func (x *UserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoResponse.ProtoReflect.Descriptor instead.
func (*UserInfoResponse) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{17}
}

func (x *UserInfoResponse) GetUserInfos() []*UserInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

func (x *UserInfoResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserInfoResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *UserInfoResponse) GetTotalIn() int64 {
	if x != nil {
		return x.TotalIn
	}
	return 0
}

func (x *UserInfoResponse) GetTotalOut() int64 {
	if x != nil {
		return x.TotalOut
	}
	return 0
}

func (x *UserInfoResponse) GetTotalLock() int64 {
	if x != nil {
		return x.TotalLock
	}
	return 0
}

type CashOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName     string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Ci           int64  `protobuf:"varint,3,opt,name=ci,proto3" json:"ci,omitempty"`
	Cio          int64  `protobuf:"varint,4,opt,name=cio,proto3" json:"cio,omitempty"`
	Co           int64  `protobuf:"varint,5,opt,name=co,proto3" json:"co,omitempty"`
	Coo          int64  `protobuf:"varint,6,opt,name=coo,proto3" json:"coo,omitempty"`
	LuckyPercent int64  `protobuf:"varint,7,opt,name=lucky_percent,json=luckyPercent,proto3" json:"lucky_percent,omitempty"`
	UserSid      int64  `protobuf:"varint,8,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
}

func (x *CashOut) Reset() {
	*x = CashOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashOut) ProtoMessage() {}

func (x *CashOut) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashOut.ProtoReflect.Descriptor instead.
func (*CashOut) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{18}
}

func (x *CashOut) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CashOut) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CashOut) GetCi() int64 {
	if x != nil {
		return x.Ci
	}
	return 0
}

func (x *CashOut) GetCio() int64 {
	if x != nil {
		return x.Cio
	}
	return 0
}

func (x *CashOut) GetCo() int64 {
	if x != nil {
		return x.Co
	}
	return 0
}

func (x *CashOut) GetCoo() int64 {
	if x != nil {
		return x.Coo
	}
	return 0
}

func (x *CashOut) GetLuckyPercent() int64 {
	if x != nil {
		return x.LuckyPercent
	}
	return 0
}

func (x *CashOut) GetUserSid() int64 {
	if x != nil {
		return x.UserSid
	}
	return 0
}

type TopCashOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cashouts []*CashOut `protobuf:"bytes,1,rep,name=cashouts,proto3" json:"cashouts,omitempty"`
	FromUnix int64      `protobuf:"varint,2,opt,name=from_unix,json=fromUnix,proto3" json:"from_unix,omitempty"`
	ToUnix   int64      `protobuf:"varint,3,opt,name=to_unix,json=toUnix,proto3" json:"to_unix,omitempty"`
	Limit    int64      `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int64      `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Total    int64      `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TopCashOut) Reset() {
	*x = TopCashOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopCashOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopCashOut) ProtoMessage() {}

func (x *TopCashOut) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopCashOut.ProtoReflect.Descriptor instead.
func (*TopCashOut) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{19}
}

func (x *TopCashOut) GetCashouts() []*CashOut {
	if x != nil {
		return x.Cashouts
	}
	return nil
}

func (x *TopCashOut) GetFromUnix() int64 {
	if x != nil {
		return x.FromUnix
	}
	return 0
}

func (x *TopCashOut) GetToUnix() int64 {
	if x != nil {
		return x.ToUnix
	}
	return 0
}

func (x *TopCashOut) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TopCashOut) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TopCashOut) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Vip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName          string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Cio               int64  `protobuf:"varint,3,opt,name=cio,proto3" json:"cio,omitempty"`
	TotalChip         int64  `protobuf:"varint,4,opt,name=total_chip,json=totalChip,proto3" json:"total_chip,omitempty"`
	LastLoginTimeUnix int64  `protobuf:"varint,5,opt,name=last_login_time_unix,json=lastLoginTimeUnix,proto3" json:"last_login_time_unix,omitempty"`
	CreatedTimeUnix   int64  `protobuf:"varint,6,opt,name=created_time_unix,json=createdTimeUnix,proto3" json:"created_time_unix,omitempty"`
	RefGame           string `protobuf:"bytes,7,opt,name=ref_game,json=refGame,proto3" json:"ref_game,omitempty"`
	Ci                int64  `protobuf:"varint,8,opt,name=ci,proto3" json:"ci,omitempty"`
	Co                int64  `protobuf:"varint,9,opt,name=co,proto3" json:"co,omitempty"`
	Ci2D              int64  `protobuf:"varint,10,opt,name=ci2d,proto3" json:"ci2d,omitempty"`
	Co2D              int64  `protobuf:"varint,11,opt,name=co2d,proto3" json:"co2d,omitempty"`
	LuckyPercent      int64  `protobuf:"varint,12,opt,name=lucky_percent,json=luckyPercent,proto3" json:"lucky_percent,omitempty"`
	IsBanned          bool   `protobuf:"varint,13,opt,name=is_banned,json=isBanned,proto3" json:"is_banned,omitempty"`
	IsOnline          bool   `protobuf:"varint,14,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	TotalIn           int64  `protobuf:"varint,15,opt,name=total_in,json=totalIn,proto3" json:"total_in,omitempty"`
	TotalOut          int64  `protobuf:"varint,16,opt,name=total_out,json=totalOut,proto3" json:"total_out,omitempty"`
	UserSid           int64  `protobuf:"varint,17,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
}

func (x *Vip) Reset() {
	*x = Vip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vip) ProtoMessage() {}

func (x *Vip) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vip.ProtoReflect.Descriptor instead.
func (*Vip) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{20}
}

func (x *Vip) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Vip) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Vip) GetCio() int64 {
	if x != nil {
		return x.Cio
	}
	return 0
}

func (x *Vip) GetTotalChip() int64 {
	if x != nil {
		return x.TotalChip
	}
	return 0
}

func (x *Vip) GetLastLoginTimeUnix() int64 {
	if x != nil {
		return x.LastLoginTimeUnix
	}
	return 0
}

func (x *Vip) GetCreatedTimeUnix() int64 {
	if x != nil {
		return x.CreatedTimeUnix
	}
	return 0
}

func (x *Vip) GetRefGame() string {
	if x != nil {
		return x.RefGame
	}
	return ""
}

func (x *Vip) GetCi() int64 {
	if x != nil {
		return x.Ci
	}
	return 0
}

func (x *Vip) GetCo() int64 {
	if x != nil {
		return x.Co
	}
	return 0
}

func (x *Vip) GetCi2D() int64 {
	if x != nil {
		return x.Ci2D
	}
	return 0
}

func (x *Vip) GetCo2D() int64 {
	if x != nil {
		return x.Co2D
	}
	return 0
}

func (x *Vip) GetLuckyPercent() int64 {
	if x != nil {
		return x.LuckyPercent
	}
	return 0
}

func (x *Vip) GetIsBanned() bool {
	if x != nil {
		return x.IsBanned
	}
	return false
}

func (x *Vip) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *Vip) GetTotalIn() int64 {
	if x != nil {
		return x.TotalIn
	}
	return 0
}

func (x *Vip) GetTotalOut() int64 {
	if x != nil {
		return x.TotalOut
	}
	return 0
}

func (x *Vip) GetUserSid() int64 {
	if x != nil {
		return x.UserSid
	}
	return 0
}

type TopVip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vips     []*Vip `protobuf:"bytes,1,rep,name=vips,proto3" json:"vips,omitempty"`
	FromUnix int64  `protobuf:"varint,2,opt,name=from_unix,json=fromUnix,proto3" json:"from_unix,omitempty"`
	ToUnix   int64  `protobuf:"varint,3,opt,name=to_unix,json=toUnix,proto3" json:"to_unix,omitempty"`
	Limit    int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	RefGame  string `protobuf:"bytes,6,opt,name=ref_game,json=refGame,proto3" json:"ref_game,omitempty"`
	Total    int64  `protobuf:"varint,7,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TopVip) Reset() {
	*x = TopVip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopVip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopVip) ProtoMessage() {}

func (x *TopVip) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopVip.ProtoReflect.Descriptor instead.
func (*TopVip) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{21}
}

func (x *TopVip) GetVips() []*Vip {
	if x != nil {
		return x.Vips
	}
	return nil
}

func (x *TopVip) GetFromUnix() int64 {
	if x != nil {
		return x.FromUnix
	}
	return 0
}

func (x *TopVip) GetToUnix() int64 {
	if x != nil {
		return x.ToUnix
	}
	return 0
}

func (x *TopVip) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TopVip) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TopVip) GetRefGame() string {
	if x != nil {
		return x.RefGame
	}
	return ""
}

func (x *TopVip) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Win struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName     string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Vip          int64  `protobuf:"varint,3,opt,name=vip,proto3" json:"vip,omitempty"`
	Gold         int64  `protobuf:"varint,4,opt,name=gold,proto3" json:"gold,omitempty"`
	Ag           int64  `protobuf:"varint,5,opt,name=ag,proto3" json:"ag,omitempty"`
	AgWin        int64  `protobuf:"varint,6,opt,name=ag_win,json=agWin,proto3" json:"ag_win,omitempty"`
	Co           int64  `protobuf:"varint,7,opt,name=co,proto3" json:"co,omitempty"`
	Ci           int64  `protobuf:"varint,8,opt,name=ci,proto3" json:"ci,omitempty"`
	CoRate       int64  `protobuf:"varint,9,opt,name=co_rate,json=coRate,proto3" json:"co_rate,omitempty"`
	LuckyPercent int64  `protobuf:"varint,10,opt,name=lucky_percent,json=luckyPercent,proto3" json:"lucky_percent,omitempty"`
	UserSid      int64  `protobuf:"varint,11,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
}

func (x *Win) Reset() {
	*x = Win{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Win) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Win) ProtoMessage() {}

func (x *Win) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Win.ProtoReflect.Descriptor instead.
func (*Win) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{22}
}

func (x *Win) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Win) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Win) GetVip() int64 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *Win) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *Win) GetAg() int64 {
	if x != nil {
		return x.Ag
	}
	return 0
}

func (x *Win) GetAgWin() int64 {
	if x != nil {
		return x.AgWin
	}
	return 0
}

func (x *Win) GetCo() int64 {
	if x != nil {
		return x.Co
	}
	return 0
}

func (x *Win) GetCi() int64 {
	if x != nil {
		return x.Ci
	}
	return 0
}

func (x *Win) GetCoRate() int64 {
	if x != nil {
		return x.CoRate
	}
	return 0
}

func (x *Win) GetLuckyPercent() int64 {
	if x != nil {
		return x.LuckyPercent
	}
	return 0
}

func (x *Win) GetUserSid() int64 {
	if x != nil {
		return x.UserSid
	}
	return 0
}

type TopWin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wins     []*Win `protobuf:"bytes,1,rep,name=wins,proto3" json:"wins,omitempty"`
	FromUnix int64  `protobuf:"varint,2,opt,name=from_unix,json=fromUnix,proto3" json:"from_unix,omitempty"`
	ToUnix   int64  `protobuf:"varint,3,opt,name=to_unix,json=toUnix,proto3" json:"to_unix,omitempty"`
	Limit    int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	RefGame  string `protobuf:"bytes,6,opt,name=ref_game,json=refGame,proto3" json:"ref_game,omitempty"`
	Total    int64  `protobuf:"varint,7,opt,name=total,proto3" json:"total,omitempty"`
	GameId   int64  `protobuf:"varint,8,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *TopWin) Reset() {
	*x = TopWin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopWin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopWin) ProtoMessage() {}

func (x *TopWin) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopWin.ProtoReflect.Descriptor instead.
func (*TopWin) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{23}
}

func (x *TopWin) GetWins() []*Win {
	if x != nil {
		return x.Wins
	}
	return nil
}

func (x *TopWin) GetFromUnix() int64 {
	if x != nil {
		return x.FromUnix
	}
	return 0
}

func (x *TopWin) GetToUnix() int64 {
	if x != nil {
		return x.ToUnix
	}
	return 0
}

func (x *TopWin) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TopWin) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TopWin) GetRefGame() string {
	if x != nil {
		return x.RefGame
	}
	return ""
}

func (x *TopWin) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TopWin) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

type Lost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName     string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Vip          int64  `protobuf:"varint,3,opt,name=vip,proto3" json:"vip,omitempty"`
	Gold         int64  `protobuf:"varint,4,opt,name=gold,proto3" json:"gold,omitempty"`
	Ag           int64  `protobuf:"varint,5,opt,name=ag,proto3" json:"ag,omitempty"`
	AgLost       int64  `protobuf:"varint,6,opt,name=ag_lost,json=agLost,proto3" json:"ag_lost,omitempty"`
	Co           int64  `protobuf:"varint,7,opt,name=co,proto3" json:"co,omitempty"`
	Ci           int64  `protobuf:"varint,8,opt,name=ci,proto3" json:"ci,omitempty"`
	CoRate       int64  `protobuf:"varint,9,opt,name=co_rate,json=coRate,proto3" json:"co_rate,omitempty"`
	LuckyPercent int64  `protobuf:"varint,10,opt,name=lucky_percent,json=luckyPercent,proto3" json:"lucky_percent,omitempty"`
	UserSid      int64  `protobuf:"varint,11,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
}

func (x *Lost) Reset() {
	*x = Lost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lost) ProtoMessage() {}

func (x *Lost) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lost.ProtoReflect.Descriptor instead.
func (*Lost) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{24}
}

func (x *Lost) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Lost) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Lost) GetVip() int64 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *Lost) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *Lost) GetAg() int64 {
	if x != nil {
		return x.Ag
	}
	return 0
}

func (x *Lost) GetAgLost() int64 {
	if x != nil {
		return x.AgLost
	}
	return 0
}

func (x *Lost) GetCo() int64 {
	if x != nil {
		return x.Co
	}
	return 0
}

func (x *Lost) GetCi() int64 {
	if x != nil {
		return x.Ci
	}
	return 0
}

func (x *Lost) GetCoRate() int64 {
	if x != nil {
		return x.CoRate
	}
	return 0
}

func (x *Lost) GetLuckyPercent() int64 {
	if x != nil {
		return x.LuckyPercent
	}
	return 0
}

func (x *Lost) GetUserSid() int64 {
	if x != nil {
		return x.UserSid
	}
	return 0
}

type TopLost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Losts    []*Lost `protobuf:"bytes,1,rep,name=losts,proto3" json:"losts,omitempty"`
	FromUnix int64   `protobuf:"varint,2,opt,name=from_unix,json=fromUnix,proto3" json:"from_unix,omitempty"`
	ToUnix   int64   `protobuf:"varint,3,opt,name=to_unix,json=toUnix,proto3" json:"to_unix,omitempty"`
	Limit    int64   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int64   `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	RefGame  string  `protobuf:"bytes,6,opt,name=ref_game,json=refGame,proto3" json:"ref_game,omitempty"`
	Total    int64   `protobuf:"varint,7,opt,name=total,proto3" json:"total,omitempty"`
	GameId   int64   `protobuf:"varint,8,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *TopLost) Reset() {
	*x = TopLost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopLost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopLost) ProtoMessage() {}

func (x *TopLost) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopLost.ProtoReflect.Descriptor instead.
func (*TopLost) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{25}
}

func (x *TopLost) GetLosts() []*Lost {
	if x != nil {
		return x.Losts
	}
	return nil
}

func (x *TopLost) GetFromUnix() int64 {
	if x != nil {
		return x.FromUnix
	}
	return 0
}

func (x *TopLost) GetToUnix() int64 {
	if x != nil {
		return x.ToUnix
	}
	return 0
}

func (x *TopLost) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TopLost) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TopLost) GetRefGame() string {
	if x != nil {
		return x.RefGame
	}
	return ""
}

func (x *TopLost) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TopLost) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

type TransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserSid  int64 `protobuf:"varint,1,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
	FromUnix int64 `protobuf:"varint,2,opt,name=from_unix,json=fromUnix,proto3" json:"from_unix,omitempty"`
	ToUnix   int64 `protobuf:"varint,3,opt,name=to_unix,json=toUnix,proto3" json:"to_unix,omitempty"`
	Limit    int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *TransactionRequest) Reset() {
	*x = TransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRequest) ProtoMessage() {}

func (x *TransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRequest.ProtoReflect.Descriptor instead.
func (*TransactionRequest) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{26}
}

func (x *TransactionRequest) GetUserSid() int64 {
	if x != nil {
		return x.UserSid
	}
	return 0
}

func (x *TransactionRequest) GetFromUnix() int64 {
	if x != nil {
		return x.FromUnix
	}
	return 0
}

func (x *TransactionRequest) GetToUnix() int64 {
	if x != nil {
		return x.ToUnix
	}
	return 0
}

func (x *TransactionRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TransactionRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type TransactionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserSid     int64  `protobuf:"varint,3,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
	UserName    string `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Vip         int64  `protobuf:"varint,5,opt,name=vip,proto3" json:"vip,omitempty"`
	Rp          int64  `protobuf:"varint,6,opt,name=rp,proto3" json:"rp,omitempty"` // Số tiền nạp
	TypeTopup   string `protobuf:"bytes,7,opt,name=type_topup,json=typeTopup,proto3" json:"type_topup,omitempty"`
	ChipsTopup  int64  `protobuf:"varint,8,opt,name=chips_topup,json=chipsTopup,proto3" json:"chips_topup,omitempty"` // Số chip user được nhận của giao dịch
	CreatedUnix int64  `protobuf:"varint,9,opt,name=created_unix,json=createdUnix,proto3" json:"created_unix,omitempty"`
}

func (x *TransactionDetail) Reset() {
	*x = TransactionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDetail) ProtoMessage() {}

func (x *TransactionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDetail.ProtoReflect.Descriptor instead.
func (*TransactionDetail) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{27}
}

func (x *TransactionDetail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TransactionDetail) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TransactionDetail) GetUserSid() int64 {
	if x != nil {
		return x.UserSid
	}
	return 0
}

func (x *TransactionDetail) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *TransactionDetail) GetVip() int64 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *TransactionDetail) GetRp() int64 {
	if x != nil {
		return x.Rp
	}
	return 0
}

func (x *TransactionDetail) GetTypeTopup() string {
	if x != nil {
		return x.TypeTopup
	}
	return ""
}

func (x *TransactionDetail) GetChipsTopup() int64 {
	if x != nil {
		return x.ChipsTopup
	}
	return 0
}

func (x *TransactionDetail) GetCreatedUnix() int64 {
	if x != nil {
		return x.CreatedUnix
	}
	return 0
}

type TransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransDetails []*TransactionDetail `protobuf:"bytes,1,rep,name=trans_details,json=transDetails,proto3" json:"trans_details,omitempty"`
	TotalRp      int64                `protobuf:"varint,2,opt,name=total_rp,json=totalRp,proto3" json:"total_rp,omitempty"`
	Limit        int64                `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset       int64                `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Total        int64                `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TransactionResponse) Reset() {
	*x = TransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResponse) ProtoMessage() {}

func (x *TransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResponse.ProtoReflect.Descriptor instead.
func (*TransactionResponse) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{28}
}

func (x *TransactionResponse) GetTransDetails() []*TransactionDetail {
	if x != nil {
		return x.TransDetails
	}
	return nil
}

func (x *TransactionResponse) GetTotalRp() int64 {
	if x != nil {
		return x.TotalRp
	}
	return 0
}

func (x *TransactionResponse) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TransactionResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TransactionResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type IAPSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId          string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreateAtUnix    int64  `protobuf:"varint,3,opt,name=create_at_unix,json=createAtUnix,proto3" json:"create_at_unix,omitempty"`
	TotalTopup      int64  `protobuf:"varint,4,opt,name=total_topup,json=totalTopup,proto3" json:"total_topup,omitempty"`
	VipPoint        int64  `protobuf:"varint,5,opt,name=vip_point,json=vipPoint,proto3" json:"vip_point,omitempty"`
	TotalCashout    int64  `protobuf:"varint,6,opt,name=total_cashout,json=totalCashout,proto3" json:"total_cashout,omitempty"`
	Vip             int64  `protobuf:"varint,7,opt,name=vip,proto3" json:"vip,omitempty"`
	CurrencyTopup   int64  `protobuf:"varint,8,opt,name=currency_topup,json=currencyTopup,proto3" json:"currency_topup,omitempty"`
	CurrencyCashout int64  `protobuf:"varint,9,opt,name=currency_cashout,json=currencyCashout,proto3" json:"currency_cashout,omitempty"`
}

func (x *IAPSummary) Reset() {
	*x = IAPSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IAPSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IAPSummary) ProtoMessage() {}

func (x *IAPSummary) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IAPSummary.ProtoReflect.Descriptor instead.
func (*IAPSummary) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{29}
}

func (x *IAPSummary) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IAPSummary) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IAPSummary) GetCreateAtUnix() int64 {
	if x != nil {
		return x.CreateAtUnix
	}
	return 0
}

func (x *IAPSummary) GetTotalTopup() int64 {
	if x != nil {
		return x.TotalTopup
	}
	return 0
}

func (x *IAPSummary) GetVipPoint() int64 {
	if x != nil {
		return x.VipPoint
	}
	return 0
}

func (x *IAPSummary) GetTotalCashout() int64 {
	if x != nil {
		return x.TotalCashout
	}
	return 0
}

func (x *IAPSummary) GetVip() int64 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *IAPSummary) GetCurrencyTopup() int64 {
	if x != nil {
		return x.CurrencyTopup
	}
	return 0
}

func (x *IAPSummary) GetCurrencyCashout() int64 {
	if x != nil {
		return x.CurrencyCashout
	}
	return 0
}

type CashInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId                  string          `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreateAtUnix            int64           `protobuf:"varint,3,opt,name=create_at_unix,json=createAtUnix,proto3" json:"create_at_unix,omitempty"`
	Chips                   int64           `protobuf:"varint,4,opt,name=chips,proto3" json:"chips,omitempty"`
	VipPoint                int64           `protobuf:"varint,5,opt,name=vip_point,json=vipPoint,proto3" json:"vip_point,omitempty"`
	Publisher               int64           `protobuf:"varint,6,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Currency                int64           `protobuf:"varint,7,opt,name=currency,proto3" json:"currency,omitempty"`
	CurrencyUnitId          int64           `protobuf:"varint,8,opt,name=currency_unit_id,json=currencyUnitId,proto3" json:"currency_unit_id,omitempty"` // vi_vn, en_us follow Locale name standard
	TransId                 string          `protobuf:"bytes,9,opt,name=trans_id,json=transId,proto3" json:"trans_id,omitempty"`
	DateUnix                int64           `protobuf:"varint,10,opt,name=date_unix,json=dateUnix,proto3" json:"date_unix,omitempty"`
	NumTransaction          int64           `protobuf:"varint,11,opt,name=num_transaction,json=numTransaction,proto3" json:"num_transaction,omitempty"`
	CurrencyValue           int64           `protobuf:"varint,12,opt,name=currency_value,json=currencyValue,proto3" json:"currency_value,omitempty"` // 10, 20, 30 ...
	CurrencyUnitName        string          `protobuf:"bytes,13,opt,name=currency_unit_name,json=currencyUnitName,proto3" json:"currency_unit_name,omitempty"`
	NumTransByCurrencyValue map[int64]int64 `protobuf:"bytes,14,rep,name=num_trans_by_currency_value,json=numTransByCurrencyValue,proto3" json:"num_trans_by_currency_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NumAccountUnique        int64           `protobuf:"varint,15,opt,name=num_account_unique,json=numAccountUnique,proto3" json:"num_account_unique,omitempty"`
	NetRev                  int64           `protobuf:"varint,16,opt,name=net_rev,json=netRev,proto3" json:"net_rev,omitempty"`
}

func (x *CashInfo) Reset() {
	*x = CashInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashInfo) ProtoMessage() {}

func (x *CashInfo) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashInfo.ProtoReflect.Descriptor instead.
func (*CashInfo) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{30}
}

func (x *CashInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CashInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CashInfo) GetCreateAtUnix() int64 {
	if x != nil {
		return x.CreateAtUnix
	}
	return 0
}

func (x *CashInfo) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *CashInfo) GetVipPoint() int64 {
	if x != nil {
		return x.VipPoint
	}
	return 0
}

func (x *CashInfo) GetPublisher() int64 {
	if x != nil {
		return x.Publisher
	}
	return 0
}

func (x *CashInfo) GetCurrency() int64 {
	if x != nil {
		return x.Currency
	}
	return 0
}

func (x *CashInfo) GetCurrencyUnitId() int64 {
	if x != nil {
		return x.CurrencyUnitId
	}
	return 0
}

func (x *CashInfo) GetTransId() string {
	if x != nil {
		return x.TransId
	}
	return ""
}

func (x *CashInfo) GetDateUnix() int64 {
	if x != nil {
		return x.DateUnix
	}
	return 0
}

func (x *CashInfo) GetNumTransaction() int64 {
	if x != nil {
		return x.NumTransaction
	}
	return 0
}

func (x *CashInfo) GetCurrencyValue() int64 {
	if x != nil {
		return x.CurrencyValue
	}
	return 0
}

func (x *CashInfo) GetCurrencyUnitName() string {
	if x != nil {
		return x.CurrencyUnitName
	}
	return ""
}

func (x *CashInfo) GetNumTransByCurrencyValue() map[int64]int64 {
	if x != nil {
		return x.NumTransByCurrencyValue
	}
	return nil
}

func (x *CashInfo) GetNumAccountUnique() int64 {
	if x != nil {
		return x.NumAccountUnique
	}
	return 0
}

func (x *CashInfo) GetNetRev() int64 {
	if x != nil {
		return x.NetRev
	}
	return 0
}

type CashInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUnix   int64          `protobuf:"varint,1,opt,name=from_unix,json=fromUnix,proto3" json:"from_unix,omitempty"`
	ToUnix     int64          `protobuf:"varint,2,opt,name=to_unix,json=toUnix,proto3" json:"to_unix,omitempty"`
	Limit      int64          `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int64          `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Publisher  int64          `protobuf:"varint,5,opt,name=publisher,proto3" json:"publisher,omitempty"`
	CurrencyId CurrencyUnitId `protobuf:"varint,6,opt,name=currency_id,json=currencyId,proto3,enum=api.CurrencyUnitId" json:"currency_id,omitempty"`
}

func (x *CashInfoRequest) Reset() {
	*x = CashInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashInfoRequest) ProtoMessage() {}

func (x *CashInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashInfoRequest.ProtoReflect.Descriptor instead.
func (*CashInfoRequest) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{31}
}

func (x *CashInfoRequest) GetFromUnix() int64 {
	if x != nil {
		return x.FromUnix
	}
	return 0
}

func (x *CashInfoRequest) GetToUnix() int64 {
	if x != nil {
		return x.ToUnix
	}
	return 0
}

func (x *CashInfoRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CashInfoRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CashInfoRequest) GetPublisher() int64 {
	if x != nil {
		return x.Publisher
	}
	return 0
}

func (x *CashInfoRequest) GetCurrencyId() CurrencyUnitId {
	if x != nil {
		return x.CurrencyId
	}
	return CurrencyUnitId_CURRENCY_UNIT_ID_UNSPECIFIED
}

type CashInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CashoutInfos []*CashInfo `protobuf:"bytes,1,rep,name=cashout_infos,json=cashoutInfos,proto3" json:"cashout_infos,omitempty"`
	TotalCash    int64       `protobuf:"varint,2,opt,name=total_cash,json=totalCash,proto3" json:"total_cash,omitempty"`
	TotalAccount int64       `protobuf:"varint,3,opt,name=total_account,json=totalAccount,proto3" json:"total_account,omitempty"`
	AvgCash      int64       `protobuf:"varint,4,opt,name=avg_cash,json=avgCash,proto3" json:"avg_cash,omitempty"`
	TotalRev     int64       `protobuf:"varint,5,opt,name=total_rev,json=totalRev,proto3" json:"total_rev,omitempty"`
	AvgRev       int64       `protobuf:"varint,6,opt,name=avg_rev,json=avgRev,proto3" json:"avg_rev,omitempty"`
}

func (x *CashInfoResponse) Reset() {
	*x = CashInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashInfoResponse) ProtoMessage() {}

func (x *CashInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashInfoResponse.ProtoReflect.Descriptor instead.
func (*CashInfoResponse) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{32}
}

func (x *CashInfoResponse) GetCashoutInfos() []*CashInfo {
	if x != nil {
		return x.CashoutInfos
	}
	return nil
}

func (x *CashInfoResponse) GetTotalCash() int64 {
	if x != nil {
		return x.TotalCash
	}
	return 0
}

func (x *CashInfoResponse) GetTotalAccount() int64 {
	if x != nil {
		return x.TotalAccount
	}
	return 0
}

func (x *CashInfoResponse) GetAvgCash() int64 {
	if x != nil {
		return x.AvgCash
	}
	return 0
}

func (x *CashInfoResponse) GetTotalRev() int64 {
	if x != nil {
		return x.TotalRev
	}
	return 0
}

func (x *CashInfoResponse) GetAvgRev() int64 {
	if x != nil {
		return x.AvgRev
	}
	return 0
}

type UserGameCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateUnix  int64 `protobuf:"varint,1,opt,name=date_unix,json=dateUnix,proto3" json:"date_unix,omitempty"`
	CountGame int64 `protobuf:"varint,2,opt,name=count_game,json=countGame,proto3" json:"count_game,omitempty"`
}

func (x *UserGameCount) Reset() {
	*x = UserGameCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGameCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGameCount) ProtoMessage() {}

func (x *UserGameCount) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGameCount.ProtoReflect.Descriptor instead.
func (*UserGameCount) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{33}
}

func (x *UserGameCount) GetDateUnix() int64 {
	if x != nil {
		return x.DateUnix
	}
	return 0
}

func (x *UserGameCount) GetCountGame() int64 {
	if x != nil {
		return x.CountGame
	}
	return 0
}

type UserGameStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GameNo         int64            `protobuf:"varint,2,opt,name=game_no,json=gameNo,proto3" json:"game_no,omitempty"`
	UserGameCounts []*UserGameCount `protobuf:"bytes,3,rep,name=user_game_counts,json=userGameCounts,proto3" json:"user_game_counts,omitempty"`
}

func (x *UserGameStats) Reset() {
	*x = UserGameStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGameStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGameStats) ProtoMessage() {}

func (x *UserGameStats) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGameStats.ProtoReflect.Descriptor instead.
func (*UserGameStats) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{34}
}

func (x *UserGameStats) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserGameStats) GetGameNo() int64 {
	if x != nil {
		return x.GameNo
	}
	return 0
}

func (x *UserGameStats) GetUserGameCounts() []*UserGameCount {
	if x != nil {
		return x.UserGameCounts
	}
	return nil
}

type PaymentByVip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vip        int64 `protobuf:"varint,1,opt,name=vip,proto3" json:"vip,omitempty"`
	Ci         int64 `protobuf:"varint,2,opt,name=ci,proto3" json:"ci,omitempty"`
	Chips      int64 `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`
	NumTrans   int64 `protobuf:"varint,4,opt,name=num_trans,json=numTrans,proto3" json:"num_trans,omitempty"`
	NumAccount int64 `protobuf:"varint,5,opt,name=num_account,json=numAccount,proto3" json:"num_account,omitempty"`
}

func (x *PaymentByVip) Reset() {
	*x = PaymentByVip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentByVip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentByVip) ProtoMessage() {}

func (x *PaymentByVip) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentByVip.ProtoReflect.Descriptor instead.
func (*PaymentByVip) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{35}
}

func (x *PaymentByVip) GetVip() int64 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *PaymentByVip) GetCi() int64 {
	if x != nil {
		return x.Ci
	}
	return 0
}

func (x *PaymentByVip) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *PaymentByVip) GetNumTrans() int64 {
	if x != nil {
		return x.NumTrans
	}
	return 0
}

func (x *PaymentByVip) GetNumAccount() int64 {
	if x != nil {
		return x.NumAccount
	}
	return 0
}

type PaymentsByVip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payments []*PaymentByVip `protobuf:"bytes,1,rep,name=payments,proto3" json:"payments,omitempty"`
	FromUnix int64           `protobuf:"varint,2,opt,name=from_unix,json=fromUnix,proto3" json:"from_unix,omitempty"`
	ToUnix   int64           `protobuf:"varint,3,opt,name=to_unix,json=toUnix,proto3" json:"to_unix,omitempty"`
}

func (x *PaymentsByVip) Reset() {
	*x = PaymentsByVip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentsByVip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentsByVip) ProtoMessage() {}

func (x *PaymentsByVip) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentsByVip.ProtoReflect.Descriptor instead.
func (*PaymentsByVip) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{36}
}

func (x *PaymentsByVip) GetPayments() []*PaymentByVip {
	if x != nil {
		return x.Payments
	}
	return nil
}

func (x *PaymentsByVip) GetFromUnix() int64 {
	if x != nil {
		return x.FromUnix
	}
	return 0
}

func (x *PaymentsByVip) GetToUnix() int64 {
	if x != nil {
		return x.ToUnix
	}
	return 0
}

type CashoutByVip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vip        int64 `protobuf:"varint,1,opt,name=vip,proto3" json:"vip,omitempty"`
	Co         int64 `protobuf:"varint,2,opt,name=co,proto3" json:"co,omitempty"`
	Chips      int64 `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`
	NumTrans   int64 `protobuf:"varint,4,opt,name=num_trans,json=numTrans,proto3" json:"num_trans,omitempty"`
	NumAccount int64 `protobuf:"varint,5,opt,name=num_account,json=numAccount,proto3" json:"num_account,omitempty"`
}

func (x *CashoutByVip) Reset() {
	*x = CashoutByVip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashoutByVip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashoutByVip) ProtoMessage() {}

func (x *CashoutByVip) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashoutByVip.ProtoReflect.Descriptor instead.
func (*CashoutByVip) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{37}
}

func (x *CashoutByVip) GetVip() int64 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *CashoutByVip) GetCo() int64 {
	if x != nil {
		return x.Co
	}
	return 0
}

func (x *CashoutByVip) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *CashoutByVip) GetNumTrans() int64 {
	if x != nil {
		return x.NumTrans
	}
	return 0
}

func (x *CashoutByVip) GetNumAccount() int64 {
	if x != nil {
		return x.NumAccount
	}
	return 0
}

type CashoutsByVip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cashouts []*CashoutByVip `protobuf:"bytes,1,rep,name=cashouts,proto3" json:"cashouts,omitempty"`
	FromUnix int64           `protobuf:"varint,2,opt,name=from_unix,json=fromUnix,proto3" json:"from_unix,omitempty"`
	ToUnix   int64           `protobuf:"varint,3,opt,name=to_unix,json=toUnix,proto3" json:"to_unix,omitempty"`
}

func (x *CashoutsByVip) Reset() {
	*x = CashoutsByVip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashoutsByVip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashoutsByVip) ProtoMessage() {}

func (x *CashoutsByVip) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashoutsByVip.ProtoReflect.Descriptor instead.
func (*CashoutsByVip) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{38}
}

func (x *CashoutsByVip) GetCashouts() []*CashoutByVip {
	if x != nil {
		return x.Cashouts
	}
	return nil
}

func (x *CashoutsByVip) GetFromUnix() int64 {
	if x != nil {
		return x.FromUnix
	}
	return 0
}

func (x *CashoutsByVip) GetToUnix() int64 {
	if x != nil {
		return x.ToUnix
	}
	return 0
}

var File_operation_proto protoreflect.FileDescriptor

var file_operation_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x03, 0x0a, 0x08, 0x4f, 0x70, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6e, 0x6f, 0x42, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x5f, 0x77, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x57, 0x69, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6e, 0x6f, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x77,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x69, 0x70, 0x57, 0x69,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x68, 0x69, 0x70, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x63, 0x62, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x63, 0x62,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x0f,
	0x4f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x0a, 0x6f, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x09, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x77, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68,
	0x69, 0x70, 0x57, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x4c, 0x6f, 0x73, 0x74, 0x22, 0xca, 0x02,
	0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6d, 0x63, 0x62, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x63, 0x68, 0x69, 0x70, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x55, 0x6e,
	0x69, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x69, 0x70, 0x57, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x70, 0x4c, 0x6f, 0x73, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x6e,
	0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x78,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x53, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x90, 0x01,
	0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x6f, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x68, 0x69, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x68, 0x69, 0x70, 0x41, 0x64, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69,
	0x64, 0x22, 0xa4, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x62, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6d, 0x63, 0x62, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x70, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x69, 0x70, 0x46,
	0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x08, 0x4f, 0x70, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe6, 0x01, 0x0a, 0x0d, 0x47, 0x6f, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x78, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x70, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x67, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x67, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x22, 0x7a,
	0x0a, 0x14, 0x47, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55,
	0x6e, 0x69, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x15, 0x47,
	0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x0e, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe2, 0x05, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x69, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x68, 0x69, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x57, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70,
	0x4c, 0x6f, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x68, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x63,
	0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x63, 0x76, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x33, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x33, 0x64, 0x12, 0x34, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68,
	0x69, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x33, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x33, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x75,
	0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x75, 0x63, 0x6b, 0x12, 0x31,
	0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x78, 0x12, 0x51, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x15, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x63, 0x68, 0x69,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x47, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x76, 0x43, 0x68,
	0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x68, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x6e,
	0x64, 0x43, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f,
	0x75, 0x6e, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x6e,
	0x69, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x57, 0x69, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68,
	0x69, 0x70, 0x4c, 0x6f, 0x73, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x63, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x76, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x68, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x68, 0x69, 0x70, 0x22, 0x6a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x22,
	0xca, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0xc3, 0x01, 0x0a,
	0x07, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x63, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x63, 0x69, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x63, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63,
	0x6f, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x75, 0x63, 0x6b, 0x79,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x69, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75,
	0x74, 0x12, 0x28, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75,
	0x74, 0x52, 0x08, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x6e, 0x69,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xde, 0x03, 0x0a, 0x03, 0x56, 0x69, 0x70, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x63, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x68, 0x69, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x78, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x63, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x63, 0x69, 0x12, 0x0e, 0x0a, 0x02,
	0x63, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x63, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x32, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x69, 0x32, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x32, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x32, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x75, 0x63,
	0x6b, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x69, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x56, 0x69,
	0x70, 0x12, 0x1c, 0x0a, 0x04, 0x76, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x69, 0x70, 0x52, 0x04, 0x76, 0x69, 0x70, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x6f, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x81, 0x02, 0x0a, 0x03, 0x57, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x76, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x61, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x5f, 0x77,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x67, 0x57, 0x69, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x63, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x63, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x63, 0x69, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x63, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x75, 0x63, 0x6b,
	0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x06, 0x54, 0x6f, 0x70,
	0x57, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69, 0x6e, 0x52, 0x04, 0x77, 0x69, 0x6e,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22,
	0x84, 0x02, 0x0a, 0x04, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x67, 0x6f, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x61, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x67, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x67, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x63, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x63, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x63, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x63, 0x69, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x63, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c,
	0x75, 0x63, 0x6b, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x69, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x07, 0x54, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x6c, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x78,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x78,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x69, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x72, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x72, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x70, 0x73, 0x54, 0x6f, 0x70, 0x75, 0x70,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x78, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa2, 0x02, 0x0a, 0x0a, 0x49, 0x41, 0x50, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x6f, 0x70, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x70, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x76, 0x69, 0x70, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x73,
	0x68, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x6f, 0x70, 0x75,
	0x70, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x61,
	0x73, 0x68, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x22, 0xa3, 0x05, 0x0a,
	0x08, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x69, 0x70, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x76, 0x69, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x75, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6e, 0x65, 0x74, 0x52, 0x65, 0x76, 0x1a, 0x4a, 0x0a, 0x1c, 0x4e, 0x75, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55,
	0x6e, 0x69, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x22, 0xdb,
	0x01, 0x0a, 0x10, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x61, 0x73, 0x68, 0x6f,
	0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x76, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x76, 0x67, 0x43, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x76, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x76, 0x67, 0x52, 0x65, 0x76, 0x22, 0x4b, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x0d, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x12, 0x3c, 0x0a, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x56, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x63, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x63, 0x69, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68,
	0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x74, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x56,
	0x69, 0x70, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x56, 0x69, 0x70, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x78, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x73, 0x68,
	0x6f, 0x75, 0x74, 0x42, 0x79, 0x56, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x63, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74,
	0x0a, 0x0d, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x79, 0x56, 0x69, 0x70, 0x12,
	0x2d, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x42,
	0x79, 0x56, 0x69, 0x70, 0x52, 0x08, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f,
	0x55, 0x6e, 0x69, 0x78, 0x2a, 0x4b, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x56, 0x4e, 0x10,
	0x01, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x69, 0x61, 0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x67, 0x62, 0x2d, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_operation_proto_rawDescOnce sync.Once
	file_operation_proto_rawDescData = file_operation_proto_rawDesc
)

func file_operation_proto_rawDescGZIP() []byte {
	file_operation_proto_rawDescOnce.Do(func() {
		file_operation_proto_rawDescData = protoimpl.X.CompressGZIP(file_operation_proto_rawDescData)
	})
	return file_operation_proto_rawDescData
}

var file_operation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_operation_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_operation_proto_goTypes = []interface{}{
	(CurrencyUnitId)(0),           // 0: api.CurrencyUnitId
	(*OpPlayer)(nil),              // 1: api.OpPlayer
	(*OpPlayerRequest)(nil),       // 2: api.OpPlayerRequest
	(*OpPlayerResponse)(nil),      // 3: api.OpPlayerResponse
	(*MatchDetail)(nil),           // 4: api.MatchDetail
	(*MatchDetailRequest)(nil),    // 5: api.MatchDetailRequest
	(*MatchDetailResponse)(nil),   // 6: api.MatchDetailResponse
	(*PlayerData)(nil),            // 7: api.PlayerData
	(*MatchData)(nil),             // 8: api.MatchData
	(*OpReport)(nil),              // 9: api.OpReport
	(*GoldStatistic)(nil),         // 10: api.GoldStatistic
	(*GoldStatisticRequest)(nil),  // 11: api.GoldStatisticRequest
	(*GoldStatisticResponse)(nil), // 12: api.GoldStatisticResponse
	(*UserStatistic)(nil),         // 13: api.UserStatistic
	(*UserStatisticRequest)(nil),  // 14: api.UserStatisticRequest
	(*UserStatGameHistory)(nil),   // 15: api.UserStatGameHistory
	(*UserTransferGoldStat)(nil),  // 16: api.UserTransferGoldStat
	(*UserInfo)(nil),              // 17: api.UserInfo
	(*UserInfoResponse)(nil),      // 18: api.UserInfoResponse
	(*CashOut)(nil),               // 19: api.CashOut
	(*TopCashOut)(nil),            // 20: api.TopCashOut
	(*Vip)(nil),                   // 21: api.Vip
	(*TopVip)(nil),                // 22: api.TopVip
	(*Win)(nil),                   // 23: api.Win
	(*TopWin)(nil),                // 24: api.TopWin
	(*Lost)(nil),                  // 25: api.Lost
	(*TopLost)(nil),               // 26: api.TopLost
	(*TransactionRequest)(nil),    // 27: api.TransactionRequest
	(*TransactionDetail)(nil),     // 28: api.TransactionDetail
	(*TransactionResponse)(nil),   // 29: api.TransactionResponse
	(*IAPSummary)(nil),            // 30: api.IAPSummary
	(*CashInfo)(nil),              // 31: api.CashInfo
	(*CashInfoRequest)(nil),       // 32: api.CashInfoRequest
	(*CashInfoResponse)(nil),      // 33: api.CashInfoResponse
	(*UserGameCount)(nil),         // 34: api.UserGameCount
	(*UserGameStats)(nil),         // 35: api.UserGameStats
	(*PaymentByVip)(nil),          // 36: api.PaymentByVip
	(*PaymentsByVip)(nil),         // 37: api.PaymentsByVip
	(*CashoutByVip)(nil),          // 38: api.CashoutByVip
	(*CashoutsByVip)(nil),         // 39: api.CashoutsByVip
	nil,                           // 40: api.CashInfo.NumTransByCurrencyValueEntry
	(*Profile)(nil),               // 41: api.Profile
}
var file_operation_proto_depIdxs = []int32{
	1,  // 0: api.OpPlayerResponse.op_players:type_name -> api.OpPlayer
	4,  // 1: api.MatchDetailResponse.match_details:type_name -> api.MatchDetail
	7,  // 2: api.OpReport.player_data:type_name -> api.PlayerData
	8,  // 3: api.OpReport.match_data:type_name -> api.MatchData
	8,  // 4: api.GoldStatistic.match_data:type_name -> api.MatchData
	10, // 5: api.GoldStatisticResponse.gold_statistics:type_name -> api.GoldStatistic
	15, // 6: api.UserStatistic.user_stat_game_histories:type_name -> api.UserStatGameHistory
	16, // 7: api.UserStatistic.recv_chip_stats:type_name -> api.UserTransferGoldStat
	16, // 8: api.UserStatistic.send_chip_stats:type_name -> api.UserTransferGoldStat
	41, // 9: api.UserInfo.profile:type_name -> api.Profile
	17, // 10: api.UserInfoResponse.user_infos:type_name -> api.UserInfo
	19, // 11: api.TopCashOut.cashouts:type_name -> api.CashOut
	21, // 12: api.TopVip.vips:type_name -> api.Vip
	23, // 13: api.TopWin.wins:type_name -> api.Win
	25, // 14: api.TopLost.losts:type_name -> api.Lost
	28, // 15: api.TransactionResponse.trans_details:type_name -> api.TransactionDetail
	40, // 16: api.CashInfo.num_trans_by_currency_value:type_name -> api.CashInfo.NumTransByCurrencyValueEntry
	0,  // 17: api.CashInfoRequest.currency_id:type_name -> api.CurrencyUnitId
	31, // 18: api.CashInfoResponse.cashout_infos:type_name -> api.CashInfo
	34, // 19: api.UserGameStats.user_game_counts:type_name -> api.UserGameCount
	36, // 20: api.PaymentsByVip.payments:type_name -> api.PaymentByVip
	38, // 21: api.CashoutsByVip.cashouts:type_name -> api.CashoutByVip
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_operation_proto_init() }
func file_operation_proto_init() {
	if File_operation_proto != nil {
		return
	}
	file_auth_api_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_operation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpPlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoldStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoldStatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoldStatisticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatGameHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTransferGoldStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopCashOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopVip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Win); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopWin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopLost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IAPSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGameCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGameStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentByVip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentsByVip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashoutByVip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashoutsByVip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_operation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_operation_proto_goTypes,
		DependencyIndexes: file_operation_proto_depIdxs,
		EnumInfos:         file_operation_proto_enumTypes,
		MessageInfos:      file_operation_proto_msgTypes,
	}.Build()
	File_operation_proto = out.File
	file_operation_proto_rawDesc = nil
	file_operation_proto_goTypes = nil
	file_operation_proto_depIdxs = nil
}
