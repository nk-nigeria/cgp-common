// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: bandarqq_api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QQBetCell int32

const (
	QQBetCell_RED       QQBetCell = 0
	QQBetCell_RED_TWIN  QQBetCell = 1
	QQBetCell_RED_QIU   QQBetCell = 2
	QQBetCell_BLUE      QQBetCell = 3
	QQBetCell_BLUE_TWIN QQBetCell = 4
	QQBetCell_BLUE_QIU  QQBetCell = 5
	QQBetCell_DRAW      QQBetCell = 6
	QQBetCell_QIU_QIU   QQBetCell = 7
	QQBetCell_SIX_TWINS QQBetCell = 8
)

// Enum value maps for QQBetCell.
var (
	QQBetCell_name = map[int32]string{
		0: "RED",
		1: "RED_TWIN",
		2: "RED_QIU",
		3: "BLUE",
		4: "BLUE_TWIN",
		5: "BLUE_QIU",
		6: "DRAW",
		7: "QIU_QIU",
		8: "SIX_TWINS",
	}
	QQBetCell_value = map[string]int32{
		"RED":       0,
		"RED_TWIN":  1,
		"RED_QIU":   2,
		"BLUE":      3,
		"BLUE_TWIN": 4,
		"BLUE_QIU":  5,
		"DRAW":      6,
		"QIU_QIU":   7,
		"SIX_TWINS": 8,
	}
)

func (x QQBetCell) Enum() *QQBetCell {
	p := new(QQBetCell)
	*p = x
	return p
}

func (x QQBetCell) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QQBetCell) Descriptor() protoreflect.EnumDescriptor {
	return file_bandarqq_api_proto_enumTypes[0].Descriptor()
}

func (QQBetCell) Type() protoreflect.EnumType {
	return &file_bandarqq_api_proto_enumTypes[0]
}

func (x QQBetCell) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QQBetCell.Descriptor instead.
func (QQBetCell) EnumDescriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{0}
}

type QQHandType int32

const (
	QQHandType_NORMAL QQHandType = 0
	QQHandType_QIU    QQHandType = 1
	QQHandType_SIX    QQHandType = 2
	QQHandType_TWIN   QQHandType = 3
)

// Enum value maps for QQHandType.
var (
	QQHandType_name = map[int32]string{
		0: "NORMAL",
		1: "QIU",
		2: "SIX",
		3: "TWIN",
	}
	QQHandType_value = map[string]int32{
		"NORMAL": 0,
		"QIU":    1,
		"SIX":    2,
		"TWIN":   3,
	}
)

func (x QQHandType) Enum() *QQHandType {
	p := new(QQHandType)
	*p = x
	return p
}

func (x QQHandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QQHandType) Descriptor() protoreflect.EnumDescriptor {
	return file_bandarqq_api_proto_enumTypes[1].Descriptor()
}

func (QQHandType) Type() protoreflect.EnumType {
	return &file_bandarqq_api_proto_enumTypes[1]
}

func (x QQHandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QQHandType.Descriptor instead.
func (QQHandType) EnumDescriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{1}
}

type Domino struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top    int32 `protobuf:"varint,1,opt,name=top,proto3" json:"top,omitempty"`
	Bottom int32 `protobuf:"varint,2,opt,name=bottom,proto3" json:"bottom,omitempty"`
	Total  int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Domino) Reset() {
	*x = Domino{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandarqq_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Domino) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Domino) ProtoMessage() {}

func (x *Domino) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Domino.ProtoReflect.Descriptor instead.
func (*Domino) Descriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{0}
}

func (x *Domino) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *Domino) GetBottom() int32 {
	if x != nil {
		return x.Bottom
	}
	return 0
}

func (x *Domino) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QQBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string    `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Chips  int64     `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	Cell   QQBetCell `protobuf:"varint,3,opt,name=cell,proto3,enum=api.QQBetCell" json:"cell,omitempty"`
}

func (x *QQBet) Reset() {
	*x = QQBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandarqq_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQBet) ProtoMessage() {}

func (x *QQBet) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQBet.ProtoReflect.Descriptor instead.
func (*QQBet) Descriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{1}
}

func (x *QQBet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *QQBet) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *QQBet) GetCell() QQBetCell {
	if x != nil {
		return x.Cell
	}
	return QQBetCell_RED
}

// message from client to server indicate user placing bet
type QQPlayerBets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Bets   []*QQBet `protobuf:"bytes,2,rep,name=bets,proto3" json:"bets,omitempty"`
}

func (x *QQPlayerBets) Reset() {
	*x = QQPlayerBets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandarqq_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQPlayerBets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQPlayerBets) ProtoMessage() {}

func (x *QQPlayerBets) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQPlayerBets.ProtoReflect.Descriptor instead.
func (*QQPlayerBets) Descriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{2}
}

func (x *QQPlayerBets) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *QQPlayerBets) GetBets() []*QQBet {
	if x != nil {
		return x.Bets
	}
	return nil
}

// endgame result for 1 player
// win_bets contains the bets in the cell that player win
// chip is amount of win chip, if it's negative then player lost that game
type QQPlayerBetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WinBets []*QQBet `protobuf:"bytes,2,rep,name=win_bets,json=winBets,proto3" json:"win_bets,omitempty"`
	Chip    int64    `protobuf:"varint,3,opt,name=chip,proto3" json:"chip,omitempty"`
}

func (x *QQPlayerBetResult) Reset() {
	*x = QQPlayerBetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandarqq_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQPlayerBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQPlayerBetResult) ProtoMessage() {}

func (x *QQPlayerBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQPlayerBetResult.ProtoReflect.Descriptor instead.
func (*QQPlayerBetResult) Descriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{3}
}

func (x *QQPlayerBetResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *QQPlayerBetResult) GetWinBets() []*QQBet {
	if x != nil {
		return x.WinBets
	}
	return nil
}

func (x *QQPlayerBetResult) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

// endgame result for all user playing in that game
type QQListPlayerBetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*QQPlayerBetResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *QQListPlayerBetResult) Reset() {
	*x = QQListPlayerBetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandarqq_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQListPlayerBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQListPlayerBetResult) ProtoMessage() {}

func (x *QQListPlayerBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQListPlayerBetResult.ProtoReflect.Descriptor instead.
func (*QQListPlayerBetResult) Descriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{4}
}

func (x *QQListPlayerBetResult) GetResults() []*QQPlayerBetResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// info of 1 hand
type Hand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dominos []*Domino  `protobuf:"bytes,1,rep,name=dominos,proto3" json:"dominos,omitempty"`
	Type    QQHandType `protobuf:"varint,2,opt,name=type,proto3,enum=api.QQHandType" json:"type,omitempty"`
}

func (x *Hand) Reset() {
	*x = Hand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandarqq_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hand) ProtoMessage() {}

func (x *Hand) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hand.ProtoReflect.Descriptor instead.
func (*Hand) Descriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{5}
}

func (x *Hand) GetDominos() []*Domino {
	if x != nil {
		return x.Dominos
	}
	return nil
}

func (x *Hand) GetType() QQHandType {
	if x != nil {
		return x.Type
	}
	return QQHandType_NORMAL
}

// message from server to client when the game end
// red's and blue's hand
// win_cells is list of winning cells
type QQGameFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedHand  *Hand                  `protobuf:"bytes,1,opt,name=red_hand,json=redHand,proto3" json:"red_hand,omitempty"`
	BlueHand *Hand                  `protobuf:"bytes,2,opt,name=blue_hand,json=blueHand,proto3" json:"blue_hand,omitempty"`
	WinCells QQBetCell              `protobuf:"varint,3,opt,name=win_cells,json=winCells,proto3,enum=api.QQBetCell" json:"win_cells,omitempty"`
	Result   *QQListPlayerBetResult `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *QQGameFinish) Reset() {
	*x = QQGameFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandarqq_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQGameFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQGameFinish) ProtoMessage() {}

func (x *QQGameFinish) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQGameFinish.ProtoReflect.Descriptor instead.
func (*QQGameFinish) Descriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{6}
}

func (x *QQGameFinish) GetRedHand() *Hand {
	if x != nil {
		return x.RedHand
	}
	return nil
}

func (x *QQGameFinish) GetBlueHand() *Hand {
	if x != nil {
		return x.BlueHand
	}
	return nil
}

func (x *QQGameFinish) GetWinCells() QQBetCell {
	if x != nil {
		return x.WinCells
	}
	return QQBetCell_RED
}

func (x *QQGameFinish) GetResult() *QQListPlayerBetResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type QQHistoryHand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedHand  *Hand `protobuf:"bytes,1,opt,name=red_hand,json=redHand,proto3" json:"red_hand,omitempty"`
	BlueHand *Hand `protobuf:"bytes,2,opt,name=blue_hand,json=blueHand,proto3" json:"blue_hand,omitempty"`
}

func (x *QQHistoryHand) Reset() {
	*x = QQHistoryHand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandarqq_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQHistoryHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQHistoryHand) ProtoMessage() {}

func (x *QQHistoryHand) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQHistoryHand.ProtoReflect.Descriptor instead.
func (*QQHistoryHand) Descriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{7}
}

func (x *QQHistoryHand) GetRedHand() *Hand {
	if x != nil {
		return x.RedHand
	}
	return nil
}

func (x *QQHistoryHand) GetBlueHand() *Hand {
	if x != nil {
		return x.BlueHand
	}
	return nil
}

// game history of prev hands
type QQHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandHistory []*QQHistoryHand `protobuf:"bytes,1,rep,name=hand_history,json=handHistory,proto3" json:"hand_history,omitempty"`
}

func (x *QQHistory) Reset() {
	*x = QQHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandarqq_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQHistory) ProtoMessage() {}

func (x *QQHistory) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQHistory.ProtoReflect.Descriptor instead.
func (*QQHistory) Descriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{8}
}

func (x *QQHistory) GetHandHistory() []*QQHistoryHand {
	if x != nil {
		return x.HandHistory
	}
	return nil
}

// amount and number of user placed bet in a cell
type QQDeskCellBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cell     QQBetCell `protobuf:"varint,1,opt,name=cell,proto3,enum=api.QQBetCell" json:"cell,omitempty"`
	Chips    int64     `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	NUserBet int32     `protobuf:"varint,3,opt,name=n_user_bet,json=nUserBet,proto3" json:"n_user_bet,omitempty"`
}

func (x *QQDeskCellBet) Reset() {
	*x = QQDeskCellBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandarqq_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQDeskCellBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQDeskCellBet) ProtoMessage() {}

func (x *QQDeskCellBet) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQDeskCellBet.ProtoReflect.Descriptor instead.
func (*QQDeskCellBet) Descriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{9}
}

func (x *QQDeskCellBet) GetCell() QQBetCell {
	if x != nil {
		return x.Cell
	}
	return QQBetCell_RED
}

func (x *QQDeskCellBet) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *QQDeskCellBet) GetNUserBet() int32 {
	if x != nil {
		return x.NUserBet
	}
	return 0
}

type QQDeskListCellBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListCellBet []*QQDeskCellBet `protobuf:"bytes,1,rep,name=list_cell_bet,json=listCellBet,proto3" json:"list_cell_bet,omitempty"`
}

func (x *QQDeskListCellBet) Reset() {
	*x = QQDeskListCellBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandarqq_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQDeskListCellBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQDeskListCellBet) ProtoMessage() {}

func (x *QQDeskListCellBet) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQDeskListCellBet.ProtoReflect.Descriptor instead.
func (*QQDeskListCellBet) Descriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{10}
}

func (x *QQDeskListCellBet) GetListCellBet() []*QQDeskCellBet {
	if x != nil {
		return x.ListCellBet
	}
	return nil
}

// message from server to client
// indicate changing in desk status
// - num of playing
// - acknowledge user bet -> update_user_bets=true
// - update total bet in each cell by all of the users -> update_cell_bets=true
// - update game history -> update_game_history=true
type QQUpdateDesk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NPlayers          int32                `protobuf:"varint,1,opt,name=n_players,json=nPlayers,proto3" json:"n_players,omitempty"`
	UpdateUserBets    bool                 `protobuf:"varint,2,opt,name=update_user_bets,json=updateUserBets,proto3" json:"update_user_bets,omitempty"`
	UpdateCellBets    bool                 `protobuf:"varint,3,opt,name=update_cell_bets,json=updateCellBets,proto3" json:"update_cell_bets,omitempty"`
	UpdateGameHistory bool                 `protobuf:"varint,4,opt,name=update_game_history,json=updateGameHistory,proto3" json:"update_game_history,omitempty"`
	PlayerListBet     []*QQPlayerBets      `protobuf:"bytes,5,rep,name=player_list_bet,json=playerListBet,proto3" json:"player_list_bet,omitempty"`
	ListCellBet       []*QQDeskListCellBet `protobuf:"bytes,6,rep,name=list_cell_bet,json=listCellBet,proto3" json:"list_cell_bet,omitempty"`
	History           *QQHistory           `protobuf:"bytes,7,opt,name=history,proto3" json:"history,omitempty"`
}

func (x *QQUpdateDesk) Reset() {
	*x = QQUpdateDesk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bandarqq_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQUpdateDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQUpdateDesk) ProtoMessage() {}

func (x *QQUpdateDesk) ProtoReflect() protoreflect.Message {
	mi := &file_bandarqq_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQUpdateDesk.ProtoReflect.Descriptor instead.
func (*QQUpdateDesk) Descriptor() ([]byte, []int) {
	return file_bandarqq_api_proto_rawDescGZIP(), []int{11}
}

func (x *QQUpdateDesk) GetNPlayers() int32 {
	if x != nil {
		return x.NPlayers
	}
	return 0
}

func (x *QQUpdateDesk) GetUpdateUserBets() bool {
	if x != nil {
		return x.UpdateUserBets
	}
	return false
}

func (x *QQUpdateDesk) GetUpdateCellBets() bool {
	if x != nil {
		return x.UpdateCellBets
	}
	return false
}

func (x *QQUpdateDesk) GetUpdateGameHistory() bool {
	if x != nil {
		return x.UpdateGameHistory
	}
	return false
}

func (x *QQUpdateDesk) GetPlayerListBet() []*QQPlayerBets {
	if x != nil {
		return x.PlayerListBet
	}
	return nil
}

func (x *QQUpdateDesk) GetListCellBet() []*QQDeskListCellBet {
	if x != nil {
		return x.ListCellBet
	}
	return nil
}

func (x *QQUpdateDesk) GetHistory() *QQHistory {
	if x != nil {
		return x.History
	}
	return nil
}

var File_bandarqq_api_proto protoreflect.FileDescriptor

var file_bandarqq_api_proto_rawDesc = []byte{
	0x0a, 0x12, 0x62, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x71, 0x71, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x48, 0x0a, 0x06, 0x44, 0x6f, 0x6d,
	0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x05, 0x51, 0x51, 0x42, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x63,
	0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x51, 0x51, 0x42, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x22,
	0x47, 0x0a, 0x0c, 0x51, 0x51, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x51, 0x42,
	0x65, 0x74, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x11, 0x51, 0x51, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x62, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51,
	0x51, 0x42, 0x65, 0x74, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x68, 0x69,
	0x70, 0x22, 0x49, 0x0a, 0x15, 0x51, 0x51, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x51, 0x51, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x04,
	0x48, 0x61, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x6d, 0x69,
	0x6e, 0x6f, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x51, 0x51, 0x48, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x51, 0x51, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x12, 0x24, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x62, 0x6c, 0x75, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x12,
	0x2b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x51, 0x42, 0x65, 0x74, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x51, 0x51, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x5d, 0x0a, 0x0d, 0x51, 0x51, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x61, 0x6e,
	0x64, 0x12, 0x24, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x62, 0x6c, 0x75, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x22,
	0x42, 0x0a, 0x09, 0x51, 0x51, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x0c,
	0x68, 0x61, 0x6e, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x51, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x22, 0x67, 0x0a, 0x0d, 0x51, 0x51, 0x44, 0x65, 0x73, 0x6b, 0x43, 0x65, 0x6c,
	0x6c, 0x42, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x51, 0x42, 0x65, 0x74, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1c,
	0x0a, 0x0a, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x22, 0x4b, 0x0a, 0x11,
	0x51, 0x51, 0x44, 0x65, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x65,
	0x74, 0x12, 0x36, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x62,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51,
	0x51, 0x44, 0x65, 0x73, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x65, 0x74, 0x52, 0x0b, 0x6c, 0x69,
	0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x65, 0x74, 0x22, 0xd0, 0x02, 0x0a, 0x0c, 0x51, 0x51,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x62, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x51, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x73, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x51, 0x51, 0x44, 0x65, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65,
	0x6c, 0x6c, 0x42, 0x65, 0x74, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x42,
	0x65, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x51, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2a, 0x7c, 0x0a, 0x09,
	0x51, 0x51, 0x42, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x44, 0x5f, 0x54, 0x57, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x44, 0x5f, 0x51, 0x49, 0x55, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4c, 0x55, 0x45, 0x5f,
	0x54, 0x57, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x51,
	0x49, 0x55, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x41, 0x57, 0x10, 0x06, 0x12, 0x0b,
	0x0a, 0x07, 0x51, 0x49, 0x55, 0x5f, 0x51, 0x49, 0x55, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x49, 0x58, 0x5f, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x10, 0x08, 0x2a, 0x34, 0x0a, 0x0a, 0x51, 0x51,
	0x48, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x51, 0x49, 0x55, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x49, 0x58, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x57, 0x49, 0x4e, 0x10, 0x03,
	0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x69, 0x61, 0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x67, 0x70, 0x2d, 0x62, 0x69, 0x6e, 0x67, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_bandarqq_api_proto_rawDescOnce sync.Once
	file_bandarqq_api_proto_rawDescData = file_bandarqq_api_proto_rawDesc
)

func file_bandarqq_api_proto_rawDescGZIP() []byte {
	file_bandarqq_api_proto_rawDescOnce.Do(func() {
		file_bandarqq_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_bandarqq_api_proto_rawDescData)
	})
	return file_bandarqq_api_proto_rawDescData
}

var file_bandarqq_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bandarqq_api_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_bandarqq_api_proto_goTypes = []interface{}{
	(QQBetCell)(0),                // 0: api.QQBetCell
	(QQHandType)(0),               // 1: api.QQHandType
	(*Domino)(nil),                // 2: api.Domino
	(*QQBet)(nil),                 // 3: api.QQBet
	(*QQPlayerBets)(nil),          // 4: api.QQPlayerBets
	(*QQPlayerBetResult)(nil),     // 5: api.QQPlayerBetResult
	(*QQListPlayerBetResult)(nil), // 6: api.QQListPlayerBetResult
	(*Hand)(nil),                  // 7: api.Hand
	(*QQGameFinish)(nil),          // 8: api.QQGameFinish
	(*QQHistoryHand)(nil),         // 9: api.QQHistoryHand
	(*QQHistory)(nil),             // 10: api.QQHistory
	(*QQDeskCellBet)(nil),         // 11: api.QQDeskCellBet
	(*QQDeskListCellBet)(nil),     // 12: api.QQDeskListCellBet
	(*QQUpdateDesk)(nil),          // 13: api.QQUpdateDesk
}
var file_bandarqq_api_proto_depIdxs = []int32{
	0,  // 0: api.QQBet.cell:type_name -> api.QQBetCell
	3,  // 1: api.QQPlayerBets.bets:type_name -> api.QQBet
	3,  // 2: api.QQPlayerBetResult.win_bets:type_name -> api.QQBet
	5,  // 3: api.QQListPlayerBetResult.results:type_name -> api.QQPlayerBetResult
	2,  // 4: api.Hand.dominos:type_name -> api.Domino
	1,  // 5: api.Hand.type:type_name -> api.QQHandType
	7,  // 6: api.QQGameFinish.red_hand:type_name -> api.Hand
	7,  // 7: api.QQGameFinish.blue_hand:type_name -> api.Hand
	0,  // 8: api.QQGameFinish.win_cells:type_name -> api.QQBetCell
	6,  // 9: api.QQGameFinish.result:type_name -> api.QQListPlayerBetResult
	7,  // 10: api.QQHistoryHand.red_hand:type_name -> api.Hand
	7,  // 11: api.QQHistoryHand.blue_hand:type_name -> api.Hand
	9,  // 12: api.QQHistory.hand_history:type_name -> api.QQHistoryHand
	0,  // 13: api.QQDeskCellBet.cell:type_name -> api.QQBetCell
	11, // 14: api.QQDeskListCellBet.list_cell_bet:type_name -> api.QQDeskCellBet
	4,  // 15: api.QQUpdateDesk.player_list_bet:type_name -> api.QQPlayerBets
	12, // 16: api.QQUpdateDesk.list_cell_bet:type_name -> api.QQDeskListCellBet
	10, // 17: api.QQUpdateDesk.history:type_name -> api.QQHistory
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_bandarqq_api_proto_init() }
func file_bandarqq_api_proto_init() {
	if File_bandarqq_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bandarqq_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Domino); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandarqq_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandarqq_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQPlayerBets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandarqq_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQPlayerBetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandarqq_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQListPlayerBetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandarqq_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandarqq_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQGameFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandarqq_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQHistoryHand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandarqq_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandarqq_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQDeskCellBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandarqq_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQDeskListCellBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bandarqq_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQUpdateDesk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bandarqq_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bandarqq_api_proto_goTypes,
		DependencyIndexes: file_bandarqq_api_proto_depIdxs,
		EnumInfos:         file_bandarqq_api_proto_enumTypes,
		MessageInfos:      file_bandarqq_api_proto_msgTypes,
	}.Build()
	File_bandarqq_api_proto = out.File
	file_bandarqq_api_proto_rawDesc = nil
	file_bandarqq_api_proto_goTypes = nil
	file_bandarqq_api_proto_depIdxs = nil
}
