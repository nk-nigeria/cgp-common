// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: slots_game.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SiXiangSymbol int32

const (
	SiXiangSymbol_SI_XIANG_SYMBOL_UNSPECIFIED    SiXiangSymbol = 0
	SiXiangSymbol_SI_XIANG_SYMBOL_10             SiXiangSymbol = 1
	SiXiangSymbol_SI_XIANG_SYMBOL_J              SiXiangSymbol = 2
	SiXiangSymbol_SI_XIANG_SYMBOL_Q              SiXiangSymbol = 4
	SiXiangSymbol_SI_XIANG_SYMBOL_K              SiXiangSymbol = 8
	SiXiangSymbol_SI_XIANG_SYMBOL_A              SiXiangSymbol = 16
	SiXiangSymbol_SI_XIANG_SYMBOL_BLUE_DRAGON    SiXiangSymbol = 32
	SiXiangSymbol_SI_XIANG_SYMBOL_WHITE_TIGER    SiXiangSymbol = 64
	SiXiangSymbol_SI_XIANG_SYMBOL_VERMILION_BIRD SiXiangSymbol = 128
	SiXiangSymbol_SI_XIANG_SYMBOL_WARRIOR        SiXiangSymbol = 256
	SiXiangSymbol_SI_XIANG_SYMBOL_SCATTER        SiXiangSymbol = 2048
	SiXiangSymbol_SI_XIANG_SYMBOL_WILD           SiXiangSymbol = 4095
)

// Enum value maps for SiXiangSymbol.
var (
	SiXiangSymbol_name = map[int32]string{
		0:    "SI_XIANG_SYMBOL_UNSPECIFIED",
		1:    "SI_XIANG_SYMBOL_10",
		2:    "SI_XIANG_SYMBOL_J",
		4:    "SI_XIANG_SYMBOL_Q",
		8:    "SI_XIANG_SYMBOL_K",
		16:   "SI_XIANG_SYMBOL_A",
		32:   "SI_XIANG_SYMBOL_BLUE_DRAGON",
		64:   "SI_XIANG_SYMBOL_WHITE_TIGER",
		128:  "SI_XIANG_SYMBOL_VERMILION_BIRD",
		256:  "SI_XIANG_SYMBOL_WARRIOR",
		2048: "SI_XIANG_SYMBOL_SCATTER",
		4095: "SI_XIANG_SYMBOL_WILD",
	}
	SiXiangSymbol_value = map[string]int32{
		"SI_XIANG_SYMBOL_UNSPECIFIED":    0,
		"SI_XIANG_SYMBOL_10":             1,
		"SI_XIANG_SYMBOL_J":              2,
		"SI_XIANG_SYMBOL_Q":              4,
		"SI_XIANG_SYMBOL_K":              8,
		"SI_XIANG_SYMBOL_A":              16,
		"SI_XIANG_SYMBOL_BLUE_DRAGON":    32,
		"SI_XIANG_SYMBOL_WHITE_TIGER":    64,
		"SI_XIANG_SYMBOL_VERMILION_BIRD": 128,
		"SI_XIANG_SYMBOL_WARRIOR":        256,
		"SI_XIANG_SYMBOL_SCATTER":        2048,
		"SI_XIANG_SYMBOL_WILD":           4095,
	}
)

func (x SiXiangSymbol) Enum() *SiXiangSymbol {
	p := new(SiXiangSymbol)
	*p = x
	return p
}

func (x SiXiangSymbol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SiXiangSymbol) Descriptor() protoreflect.EnumDescriptor {
	return file_slots_game_proto_enumTypes[0].Descriptor()
}

func (SiXiangSymbol) Type() protoreflect.EnumType {
	return &file_slots_game_proto_enumTypes[0]
}

func (x SiXiangSymbol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SiXiangSymbol.Descriptor instead.
func (SiXiangSymbol) EnumDescriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{0}
}

type SiXiangGame int32

const (
	SiXiangGame_SI_XIANG_GAME_UNSPECIFIED  SiXiangGame = 0
	SiXiangGame_SI_XIANG_GAME_NOMAL        SiXiangGame = 1
	SiXiangGame_SI_XIANG_GAME_BONUS        SiXiangGame = 2
	SiXiangGame_SI_XIANG_GAME_DRAGON_PEARL SiXiangGame = 3
	SiXiangGame_SI_XIANG_GAME_LUCKDRAW     SiXiangGame = 4
	SiXiangGame_SI_XIANG_GAME_GOLDPICK     SiXiangGame = 5
	SiXiangGame_SI_XIANG_GAME_RAPIDPAY     SiXiangGame = 6
	SiXiangGame_SI_XIANG_GAME_SIXANGBONUS  SiXiangGame = 7
)

// Enum value maps for SiXiangGame.
var (
	SiXiangGame_name = map[int32]string{
		0: "SI_XIANG_GAME_UNSPECIFIED",
		1: "SI_XIANG_GAME_NOMAL",
		2: "SI_XIANG_GAME_BONUS",
		3: "SI_XIANG_GAME_DRAGON_PEARL",
		4: "SI_XIANG_GAME_LUCKDRAW",
		5: "SI_XIANG_GAME_GOLDPICK",
		6: "SI_XIANG_GAME_RAPIDPAY",
		7: "SI_XIANG_GAME_SIXANGBONUS",
	}
	SiXiangGame_value = map[string]int32{
		"SI_XIANG_GAME_UNSPECIFIED":  0,
		"SI_XIANG_GAME_NOMAL":        1,
		"SI_XIANG_GAME_BONUS":        2,
		"SI_XIANG_GAME_DRAGON_PEARL": 3,
		"SI_XIANG_GAME_LUCKDRAW":     4,
		"SI_XIANG_GAME_GOLDPICK":     5,
		"SI_XIANG_GAME_RAPIDPAY":     6,
		"SI_XIANG_GAME_SIXANGBONUS":  7,
	}
)

func (x SiXiangGame) Enum() *SiXiangGame {
	p := new(SiXiangGame)
	*p = x
	return p
}

func (x SiXiangGame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SiXiangGame) Descriptor() protoreflect.EnumDescriptor {
	return file_slots_game_proto_enumTypes[1].Descriptor()
}

func (SiXiangGame) Type() protoreflect.EnumType {
	return &file_slots_game_proto_enumTypes[1]
}

func (x SiXiangGame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SiXiangGame.Descriptor instead.
func (SiXiangGame) EnumDescriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{1}
}

type BigWin int32

const (
	BigWin_BIG_WIN_UNSPECIFIED BigWin = 0
	BigWin_BIG_WIN_NICE        BigWin = 1
)

// Enum value maps for BigWin.
var (
	BigWin_name = map[int32]string{
		0: "BIG_WIN_UNSPECIFIED",
		1: "BIG_WIN_NICE",
	}
	BigWin_value = map[string]int32{
		"BIG_WIN_UNSPECIFIED": 0,
		"BIG_WIN_NICE":        1,
	}
)

func (x BigWin) Enum() *BigWin {
	p := new(BigWin)
	*p = x
	return p
}

func (x BigWin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BigWin) Descriptor() protoreflect.EnumDescriptor {
	return file_slots_game_proto_enumTypes[2].Descriptor()
}

func (BigWin) Type() protoreflect.EnumType {
	return &file_slots_game_proto_enumTypes[2]
}

func (x BigWin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BigWin.Descriptor instead.
func (BigWin) EnumDescriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{2}
}

type SlotDesk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matrix                   *SlotMatrix     `protobuf:"bytes,1,opt,name=matrix,proto3" json:"matrix,omitempty"`
	SpreadMatrix             *SlotMatrix     `protobuf:"bytes,4,opt,name=spread_matrix,json=spreadMatrix,proto3" json:"spread_matrix,omitempty"`
	Paylines                 []*Payline      `protobuf:"bytes,5,rep,name=paylines,proto3" json:"paylines,omitempty"`
	ChipsMcb                 int64           `protobuf:"varint,6,opt,name=chips_mcb,json=chipsMcb,proto3" json:"chips_mcb,omitempty"`
	SixiangGame              SiXiangGame     `protobuf:"varint,7,opt,name=sixiang_game,json=sixiangGame,proto3,enum=api.SiXiangGame" json:"sixiang_game,omitempty"`
	SpecialSymbols           []SiXiangSymbol `protobuf:"varint,8,rep,packed,name=special_symbols,json=specialSymbols,proto3,enum=api.SiXiangSymbol" json:"special_symbols,omitempty"`
	WinJp                    int64           `protobuf:"varint,9,opt,name=win_jp,json=winJp,proto3" json:"win_jp,omitempty"`
	WinJpRatio               int64           `protobuf:"varint,10,opt,name=win_jp_ratio,json=winJpRatio,proto3" json:"win_jp_ratio,omitempty"`
	BigWin                   BigWin          `protobuf:"varint,11,opt,name=big_win,json=bigWin,proto3,enum=api.BigWin" json:"big_win,omitempty"`
	ChipsWinInSpecialGame    int64           `protobuf:"varint,12,opt,name=chips_win_in_special_game,json=chipsWinInSpecialGame,proto3" json:"chips_win_in_special_game,omitempty"`
	ChipsWinInSpin           int64           `protobuf:"varint,13,opt,name=chips_win_in_spin,json=chipsWinInSpin,proto3" json:"chips_win_in_spin,omitempty"`
	BalanceChipsWalletBefore int64           `protobuf:"varint,14,opt,name=balance_chips_wallet_before,json=balanceChipsWalletBefore,proto3" json:"balance_chips_wallet_before,omitempty"`
	BalanceChipsWalletAfter  int64           `protobuf:"varint,15,opt,name=balance_chips_wallet_after,json=balanceChipsWalletAfter,proto3" json:"balance_chips_wallet_after,omitempty"`
}

func (x *SlotDesk) Reset() {
	*x = SlotDesk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotDesk) ProtoMessage() {}

func (x *SlotDesk) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotDesk.ProtoReflect.Descriptor instead.
func (*SlotDesk) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{0}
}

func (x *SlotDesk) GetMatrix() *SlotMatrix {
	if x != nil {
		return x.Matrix
	}
	return nil
}

func (x *SlotDesk) GetSpreadMatrix() *SlotMatrix {
	if x != nil {
		return x.SpreadMatrix
	}
	return nil
}

func (x *SlotDesk) GetPaylines() []*Payline {
	if x != nil {
		return x.Paylines
	}
	return nil
}

func (x *SlotDesk) GetChipsMcb() int64 {
	if x != nil {
		return x.ChipsMcb
	}
	return 0
}

func (x *SlotDesk) GetSixiangGame() SiXiangGame {
	if x != nil {
		return x.SixiangGame
	}
	return SiXiangGame_SI_XIANG_GAME_UNSPECIFIED
}

func (x *SlotDesk) GetSpecialSymbols() []SiXiangSymbol {
	if x != nil {
		return x.SpecialSymbols
	}
	return nil
}

func (x *SlotDesk) GetWinJp() int64 {
	if x != nil {
		return x.WinJp
	}
	return 0
}

func (x *SlotDesk) GetWinJpRatio() int64 {
	if x != nil {
		return x.WinJpRatio
	}
	return 0
}

func (x *SlotDesk) GetBigWin() BigWin {
	if x != nil {
		return x.BigWin
	}
	return BigWin_BIG_WIN_UNSPECIFIED
}

func (x *SlotDesk) GetChipsWinInSpecialGame() int64 {
	if x != nil {
		return x.ChipsWinInSpecialGame
	}
	return 0
}

func (x *SlotDesk) GetChipsWinInSpin() int64 {
	if x != nil {
		return x.ChipsWinInSpin
	}
	return 0
}

func (x *SlotDesk) GetBalanceChipsWalletBefore() int64 {
	if x != nil {
		return x.BalanceChipsWalletBefore
	}
	return 0
}

func (x *SlotDesk) GetBalanceChipsWalletAfter() int64 {
	if x != nil {
		return x.BalanceChipsWalletAfter
	}
	return 0
}

type SlotMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lists []SiXiangSymbol `protobuf:"varint,1,rep,packed,name=lists,proto3,enum=api.SiXiangSymbol" json:"lists,omitempty"`
	Rows  int32           `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
	Cols  int32           `protobuf:"varint,3,opt,name=cols,proto3" json:"cols,omitempty"`
}

func (x *SlotMatrix) Reset() {
	*x = SlotMatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotMatrix) ProtoMessage() {}

func (x *SlotMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotMatrix.ProtoReflect.Descriptor instead.
func (*SlotMatrix) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{1}
}

func (x *SlotMatrix) GetLists() []SiXiangSymbol {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *SlotMatrix) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *SlotMatrix) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

type Payline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol   SiXiangSymbol `protobuf:"varint,2,opt,name=symbol,proto3,enum=api.SiXiangSymbol" json:"symbol,omitempty"`
	NumOccur int32         `protobuf:"varint,3,opt,name=num_occur,json=numOccur,proto3" json:"num_occur,omitempty"`
	Rate     float64       `protobuf:"fixed64,4,opt,name=rate,proto3" json:"rate,omitempty"`
	Chips    int64         `protobuf:"varint,5,opt,name=chips,proto3" json:"chips,omitempty"`
}

func (x *Payline) Reset() {
	*x = Payline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payline) ProtoMessage() {}

func (x *Payline) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payline.ProtoReflect.Descriptor instead.
func (*Payline) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{2}
}

func (x *Payline) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Payline) GetSymbol() SiXiangSymbol {
	if x != nil {
		return x.Symbol
	}
	return SiXiangSymbol_SI_XIANG_SYMBOL_UNSPECIFIED
}

func (x *Payline) GetNumOccur() int32 {
	if x != nil {
		return x.NumOccur
	}
	return 0
}

func (x *Payline) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Payline) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

var File_slots_game_proto protoreflect.FileDescriptor

var file_slots_game_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0xe2, 0x04, 0x0a, 0x08, 0x53, 0x6c, 0x6f, 0x74,
	0x44, 0x65, 0x73, 0x6b, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x34, 0x0a,
	0x0d, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x0c, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x6d, 0x63, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x70, 0x73, 0x4d, 0x63, 0x62, 0x12, 0x33, 0x0a, 0x0c, 0x73, 0x69,
	0x78, 0x69, 0x61, 0x6e, 0x67, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x78, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x77, 0x69, 0x6e, 0x5f, 0x6a, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69,
	0x6e, 0x4a, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x5f, 0x6a, 0x70, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x4a, 0x70,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x24, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x77, 0x69, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x67,
	0x57, 0x69, 0x6e, 0x52, 0x06, 0x62, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x19, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x63, 0x68, 0x69, 0x70, 0x73, 0x57, 0x69, 0x6e, 0x49, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x77,
	0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x68, 0x69, 0x70, 0x73, 0x57, 0x69, 0x6e, 0x49, 0x6e, 0x53, 0x70, 0x69, 0x6e,
	0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68,
	0x69, 0x70, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x3b, 0x0a, 0x1a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x17, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x69, 0x70,
	0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x0a,
	0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x05, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x22, 0x8c, 0x01, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x4f, 0x63, 0x63, 0x75,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x2a, 0xe2, 0x02, 0x0a, 0x0d,
	0x53, 0x69, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x31, 0x30, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x51, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x41,
	0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f,
	0x4e, 0x10, 0x20, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x47,
	0x45, 0x52, 0x10, 0x40, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x4d, 0x49, 0x4c, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x49, 0x52, 0x44, 0x10, 0x80, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x49, 0x5f,
	0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x57, 0x41, 0x52,
	0x52, 0x49, 0x4f, 0x52, 0x10, 0x80, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x49, 0x5f, 0x58, 0x49,
	0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x43, 0x41, 0x54, 0x54,
	0x45, 0x52, 0x10, 0x80, 0x10, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e,
	0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x57, 0x49, 0x4c, 0x44, 0x10, 0xff, 0x1f,
	0x2a, 0xf1, 0x01, 0x0a, 0x0b, 0x53, 0x69, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x4e, 0x4f, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x5f, 0x58,
	0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10,
	0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x41, 0x52, 0x4c, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x44, 0x52, 0x41, 0x57, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x47,
	0x4f, 0x4c, 0x44, 0x50, 0x49, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x49, 0x5f,
	0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x50, 0x49, 0x44,
	0x50, 0x41, 0x59, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e,
	0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x49, 0x58, 0x41, 0x4e, 0x47, 0x42, 0x4f, 0x4e,
	0x55, 0x53, 0x10, 0x07, 0x2a, 0x33, 0x0a, 0x06, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x12, 0x17,
	0x0a, 0x13, 0x42, 0x49, 0x47, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x49, 0x47, 0x5f, 0x57,
	0x49, 0x4e, 0x5f, 0x4e, 0x49, 0x43, 0x45, 0x10, 0x01, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x69, 0x61, 0x6f, 0x6c, 0x69, 0x6e, 0x6b,
	0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63,
	0x67, 0x70, 0x2d, 0x62, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_slots_game_proto_rawDescOnce sync.Once
	file_slots_game_proto_rawDescData = file_slots_game_proto_rawDesc
)

func file_slots_game_proto_rawDescGZIP() []byte {
	file_slots_game_proto_rawDescOnce.Do(func() {
		file_slots_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_slots_game_proto_rawDescData)
	})
	return file_slots_game_proto_rawDescData
}

var file_slots_game_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_slots_game_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_slots_game_proto_goTypes = []interface{}{
	(SiXiangSymbol)(0), // 0: api.SiXiangSymbol
	(SiXiangGame)(0),   // 1: api.SiXiangGame
	(BigWin)(0),        // 2: api.BigWin
	(*SlotDesk)(nil),   // 3: api.SlotDesk
	(*SlotMatrix)(nil), // 4: api.SlotMatrix
	(*Payline)(nil),    // 5: api.Payline
}
var file_slots_game_proto_depIdxs = []int32{
	4, // 0: api.SlotDesk.matrix:type_name -> api.SlotMatrix
	4, // 1: api.SlotDesk.spread_matrix:type_name -> api.SlotMatrix
	5, // 2: api.SlotDesk.paylines:type_name -> api.Payline
	1, // 3: api.SlotDesk.sixiang_game:type_name -> api.SiXiangGame
	0, // 4: api.SlotDesk.special_symbols:type_name -> api.SiXiangSymbol
	2, // 5: api.SlotDesk.big_win:type_name -> api.BigWin
	0, // 6: api.SlotMatrix.lists:type_name -> api.SiXiangSymbol
	0, // 7: api.Payline.symbol:type_name -> api.SiXiangSymbol
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_slots_game_proto_init() }
func file_slots_game_proto_init() {
	if File_slots_game_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_slots_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotDesk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotMatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_slots_game_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_slots_game_proto_goTypes,
		DependencyIndexes: file_slots_game_proto_depIdxs,
		EnumInfos:         file_slots_game_proto_enumTypes,
		MessageInfos:      file_slots_game_proto_msgTypes,
	}.Build()
	File_slots_game_proto = out.File
	file_slots_game_proto_rawDesc = nil
	file_slots_game_proto_goTypes = nil
	file_slots_game_proto_depIdxs = nil
}
