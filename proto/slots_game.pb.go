// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: slots_game.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
type SiXiangSymbol int32

const (
	SiXiangSymbol_SI_XIANG_SYMBOL_UNSPECIFIED    SiXiangSymbol = 0
	SiXiangSymbol_SI_XIANG_SYMBOL_10             SiXiangSymbol = 1
	SiXiangSymbol_SI_XIANG_SYMBOL_J              SiXiangSymbol = 2
	SiXiangSymbol_SI_XIANG_SYMBOL_Q              SiXiangSymbol = 4
	SiXiangSymbol_SI_XIANG_SYMBOL_K              SiXiangSymbol = 8
	SiXiangSymbol_SI_XIANG_SYMBOL_A              SiXiangSymbol = 16
	SiXiangSymbol_SI_XIANG_SYMBOL_BLUE_DRAGON    SiXiangSymbol = 32
	SiXiangSymbol_SI_XIANG_SYMBOL_WHITE_TIGER    SiXiangSymbol = 64
	SiXiangSymbol_SI_XIANG_SYMBOL_VERMILION_BIRD SiXiangSymbol = 128
	SiXiangSymbol_SI_XIANG_SYMBOL_WARRIOR        SiXiangSymbol = 256
	SiXiangSymbol_SI_XIANG_SYMBOL_SCATTER        SiXiangSymbol = 512
	// Bonus game
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_DRAGONBALL SiXiangSymbol = 1025
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_LUCKYDRAW  SiXiangSymbol = 1026
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_GOLDPICK   SiXiangSymbol = 1027
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_RAPIDPAY   SiXiangSymbol = 1028
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_GOLDX10    SiXiangSymbol = 1029
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_GOLDX20    SiXiangSymbol = 1030
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_GOLDX30    SiXiangSymbol = 1031
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_GOLDX50    SiXiangSymbol = 1032
	// Dragon Pearl
	// bao li xi, quay random ra eye bird/dragon...
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_LUCKMONEY SiXiangSymbol = 1280
	// ngoc tien random mcb
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM1 SiXiangSymbol = 1281
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM2 SiXiangSymbol = 1282
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM3 SiXiangSymbol = 1283
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM4 SiXiangSymbol = 1284
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM5 SiXiangSymbol = 1285
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_EYE_BIRD    SiXiangSymbol = 1296
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_EYE_TIGER   SiXiangSymbol = 1297
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_EYE_WARRIOR SiXiangSymbol = 1298
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_EYE_DRAGON  SiXiangSymbol = 1299
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_JP_MINOR    SiXiangSymbol = 1300
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_JP_MAJOR    SiXiangSymbol = 1301
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_JP_MEGA     SiXiangSymbol = 1302
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_JP_GRAND    SiXiangSymbol = 1303
	// LUCKY DRAW SYMBOL
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_MINOR  SiXiangSymbol = 1536
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_MAJOR  SiXiangSymbol = 1537
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_MEGA   SiXiangSymbol = 1538
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_GRAND  SiXiangSymbol = 1539
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_1 SiXiangSymbol = 1540
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_2 SiXiangSymbol = 1541
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_3 SiXiangSymbol = 1542
	// GOLP PICK
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_TRYAGAIN SiXiangSymbol = 1792
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_GOLD1    SiXiangSymbol = 1793
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_GOLD2    SiXiangSymbol = 1794
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_GOLD3    SiXiangSymbol = 1795
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_GOLD4    SiXiangSymbol = 1796
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_GOLD5    SiXiangSymbol = 1797
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_JP_MINOR SiXiangSymbol = 1798
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_JP_MAJOR SiXiangSymbol = 1799
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_JP_MEGA  SiXiangSymbol = 1800
	// RAPID PAY SYMBOL
	SiXiangSymbol_SI_XIANG_SYMBOL_RAPIDPAY_END      SiXiangSymbol = 2048
	SiXiangSymbol_SI_XIANG_SYMBOL_RAPIDPAY_X2       SiXiangSymbol = 2049
	SiXiangSymbol_SI_XIANG_SYMBOL_RAPIDPAY_X3       SiXiangSymbol = 2050
	SiXiangSymbol_SI_XIANG_SYMBOL_RAPIDPAY_X4       SiXiangSymbol = 2051
	SiXiangSymbol_SI_XIANG_SYMBOL_RAPIDPAY_LUCKYBOX SiXiangSymbol = 2052
	// SIXANGBONUS
	SiXiangSymbol_SI_XIANG_SYMBOL_SIXANGBONUS_DRAGONPEARL_GAME SiXiangSymbol = 2305
	SiXiangSymbol_SI_XIANG_SYMBOL_SIXANGBONUS_LUCKYDRAW_GAME   SiXiangSymbol = 2306
	SiXiangSymbol_SI_XIANG_SYMBOL_SIXANGBONUS_GOLDPICK_GAME    SiXiangSymbol = 2307
	SiXiangSymbol_SI_XIANG_SYMBOL_SIXANGBONUS_RAPIDPAY_GAME    SiXiangSymbol = 2308
	// Tazan symbol
	SiXiangSymbol_SI_XIANG_SYMBOL_GORILLE            SiXiangSymbol = 4097
	SiXiangSymbol_SI_XIANG_SYMBOL_ELEPHANT           SiXiangSymbol = 4098
	SiXiangSymbol_SI_XIANG_SYMBOL_JAGUAR             SiXiangSymbol = 4099
	SiXiangSymbol_SI_XIANG_SYMBOL_SNACK              SiXiangSymbol = 4100
	SiXiangSymbol_SI_XIANG_SYMBOL_JANE               SiXiangSymbol = 4101
	SiXiangSymbol_SI_XIANG_SYMBOL_JANE_FATHER        SiXiangSymbol = 4102
	SiXiangSymbol_SI_XIANG_SYMBOL_CLAYTON            SiXiangSymbol = 4103
	SiXiangSymbol_SI_XIANG_SYMBOL_FREE_SPIN          SiXiangSymbol = 4104
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN             SiXiangSymbol = 4105
	SiXiangSymbol_SI_XIANG_SYMBOL_LETTER_J           SiXiangSymbol = 4112
	SiXiangSymbol_SI_XIANG_SYMBOL_LETTER_U           SiXiangSymbol = 4113
	SiXiangSymbol_SI_XIANG_SYMBOL_LETTER_N           SiXiangSymbol = 4114
	SiXiangSymbol_SI_XIANG_SYMBOL_LETTER_G           SiXiangSymbol = 4115
	SiXiangSymbol_SI_XIANG_SYMBOL_LETTER_L           SiXiangSymbol = 4116
	SiXiangSymbol_SI_XIANG_SYMBOL_LETTER_E           SiXiangSymbol = 4117
	SiXiangSymbol_SI_XIANG_SYMBOL_DIAMOND            SiXiangSymbol = 4118
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_MORE_TURNX2 SiXiangSymbol = 4128
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_MORE_TURNX3 SiXiangSymbol = 4129
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_RANDOM_1    SiXiangSymbol = 4130
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_RANDOM_2    SiXiangSymbol = 4131
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_RANDOM_3    SiXiangSymbol = 4132
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_RANDOM_4    SiXiangSymbol = 4133
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_RANDOM_5    SiXiangSymbol = 4134
	// Juice Garden
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_STRAWBERRY    SiXiangSymbol = 4353
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_WATERMELON    SiXiangSymbol = 4354
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_PINAPPLE      SiXiangSymbol = 4355
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_MANGOSTEEN    SiXiangSymbol = 4356
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_STONE_DIAMOND SiXiangSymbol = 4357
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_STONE_GREEN   SiXiangSymbol = 4358
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_STONE_VIOLET  SiXiangSymbol = 4359
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_SCATTERS_X3   SiXiangSymbol = 4360
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_SCATTERS_X4   SiXiangSymbol = 4361
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_SCATTERS_X5   SiXiangSymbol = 4368
	// fruit basket game
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_SPIN  SiXiangSymbol = 4369
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_GRAND SiXiangSymbol = 4370
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MAJOR SiXiangSymbol = 4371
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINOR SiXiangSymbol = 4372
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINI  SiXiangSymbol = 4373
	// fruit rain
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_1   SiXiangSymbol = 4384
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_2   SiXiangSymbol = 4385
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_3   SiXiangSymbol = 4386
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_4   SiXiangSymbol = 4387
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_5   SiXiangSymbol = 4388
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_6   SiXiangSymbol = 4389
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_7   SiXiangSymbol = 4390
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FREE_GAME  SiXiangSymbol = 4391
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FRUIT_RAIN SiXiangSymbol = 4392
	//inca
	SiXiangSymbol_SI_XIANG_SYMBOL_SUIT_HEARTS   SiXiangSymbol = 4608
	SiXiangSymbol_SI_XIANG_SYMBOL_SUIT_DIAMONDS SiXiangSymbol = 4609
	SiXiangSymbol_SI_XIANG_SYMBOL_SUIT_CLUBS    SiXiangSymbol = 4610
	SiXiangSymbol_SI_XIANG_SYMBOL_SUIT_SPADES   SiXiangSymbol = 4611
	SiXiangSymbol_SI_XIANG_SYMBOL_SUN           SiXiangSymbol = 4612
	SiXiangSymbol_SI_XIANG_SYMBOL_EAGLE_GARUDA  SiXiangSymbol = 4613
	SiXiangSymbol_SI_XIANG_SYMBOL_ANTIQUE       SiXiangSymbol = 4614
	// noel
	SiXiangSymbol_SI_XIANG_SYMBOL_CHRISMAS_GIFT  SiXiangSymbol = 4624
	SiXiangSymbol_SI_XIANG_SYMBOL_CHRISMAS_CANDY SiXiangSymbol = 4625
	SiXiangSymbol_SI_XIANG_SYMBOL_CHRISMAS_RING  SiXiangSymbol = 4626
	SiXiangSymbol_SI_XIANG_SYMBOL_WILD           SiXiangSymbol = 65535
)

// Enum value maps for SiXiangSymbol.
var (
	SiXiangSymbol_name = map[int32]string{
		0:     "SI_XIANG_SYMBOL_UNSPECIFIED",
		1:     "SI_XIANG_SYMBOL_10",
		2:     "SI_XIANG_SYMBOL_J",
		4:     "SI_XIANG_SYMBOL_Q",
		8:     "SI_XIANG_SYMBOL_K",
		16:    "SI_XIANG_SYMBOL_A",
		32:    "SI_XIANG_SYMBOL_BLUE_DRAGON",
		64:    "SI_XIANG_SYMBOL_WHITE_TIGER",
		128:   "SI_XIANG_SYMBOL_VERMILION_BIRD",
		256:   "SI_XIANG_SYMBOL_WARRIOR",
		512:   "SI_XIANG_SYMBOL_SCATTER",
		1025:  "SI_XIANG_SYMBOL_BONUS_DRAGONBALL",
		1026:  "SI_XIANG_SYMBOL_BONUS_LUCKYDRAW",
		1027:  "SI_XIANG_SYMBOL_BONUS_GOLDPICK",
		1028:  "SI_XIANG_SYMBOL_BONUS_RAPIDPAY",
		1029:  "SI_XIANG_SYMBOL_BONUS_GOLDX10",
		1030:  "SI_XIANG_SYMBOL_BONUS_GOLDX20",
		1031:  "SI_XIANG_SYMBOL_BONUS_GOLDX30",
		1032:  "SI_XIANG_SYMBOL_BONUS_GOLDX50",
		1280:  "SI_XIANG_SYMBOL_DRAGONPEARL_LUCKMONEY",
		1281:  "SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM1",
		1282:  "SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM2",
		1283:  "SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM3",
		1284:  "SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM4",
		1285:  "SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM5",
		1296:  "SI_XIANG_SYMBOL_DRAGONPEARL_EYE_BIRD",
		1297:  "SI_XIANG_SYMBOL_DRAGONPEARL_EYE_TIGER",
		1298:  "SI_XIANG_SYMBOL_DRAGONPEARL_EYE_WARRIOR",
		1299:  "SI_XIANG_SYMBOL_DRAGONPEARL_EYE_DRAGON",
		1300:  "SI_XIANG_SYMBOL_DRAGONPEARL_JP_MINOR",
		1301:  "SI_XIANG_SYMBOL_DRAGONPEARL_JP_MAJOR",
		1302:  "SI_XIANG_SYMBOL_DRAGONPEARL_JP_MEGA",
		1303:  "SI_XIANG_SYMBOL_DRAGONPEARL_JP_GRAND",
		1536:  "SI_XIANG_SYMBOL_LUCKYDRAW_MINOR",
		1537:  "SI_XIANG_SYMBOL_LUCKYDRAW_MAJOR",
		1538:  "SI_XIANG_SYMBOL_LUCKYDRAW_MEGA",
		1539:  "SI_XIANG_SYMBOL_LUCKYDRAW_GRAND",
		1540:  "SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_1",
		1541:  "SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_2",
		1542:  "SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_3",
		1792:  "SI_XIANG_SYMBOL_GOLD_PICK_TRYAGAIN",
		1793:  "SI_XIANG_SYMBOL_GOLD_PICK_GOLD1",
		1794:  "SI_XIANG_SYMBOL_GOLD_PICK_GOLD2",
		1795:  "SI_XIANG_SYMBOL_GOLD_PICK_GOLD3",
		1796:  "SI_XIANG_SYMBOL_GOLD_PICK_GOLD4",
		1797:  "SI_XIANG_SYMBOL_GOLD_PICK_GOLD5",
		1798:  "SI_XIANG_SYMBOL_GOLD_PICK_JP_MINOR",
		1799:  "SI_XIANG_SYMBOL_GOLD_PICK_JP_MAJOR",
		1800:  "SI_XIANG_SYMBOL_GOLD_PICK_JP_MEGA",
		2048:  "SI_XIANG_SYMBOL_RAPIDPAY_END",
		2049:  "SI_XIANG_SYMBOL_RAPIDPAY_X2",
		2050:  "SI_XIANG_SYMBOL_RAPIDPAY_X3",
		2051:  "SI_XIANG_SYMBOL_RAPIDPAY_X4",
		2052:  "SI_XIANG_SYMBOL_RAPIDPAY_LUCKYBOX",
		2305:  "SI_XIANG_SYMBOL_SIXANGBONUS_DRAGONPEARL_GAME",
		2306:  "SI_XIANG_SYMBOL_SIXANGBONUS_LUCKYDRAW_GAME",
		2307:  "SI_XIANG_SYMBOL_SIXANGBONUS_GOLDPICK_GAME",
		2308:  "SI_XIANG_SYMBOL_SIXANGBONUS_RAPIDPAY_GAME",
		4097:  "SI_XIANG_SYMBOL_GORILLE",
		4098:  "SI_XIANG_SYMBOL_ELEPHANT",
		4099:  "SI_XIANG_SYMBOL_JAGUAR",
		4100:  "SI_XIANG_SYMBOL_SNACK",
		4101:  "SI_XIANG_SYMBOL_JANE",
		4102:  "SI_XIANG_SYMBOL_JANE_FATHER",
		4103:  "SI_XIANG_SYMBOL_CLAYTON",
		4104:  "SI_XIANG_SYMBOL_FREE_SPIN",
		4105:  "SI_XIANG_SYMBOL_TARZAN",
		4112:  "SI_XIANG_SYMBOL_LETTER_J",
		4113:  "SI_XIANG_SYMBOL_LETTER_U",
		4114:  "SI_XIANG_SYMBOL_LETTER_N",
		4115:  "SI_XIANG_SYMBOL_LETTER_G",
		4116:  "SI_XIANG_SYMBOL_LETTER_L",
		4117:  "SI_XIANG_SYMBOL_LETTER_E",
		4118:  "SI_XIANG_SYMBOL_DIAMOND",
		4128:  "SI_XIANG_SYMBOL_TARZAN_MORE_TURNX2",
		4129:  "SI_XIANG_SYMBOL_TARZAN_MORE_TURNX3",
		4130:  "SI_XIANG_SYMBOL_TARZAN_RANDOM_1",
		4131:  "SI_XIANG_SYMBOL_TARZAN_RANDOM_2",
		4132:  "SI_XIANG_SYMBOL_TARZAN_RANDOM_3",
		4133:  "SI_XIANG_SYMBOL_TARZAN_RANDOM_4",
		4134:  "SI_XIANG_SYMBOL_TARZAN_RANDOM_5",
		4353:  "SI_XIANG_SYMBOL_JUICE_STRAWBERRY",
		4354:  "SI_XIANG_SYMBOL_JUICE_WATERMELON",
		4355:  "SI_XIANG_SYMBOL_JUICE_PINAPPLE",
		4356:  "SI_XIANG_SYMBOL_JUICE_MANGOSTEEN",
		4357:  "SI_XIANG_SYMBOL_JUICE_STONE_DIAMOND",
		4358:  "SI_XIANG_SYMBOL_JUICE_STONE_GREEN",
		4359:  "SI_XIANG_SYMBOL_JUICE_STONE_VIOLET",
		4360:  "SI_XIANG_SYMBOL_JUICE_SCATTERS_X3",
		4361:  "SI_XIANG_SYMBOL_JUICE_SCATTERS_X4",
		4368:  "SI_XIANG_SYMBOL_JUICE_SCATTERS_X5",
		4369:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_SPIN",
		4370:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_GRAND",
		4371:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MAJOR",
		4372:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINOR",
		4373:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINI",
		4384:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_1",
		4385:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_2",
		4386:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_3",
		4387:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_4",
		4388:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_5",
		4389:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_6",
		4390:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_7",
		4391:  "SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FREE_GAME",
		4392:  "SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FRUIT_RAIN",
		4608:  "SI_XIANG_SYMBOL_SUIT_HEARTS",
		4609:  "SI_XIANG_SYMBOL_SUIT_DIAMONDS",
		4610:  "SI_XIANG_SYMBOL_SUIT_CLUBS",
		4611:  "SI_XIANG_SYMBOL_SUIT_SPADES",
		4612:  "SI_XIANG_SYMBOL_SUN",
		4613:  "SI_XIANG_SYMBOL_EAGLE_GARUDA",
		4614:  "SI_XIANG_SYMBOL_ANTIQUE",
		4624:  "SI_XIANG_SYMBOL_CHRISMAS_GIFT",
		4625:  "SI_XIANG_SYMBOL_CHRISMAS_CANDY",
		4626:  "SI_XIANG_SYMBOL_CHRISMAS_RING",
		65535: "SI_XIANG_SYMBOL_WILD",
	}
	SiXiangSymbol_value = map[string]int32{
		"SI_XIANG_SYMBOL_UNSPECIFIED":                  0,
		"SI_XIANG_SYMBOL_10":                           1,
		"SI_XIANG_SYMBOL_J":                            2,
		"SI_XIANG_SYMBOL_Q":                            4,
		"SI_XIANG_SYMBOL_K":                            8,
		"SI_XIANG_SYMBOL_A":                            16,
		"SI_XIANG_SYMBOL_BLUE_DRAGON":                  32,
		"SI_XIANG_SYMBOL_WHITE_TIGER":                  64,
		"SI_XIANG_SYMBOL_VERMILION_BIRD":               128,
		"SI_XIANG_SYMBOL_WARRIOR":                      256,
		"SI_XIANG_SYMBOL_SCATTER":                      512,
		"SI_XIANG_SYMBOL_BONUS_DRAGONBALL":             1025,
		"SI_XIANG_SYMBOL_BONUS_LUCKYDRAW":              1026,
		"SI_XIANG_SYMBOL_BONUS_GOLDPICK":               1027,
		"SI_XIANG_SYMBOL_BONUS_RAPIDPAY":               1028,
		"SI_XIANG_SYMBOL_BONUS_GOLDX10":                1029,
		"SI_XIANG_SYMBOL_BONUS_GOLDX20":                1030,
		"SI_XIANG_SYMBOL_BONUS_GOLDX30":                1031,
		"SI_XIANG_SYMBOL_BONUS_GOLDX50":                1032,
		"SI_XIANG_SYMBOL_DRAGONPEARL_LUCKMONEY":        1280,
		"SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM1":      1281,
		"SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM2":      1282,
		"SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM3":      1283,
		"SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM4":      1284,
		"SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM5":      1285,
		"SI_XIANG_SYMBOL_DRAGONPEARL_EYE_BIRD":         1296,
		"SI_XIANG_SYMBOL_DRAGONPEARL_EYE_TIGER":        1297,
		"SI_XIANG_SYMBOL_DRAGONPEARL_EYE_WARRIOR":      1298,
		"SI_XIANG_SYMBOL_DRAGONPEARL_EYE_DRAGON":       1299,
		"SI_XIANG_SYMBOL_DRAGONPEARL_JP_MINOR":         1300,
		"SI_XIANG_SYMBOL_DRAGONPEARL_JP_MAJOR":         1301,
		"SI_XIANG_SYMBOL_DRAGONPEARL_JP_MEGA":          1302,
		"SI_XIANG_SYMBOL_DRAGONPEARL_JP_GRAND":         1303,
		"SI_XIANG_SYMBOL_LUCKYDRAW_MINOR":              1536,
		"SI_XIANG_SYMBOL_LUCKYDRAW_MAJOR":              1537,
		"SI_XIANG_SYMBOL_LUCKYDRAW_MEGA":               1538,
		"SI_XIANG_SYMBOL_LUCKYDRAW_GRAND":              1539,
		"SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_1":             1540,
		"SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_2":             1541,
		"SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_3":             1542,
		"SI_XIANG_SYMBOL_GOLD_PICK_TRYAGAIN":           1792,
		"SI_XIANG_SYMBOL_GOLD_PICK_GOLD1":              1793,
		"SI_XIANG_SYMBOL_GOLD_PICK_GOLD2":              1794,
		"SI_XIANG_SYMBOL_GOLD_PICK_GOLD3":              1795,
		"SI_XIANG_SYMBOL_GOLD_PICK_GOLD4":              1796,
		"SI_XIANG_SYMBOL_GOLD_PICK_GOLD5":              1797,
		"SI_XIANG_SYMBOL_GOLD_PICK_JP_MINOR":           1798,
		"SI_XIANG_SYMBOL_GOLD_PICK_JP_MAJOR":           1799,
		"SI_XIANG_SYMBOL_GOLD_PICK_JP_MEGA":            1800,
		"SI_XIANG_SYMBOL_RAPIDPAY_END":                 2048,
		"SI_XIANG_SYMBOL_RAPIDPAY_X2":                  2049,
		"SI_XIANG_SYMBOL_RAPIDPAY_X3":                  2050,
		"SI_XIANG_SYMBOL_RAPIDPAY_X4":                  2051,
		"SI_XIANG_SYMBOL_RAPIDPAY_LUCKYBOX":            2052,
		"SI_XIANG_SYMBOL_SIXANGBONUS_DRAGONPEARL_GAME": 2305,
		"SI_XIANG_SYMBOL_SIXANGBONUS_LUCKYDRAW_GAME":   2306,
		"SI_XIANG_SYMBOL_SIXANGBONUS_GOLDPICK_GAME":    2307,
		"SI_XIANG_SYMBOL_SIXANGBONUS_RAPIDPAY_GAME":    2308,
		"SI_XIANG_SYMBOL_GORILLE":                      4097,
		"SI_XIANG_SYMBOL_ELEPHANT":                     4098,
		"SI_XIANG_SYMBOL_JAGUAR":                       4099,
		"SI_XIANG_SYMBOL_SNACK":                        4100,
		"SI_XIANG_SYMBOL_JANE":                         4101,
		"SI_XIANG_SYMBOL_JANE_FATHER":                  4102,
		"SI_XIANG_SYMBOL_CLAYTON":                      4103,
		"SI_XIANG_SYMBOL_FREE_SPIN":                    4104,
		"SI_XIANG_SYMBOL_TARZAN":                       4105,
		"SI_XIANG_SYMBOL_LETTER_J":                     4112,
		"SI_XIANG_SYMBOL_LETTER_U":                     4113,
		"SI_XIANG_SYMBOL_LETTER_N":                     4114,
		"SI_XIANG_SYMBOL_LETTER_G":                     4115,
		"SI_XIANG_SYMBOL_LETTER_L":                     4116,
		"SI_XIANG_SYMBOL_LETTER_E":                     4117,
		"SI_XIANG_SYMBOL_DIAMOND":                      4118,
		"SI_XIANG_SYMBOL_TARZAN_MORE_TURNX2":           4128,
		"SI_XIANG_SYMBOL_TARZAN_MORE_TURNX3":           4129,
		"SI_XIANG_SYMBOL_TARZAN_RANDOM_1":              4130,
		"SI_XIANG_SYMBOL_TARZAN_RANDOM_2":              4131,
		"SI_XIANG_SYMBOL_TARZAN_RANDOM_3":              4132,
		"SI_XIANG_SYMBOL_TARZAN_RANDOM_4":              4133,
		"SI_XIANG_SYMBOL_TARZAN_RANDOM_5":              4134,
		"SI_XIANG_SYMBOL_JUICE_STRAWBERRY":             4353,
		"SI_XIANG_SYMBOL_JUICE_WATERMELON":             4354,
		"SI_XIANG_SYMBOL_JUICE_PINAPPLE":               4355,
		"SI_XIANG_SYMBOL_JUICE_MANGOSTEEN":             4356,
		"SI_XIANG_SYMBOL_JUICE_STONE_DIAMOND":          4357,
		"SI_XIANG_SYMBOL_JUICE_STONE_GREEN":            4358,
		"SI_XIANG_SYMBOL_JUICE_STONE_VIOLET":           4359,
		"SI_XIANG_SYMBOL_JUICE_SCATTERS_X3":            4360,
		"SI_XIANG_SYMBOL_JUICE_SCATTERS_X4":            4361,
		"SI_XIANG_SYMBOL_JUICE_SCATTERS_X5":            4368,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_SPIN":       4369,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_GRAND":      4370,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MAJOR":      4371,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINOR":      4372,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINI":       4373,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_1":   4384,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_2":   4385,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_3":   4386,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_4":   4387,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_5":   4388,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_6":   4389,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_7":   4390,
		"SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FREE_GAME":  4391,
		"SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FRUIT_RAIN": 4392,
		"SI_XIANG_SYMBOL_SUIT_HEARTS":                  4608,
		"SI_XIANG_SYMBOL_SUIT_DIAMONDS":                4609,
		"SI_XIANG_SYMBOL_SUIT_CLUBS":                   4610,
		"SI_XIANG_SYMBOL_SUIT_SPADES":                  4611,
		"SI_XIANG_SYMBOL_SUN":                          4612,
		"SI_XIANG_SYMBOL_EAGLE_GARUDA":                 4613,
		"SI_XIANG_SYMBOL_ANTIQUE":                      4614,
		"SI_XIANG_SYMBOL_CHRISMAS_GIFT":                4624,
		"SI_XIANG_SYMBOL_CHRISMAS_CANDY":               4625,
		"SI_XIANG_SYMBOL_CHRISMAS_RING":                4626,
		"SI_XIANG_SYMBOL_WILD":                         65535,
	}
)

func (x SiXiangSymbol) Enum() *SiXiangSymbol {
	p := new(SiXiangSymbol)
	*p = x
	return p
}

func (x SiXiangSymbol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SiXiangSymbol) Descriptor() protoreflect.EnumDescriptor {
	return file_slots_game_proto_enumTypes[0].Descriptor()
}

func (SiXiangSymbol) Type() protoreflect.EnumType {
	return &file_slots_game_proto_enumTypes[0]
}

func (x SiXiangSymbol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SiXiangSymbol.Descriptor instead.
func (SiXiangSymbol) EnumDescriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{0}
}

type SiXiangGame int32

const (
	SiXiangGame_SI_XIANG_GAME_UNSPECIFIED              SiXiangGame = 0
	SiXiangGame_SI_XIANG_GAME_NORMAL                   SiXiangGame = 1
	SiXiangGame_SI_XIANG_GAME_BONUS                    SiXiangGame = 2
	SiXiangGame_SI_XIANG_GAME_DRAGON_PEARL             SiXiangGame = 3
	SiXiangGame_SI_XIANG_GAME_LUCKDRAW                 SiXiangGame = 4
	SiXiangGame_SI_XIANG_GAME_GOLDPICK                 SiXiangGame = 5
	SiXiangGame_SI_XIANG_GAME_RAPIDPAY                 SiXiangGame = 6
	SiXiangGame_SI_XIANG_GAME_SIXANGBONUS              SiXiangGame = 7
	SiXiangGame_SI_XIANG_GAME_SIXANGBONUS_DRAGON_PEARL SiXiangGame = 8
	SiXiangGame_SI_XIANG_GAME_SIXANGBONUS_LUCKDRAW     SiXiangGame = 9
	SiXiangGame_SI_XIANG_GAME_SIXANGBONUS_GOLDPICK     SiXiangGame = 10
	SiXiangGame_SI_XIANG_GAME_SIXANGBONUS_RAPIDPAY     SiXiangGame = 11
	// Tazan game
	SiXiangGame_SI_XIANG_GAME_TARZAN_JUNGLE_TREASURE SiXiangGame = 101
	SiXiangGame_SI_XIANG_GAME_TARZAN_FREESPINX9      SiXiangGame = 102 // Juice Garden
	SiXiangGame_SI_XIANG_GAME_JUICE_NORMAL           SiXiangGame = 200
	SiXiangGame_SI_XIANG_GAME_JUICE_FRUIT_BASKET     SiXiangGame = 201
	SiXiangGame_SI_XIANG_GAME_JUICE_FRUIT_RAIN       SiXiangGame = 202
	SiXiangGame_SI_XIANG_GAME_JUICE_FREE_GAME        SiXiangGame = 203
	SiXiangGame_SI_XIANG_GAME_INCA_FREE_GAME         SiXiangGame = 301
)

// Enum value maps for SiXiangGame.
var (
	SiXiangGame_name = map[int32]string{
		0:   "SI_XIANG_GAME_UNSPECIFIED",
		1:   "SI_XIANG_GAME_NORMAL",
		2:   "SI_XIANG_GAME_BONUS",
		3:   "SI_XIANG_GAME_DRAGON_PEARL",
		4:   "SI_XIANG_GAME_LUCKDRAW",
		5:   "SI_XIANG_GAME_GOLDPICK",
		6:   "SI_XIANG_GAME_RAPIDPAY",
		7:   "SI_XIANG_GAME_SIXANGBONUS",
		8:   "SI_XIANG_GAME_SIXANGBONUS_DRAGON_PEARL",
		9:   "SI_XIANG_GAME_SIXANGBONUS_LUCKDRAW",
		10:  "SI_XIANG_GAME_SIXANGBONUS_GOLDPICK",
		11:  "SI_XIANG_GAME_SIXANGBONUS_RAPIDPAY",
		101: "SI_XIANG_GAME_TARZAN_JUNGLE_TREASURE",
		102: "SI_XIANG_GAME_TARZAN_FREESPINX9",
		200: "SI_XIANG_GAME_JUICE_NORMAL",
		201: "SI_XIANG_GAME_JUICE_FRUIT_BASKET",
		202: "SI_XIANG_GAME_JUICE_FRUIT_RAIN",
		203: "SI_XIANG_GAME_JUICE_FREE_GAME",
		301: "SI_XIANG_GAME_INCA_FREE_GAME",
	}
	SiXiangGame_value = map[string]int32{
		"SI_XIANG_GAME_UNSPECIFIED":              0,
		"SI_XIANG_GAME_NORMAL":                   1,
		"SI_XIANG_GAME_BONUS":                    2,
		"SI_XIANG_GAME_DRAGON_PEARL":             3,
		"SI_XIANG_GAME_LUCKDRAW":                 4,
		"SI_XIANG_GAME_GOLDPICK":                 5,
		"SI_XIANG_GAME_RAPIDPAY":                 6,
		"SI_XIANG_GAME_SIXANGBONUS":              7,
		"SI_XIANG_GAME_SIXANGBONUS_DRAGON_PEARL": 8,
		"SI_XIANG_GAME_SIXANGBONUS_LUCKDRAW":     9,
		"SI_XIANG_GAME_SIXANGBONUS_GOLDPICK":     10,
		"SI_XIANG_GAME_SIXANGBONUS_RAPIDPAY":     11,
		"SI_XIANG_GAME_TARZAN_JUNGLE_TREASURE":   101,
		"SI_XIANG_GAME_TARZAN_FREESPINX9":        102,
		"SI_XIANG_GAME_JUICE_NORMAL":             200,
		"SI_XIANG_GAME_JUICE_FRUIT_BASKET":       201,
		"SI_XIANG_GAME_JUICE_FRUIT_RAIN":         202,
		"SI_XIANG_GAME_JUICE_FREE_GAME":          203,
		"SI_XIANG_GAME_INCA_FREE_GAME":           301,
	}
)

func (x SiXiangGame) Enum() *SiXiangGame {
	p := new(SiXiangGame)
	*p = x
	return p
}

func (x SiXiangGame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SiXiangGame) Descriptor() protoreflect.EnumDescriptor {
	return file_slots_game_proto_enumTypes[1].Descriptor()
}

func (SiXiangGame) Type() protoreflect.EnumType {
	return &file_slots_game_proto_enumTypes[1]
}

func (x SiXiangGame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SiXiangGame.Descriptor instead.
func (SiXiangGame) EnumDescriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{1}
}

type BigWin int32

const (
	BigWin_BIG_WIN_UNSPECIFIED BigWin = 0
	BigWin_BIG_WIN_NICE        BigWin = 5
	BigWin_BIG_WIN_HUGE        BigWin = 10
	BigWin_BIG_WIN_BIG         BigWin = 25
	BigWin_BIG_WIN_MEGA        BigWin = 50
)

// Enum value maps for BigWin.
var (
	BigWin_name = map[int32]string{
		0:  "BIG_WIN_UNSPECIFIED",
		5:  "BIG_WIN_NICE",
		10: "BIG_WIN_HUGE",
		25: "BIG_WIN_BIG",
		50: "BIG_WIN_MEGA",
	}
	BigWin_value = map[string]int32{
		"BIG_WIN_UNSPECIFIED": 0,
		"BIG_WIN_NICE":        5,
		"BIG_WIN_HUGE":        10,
		"BIG_WIN_BIG":         25,
		"BIG_WIN_MEGA":        50,
	}
)

func (x BigWin) Enum() *BigWin {
	p := new(BigWin)
	*p = x
	return p
}

func (x BigWin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BigWin) Descriptor() protoreflect.EnumDescriptor {
	return file_slots_game_proto_enumTypes[2].Descriptor()
}

func (BigWin) Type() protoreflect.EnumType {
	return &file_slots_game_proto_enumTypes[2]
}

func (x BigWin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BigWin.Descriptor instead.
func (BigWin) EnumDescriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{2}
}

type WinJackpot int32

const (
	WinJackpot_WIN_JACKPOT_UNSPECIFIED WinJackpot = 0
	WinJackpot_WIN_JACKPOT_MINOR       WinJackpot = 10
	WinJackpot_WIN_JACKPOT_MAJOR       WinJackpot = 20
	WinJackpot_WIN_JACKPOT_MEGA        WinJackpot = 30
	WinJackpot_WIN_JACKPOT_GRAND       WinJackpot = 150
	WinJackpot_WIN_JACKPOT_MINI        WinJackpot = 1
)

// Enum value maps for WinJackpot.
var (
	WinJackpot_name = map[int32]string{
		0:   "WIN_JACKPOT_UNSPECIFIED",
		10:  "WIN_JACKPOT_MINOR",
		20:  "WIN_JACKPOT_MAJOR",
		30:  "WIN_JACKPOT_MEGA",
		150: "WIN_JACKPOT_GRAND",
		1:   "WIN_JACKPOT_MINI",
	}
	WinJackpot_value = map[string]int32{
		"WIN_JACKPOT_UNSPECIFIED": 0,
		"WIN_JACKPOT_MINOR":       10,
		"WIN_JACKPOT_MAJOR":       20,
		"WIN_JACKPOT_MEGA":        30,
		"WIN_JACKPOT_GRAND":       150,
		"WIN_JACKPOT_MINI":        1,
	}
)

func (x WinJackpot) Enum() *WinJackpot {
	p := new(WinJackpot)
	*p = x
	return p
}

func (x WinJackpot) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WinJackpot) Descriptor() protoreflect.EnumDescriptor {
	return file_slots_game_proto_enumTypes[3].Descriptor()
}

func (WinJackpot) Type() protoreflect.EnumType {
	return &file_slots_game_proto_enumTypes[3]
}

func (x WinJackpot) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WinJackpot.Descriptor instead.
func (WinJackpot) EnumDescriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{3}
}

type SlotDesk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ma trận rowxcol ở dạng array 1 chiều,
	// thể hiện các symbol hiện tại của game
	Matrix *SlotMatrix `protobuf:"bytes,1,opt,name=matrix,proto3" json:"matrix,omitempty"`
	// ma trận 5x3 ở dạng array 1 chiều,
	//  thể hiện các symbol hiện tại của game, đã áp dụng rule thay thế wild
	SpreadMatrix *SlotMatrix `protobuf:"bytes,4,opt,name=spread_matrix,json=spreadMatrix,proto3" json:"spread_matrix,omitempty"`
	// mảng chưa danh sách payline đã win.
	Paylines []*Payline `protobuf:"bytes,5,rep,name=paylines,proto3" json:"paylines,omitempty"`
	// mức cược hiện tại của lần spin
	ChipsMcb int64 `protobuf:"varint,6,opt,name=chips_mcb,json=chipsMcb,proto3" json:"chips_mcb,omitempty"`
	// loại game kế tiếp user sẽ chơi
	NextSixiangGame SiXiangGame `protobuf:"varint,7,opt,name=next_sixiang_game,json=nextSixiangGame,proto3,enum=proto.SiXiangGame" json:"next_sixiang_game,omitempty"`
	// loại game hiện tại user đang chơi
	CurrentSixiangGame SiXiangGame `protobuf:"varint,100,opt,name=current_sixiang_game,json=currentSixiangGame,proto3,enum=proto.SiXiangGame" json:"current_sixiang_game,omitempty"`
	// true khi kết thúc game, và có hành động cập nhật số dư ví của user
	// ví dụ game bình thường mỗi lần spin thì sẽ kết thúc game và + tiền
	// nhưng các game đặc biệt như bonus, lucky draw ...
	// thì sau x lần spin mới end game
	// khi đó mới cộng tiền
	IsFinishGame bool `protobuf:"varint,101,opt,name=is_finish_game,json=isFinishGame,proto3" json:"is_finish_game,omitempty"`
	// Is sixinag bonus, x4 reward, chưa làm
	IsInSixiangBonus bool `protobuf:"varint,110,opt,name=is_in_sixiang_bonus,json=isInSixiangBonus,proto3" json:"is_in_sixiang_bonus,omitempty"`
	// các mảng symbol quay được ở các game đặc biệt.
	SpinSymbols []*SpinSymbol `protobuf:"bytes,8,rep,name=spin_symbols,json=spinSymbols,proto3" json:"spin_symbols,omitempty"`
	// loại jackot đã win
	WinJp WinJackpot `protobuf:"varint,9,opt,name=win_jp,json=winJp,proto3,enum=proto.WinJackpot" json:"win_jp,omitempty"`
	// loại big win (mega, huge, big...)
	BigWin BigWin `protobuf:"varint,11,opt,name=big_win,json=bigWin,proto3,enum=proto.BigWin" json:"big_win,omitempty"`
	// tổng số chip thắng trong game
	// int64 chips_win = 13;
	// cap nhat bien dong so du trong wallet
	// nếu true, có nghĩa có action cộng tiền ở wallet
	// nếu fale, 2 giá trị balance_chips_wallet_before và
	// balance_chips_wallet_after luôn = 0, nên bỏ qua
	// bool update_wallet = 104;
	GameReward *GameReward `protobuf:"bytes,14,opt,name=game_reward,json=gameReward,proto3" json:"game_reward,omitempty"`
	// int64 total_chips_win_by_game = 17;
	// số chip trong wallet trước spin
	// các symbol đặc biệt thu thập được,
	// vd như eye ở sixiang, letter ở tarzan
	CollectionSymbols []*CollectSymbol `protobuf:"bytes,16,rep,name=collection_symbols,json=collectionSymbols,proto3" json:"collection_symbols,omitempty"`
	// ngọc rừng xanh ở tarzan game
	TsUnix           int64 `protobuf:"varint,21,opt,name=ts_unix,json=tsUnix,proto3" json:"ts_unix,omitempty"`
	RatioFruitBasket int64 `protobuf:"varint,22,opt,name=ratio_fruit_basket,json=ratioFruitBasket,proto3" json:"ratio_fruit_basket,omitempty"`
	// số lượt spin còn lại, -1 = unlimited
	NumSpinLeft int64    `protobuf:"varint,23,opt,name=num_spin_left,json=numSpinLeft,proto3" json:"num_spin_left,omitempty"`
	BetLevels   []int64  `protobuf:"varint,24,rep,packed,name=bet_levels,json=betLevels,proto3" json:"bet_levels,omitempty"`
	InfoBet     *InfoBet `protobuf:"bytes,25,opt,name=info_bet,json=infoBet,proto3" json:"info_bet,omitempty"`
	ChipsBuyGem int64    `protobuf:"varint,26,opt,name=chips_buy_gem,json=chipsBuyGem,proto3" json:"chips_buy_gem,omitempty"`
	// số ngọc collect được để mở SI XIANG BONUS game
	// symbol is
	// SI_XIANG_GAME_DRAGON_PEARL
	// SI_XIANG_GAME_LUCKDRAW
	// SI_XIANG_GAME_GOLDPICK
	// SI_XIANG_GAME_RAPIDPAY
	SixiangGems   []SiXiangGame   `protobuf:"varint,27,rep,packed,name=sixiang_gems,json=sixiangGems,proto3,enum=proto.SiXiangGame" json:"sixiang_gems,omitempty"`
	LetterSymbols []SiXiangSymbol `protobuf:"varint,28,rep,packed,name=letter_symbols,json=letterSymbols,proto3,enum=proto.SiXiangSymbol" json:"letter_symbols,omitempty"`
	WinJpHistory  *JackpotHistory `protobuf:"bytes,29,opt,name=win_jp_history,json=winJpHistory,proto3" json:"win_jp_history,omitempty"`
	GameConfig    *GameConfig     `protobuf:"bytes,30,opt,name=game_config,json=gameConfig,proto3" json:"game_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SlotDesk) Reset() {
	*x = SlotDesk{}
	mi := &file_slots_game_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlotDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotDesk) ProtoMessage() {}

func (x *SlotDesk) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotDesk.ProtoReflect.Descriptor instead.
func (*SlotDesk) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{0}
}

func (x *SlotDesk) GetMatrix() *SlotMatrix {
	if x != nil {
		return x.Matrix
	}
	return nil
}

func (x *SlotDesk) GetSpreadMatrix() *SlotMatrix {
	if x != nil {
		return x.SpreadMatrix
	}
	return nil
}

func (x *SlotDesk) GetPaylines() []*Payline {
	if x != nil {
		return x.Paylines
	}
	return nil
}

func (x *SlotDesk) GetChipsMcb() int64 {
	if x != nil {
		return x.ChipsMcb
	}
	return 0
}

func (x *SlotDesk) GetNextSixiangGame() SiXiangGame {
	if x != nil {
		return x.NextSixiangGame
	}
	return SiXiangGame_SI_XIANG_GAME_UNSPECIFIED
}

func (x *SlotDesk) GetCurrentSixiangGame() SiXiangGame {
	if x != nil {
		return x.CurrentSixiangGame
	}
	return SiXiangGame_SI_XIANG_GAME_UNSPECIFIED
}

func (x *SlotDesk) GetIsFinishGame() bool {
	if x != nil {
		return x.IsFinishGame
	}
	return false
}

func (x *SlotDesk) GetIsInSixiangBonus() bool {
	if x != nil {
		return x.IsInSixiangBonus
	}
	return false
}

func (x *SlotDesk) GetSpinSymbols() []*SpinSymbol {
	if x != nil {
		return x.SpinSymbols
	}
	return nil
}

func (x *SlotDesk) GetWinJp() WinJackpot {
	if x != nil {
		return x.WinJp
	}
	return WinJackpot_WIN_JACKPOT_UNSPECIFIED
}

func (x *SlotDesk) GetBigWin() BigWin {
	if x != nil {
		return x.BigWin
	}
	return BigWin_BIG_WIN_UNSPECIFIED
}

func (x *SlotDesk) GetGameReward() *GameReward {
	if x != nil {
		return x.GameReward
	}
	return nil
}

func (x *SlotDesk) GetCollectionSymbols() []*CollectSymbol {
	if x != nil {
		return x.CollectionSymbols
	}
	return nil
}

func (x *SlotDesk) GetTsUnix() int64 {
	if x != nil {
		return x.TsUnix
	}
	return 0
}

func (x *SlotDesk) GetRatioFruitBasket() int64 {
	if x != nil {
		return x.RatioFruitBasket
	}
	return 0
}

func (x *SlotDesk) GetNumSpinLeft() int64 {
	if x != nil {
		return x.NumSpinLeft
	}
	return 0
}

func (x *SlotDesk) GetBetLevels() []int64 {
	if x != nil {
		return x.BetLevels
	}
	return nil
}

func (x *SlotDesk) GetInfoBet() *InfoBet {
	if x != nil {
		return x.InfoBet
	}
	return nil
}

func (x *SlotDesk) GetChipsBuyGem() int64 {
	if x != nil {
		return x.ChipsBuyGem
	}
	return 0
}

func (x *SlotDesk) GetSixiangGems() []SiXiangGame {
	if x != nil {
		return x.SixiangGems
	}
	return nil
}

func (x *SlotDesk) GetLetterSymbols() []SiXiangSymbol {
	if x != nil {
		return x.LetterSymbols
	}
	return nil
}

func (x *SlotDesk) GetWinJpHistory() *JackpotHistory {
	if x != nil {
		return x.WinJpHistory
	}
	return nil
}

func (x *SlotDesk) GetGameConfig() *GameConfig {
	if x != nil {
		return x.GameConfig
	}
	return nil
}

type GameConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NumScatterSeq int64                  `protobuf:"varint,1,opt,name=num_scatter_seq,json=numScatterSeq,proto3" json:"num_scatter_seq,omitempty"`
	NumFreeSpin   int64                  `protobuf:"varint,2,opt,name=num_free_spin,json=numFreeSpin,proto3" json:"num_free_spin,omitempty"`
	NumWild       int64                  `protobuf:"varint,3,opt,name=num_wild,json=numWild,proto3" json:"num_wild,omitempty"`
	RatioWild     float32                `protobuf:"fixed32,4,opt,name=ratio_wild,json=ratioWild,proto3" json:"ratio_wild,omitempty"`
	RatioBasket   float32                `protobuf:"fixed32,5,opt,name=ratio_basket,json=ratioBasket,proto3" json:"ratio_basket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameConfig) Reset() {
	*x = GameConfig{}
	mi := &file_slots_game_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfig) ProtoMessage() {}

func (x *GameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfig.ProtoReflect.Descriptor instead.
func (*GameConfig) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{1}
}

func (x *GameConfig) GetNumScatterSeq() int64 {
	if x != nil {
		return x.NumScatterSeq
	}
	return 0
}

func (x *GameConfig) GetNumFreeSpin() int64 {
	if x != nil {
		return x.NumFreeSpin
	}
	return 0
}

func (x *GameConfig) GetNumWild() int64 {
	if x != nil {
		return x.NumWild
	}
	return 0
}

func (x *GameConfig) GetRatioWild() float32 {
	if x != nil {
		return x.RatioWild
	}
	return 0
}

func (x *GameConfig) GetRatioBasket() float32 {
	if x != nil {
		return x.RatioBasket
	}
	return 0
}

// Ma trận symbol
type SlotMatrix struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Mảng 2 chiều ở dạng list, rowxcol
	Lists []SiXiangSymbol `protobuf:"varint,1,rep,packed,name=lists,proto3,enum=proto.SiXiangSymbol" json:"lists,omitempty"`
	// số hàng tối đa
	Rows int32 `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
	// số cột tối đa
	Cols          int32         `protobuf:"varint,3,opt,name=cols,proto3" json:"cols,omitempty"`
	SpinLists     []*SpinSymbol `protobuf:"bytes,4,rep,name=spin_lists,json=spinLists,proto3" json:"spin_lists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SlotMatrix) Reset() {
	*x = SlotMatrix{}
	mi := &file_slots_game_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlotMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotMatrix) ProtoMessage() {}

func (x *SlotMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotMatrix.ProtoReflect.Descriptor instead.
func (*SlotMatrix) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{2}
}

func (x *SlotMatrix) GetLists() []SiXiangSymbol {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *SlotMatrix) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *SlotMatrix) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *SlotMatrix) GetSpinLists() []*SpinSymbol {
	if x != nil {
		return x.SpinLists
	}
	return nil
}

// Symbol quay được
// có số hàng là row, côt là col
// với ô đầu tính ở (0,0)
type SpinSymbol struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        SiXiangSymbol          `protobuf:"varint,1,opt,name=symbol,proto3,enum=proto.SiXiangSymbol" json:"symbol,omitempty"`
	Col           int32                  `protobuf:"varint,2,opt,name=col,proto3" json:"col,omitempty"`
	Row           int32                  `protobuf:"varint,3,opt,name=row,proto3" json:"row,omitempty"`
	Ratio         float32                `protobuf:"fixed32,4,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Index         int32                  `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	WinJp         WinJackpot             `protobuf:"varint,6,opt,name=win_jp,json=winJp,proto3,enum=proto.WinJackpot" json:"win_jp,omitempty"`
	WinAmount     int64                  `protobuf:"varint,7,opt,name=win_amount,json=winAmount,proto3" json:"win_amount,omitempty"`
	RatioBonus    float32                `protobuf:"fixed32,8,opt,name=ratio_bonus,json=ratioBonus,proto3" json:"ratio_bonus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpinSymbol) Reset() {
	*x = SpinSymbol{}
	mi := &file_slots_game_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpinSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpinSymbol) ProtoMessage() {}

func (x *SpinSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpinSymbol.ProtoReflect.Descriptor instead.
func (*SpinSymbol) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{3}
}

func (x *SpinSymbol) GetSymbol() SiXiangSymbol {
	if x != nil {
		return x.Symbol
	}
	return SiXiangSymbol_SI_XIANG_SYMBOL_UNSPECIFIED
}

func (x *SpinSymbol) GetCol() int32 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *SpinSymbol) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *SpinSymbol) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *SpinSymbol) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SpinSymbol) GetWinJp() WinJackpot {
	if x != nil {
		return x.WinJp
	}
	return WinJackpot_WIN_JACKPOT_UNSPECIFIED
}

func (x *SpinSymbol) GetWinAmount() int64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

func (x *SpinSymbol) GetRatioBonus() float32 {
	if x != nil {
		return x.RatioBonus
	}
	return 0
}

type CollectSymbol struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        SiXiangSymbol          `protobuf:"varint,1,opt,name=symbol,proto3,enum=proto.SiXiangSymbol" json:"symbol,omitempty"`
	Qty           int64                  `protobuf:"varint,2,opt,name=qty,proto3" json:"qty,omitempty"` // so luong
	Ratio         float32                `protobuf:"fixed32,3,opt,name=ratio,proto3" json:"ratio,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectSymbol) Reset() {
	*x = CollectSymbol{}
	mi := &file_slots_game_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectSymbol) ProtoMessage() {}

func (x *CollectSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectSymbol.ProtoReflect.Descriptor instead.
func (*CollectSymbol) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{4}
}

func (x *CollectSymbol) GetSymbol() SiXiangSymbol {
	if x != nil {
		return x.Symbol
	}
	return SiXiangSymbol_SI_XIANG_SYMBOL_UNSPECIFIED
}

func (x *CollectSymbol) GetQty() int64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *CollectSymbol) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

type JackpotReward struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	WinJackpot WinJackpot             `protobuf:"varint,1,opt,name=win_jackpot,json=winJackpot,proto3,enum=proto.WinJackpot" json:"win_jackpot,omitempty"`
	Ratio      int64                  `protobuf:"varint,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Count      int64                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Chips      int64                  `protobuf:"varint,4,opt,name=chips,proto3" json:"chips,omitempty"`
	// tích lũy lịch sử chơi
	ChipsAccum    int64 `protobuf:"varint,5,opt,name=chips_accum,json=chipsAccum,proto3" json:"chips_accum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JackpotReward) Reset() {
	*x = JackpotReward{}
	mi := &file_slots_game_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JackpotReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JackpotReward) ProtoMessage() {}

func (x *JackpotReward) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JackpotReward.ProtoReflect.Descriptor instead.
func (*JackpotReward) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{5}
}

func (x *JackpotReward) GetWinJackpot() WinJackpot {
	if x != nil {
		return x.WinJackpot
	}
	return WinJackpot_WIN_JACKPOT_UNSPECIFIED
}

func (x *JackpotReward) GetRatio() int64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *JackpotReward) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *JackpotReward) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *JackpotReward) GetChipsAccum() int64 {
	if x != nil {
		return x.ChipsAccum
	}
	return 0
}

type JackpotHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Minor         *JackpotReward         `protobuf:"bytes,1,opt,name=minor,proto3" json:"minor,omitempty"`
	Major         *JackpotReward         `protobuf:"bytes,2,opt,name=major,proto3" json:"major,omitempty"`
	Mega          *JackpotReward         `protobuf:"bytes,3,opt,name=mega,proto3" json:"mega,omitempty"`
	Grand         *JackpotReward         `protobuf:"bytes,4,opt,name=grand,proto3" json:"grand,omitempty"`
	Mini          *JackpotReward         `protobuf:"bytes,5,opt,name=mini,proto3" json:"mini,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JackpotHistory) Reset() {
	*x = JackpotHistory{}
	mi := &file_slots_game_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JackpotHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JackpotHistory) ProtoMessage() {}

func (x *JackpotHistory) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JackpotHistory.ProtoReflect.Descriptor instead.
func (*JackpotHistory) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{6}
}

func (x *JackpotHistory) GetMinor() *JackpotReward {
	if x != nil {
		return x.Minor
	}
	return nil
}

func (x *JackpotHistory) GetMajor() *JackpotReward {
	if x != nil {
		return x.Major
	}
	return nil
}

func (x *JackpotHistory) GetMega() *JackpotReward {
	if x != nil {
		return x.Mega
	}
	return nil
}

func (x *JackpotHistory) GetGrand() *JackpotReward {
	if x != nil {
		return x.Grand
	}
	return nil
}

func (x *JackpotHistory) GetMini() *JackpotReward {
	if x != nil {
		return x.Mini
	}
	return nil
}

type Payline struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Id       int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol   SiXiangSymbol          `protobuf:"varint,2,opt,name=symbol,proto3,enum=proto.SiXiangSymbol" json:"symbol,omitempty"`
	NumOccur int32                  `protobuf:"varint,3,opt,name=num_occur,json=numOccur,proto3" json:"num_occur,omitempty"`
	Rate     float64                `protobuf:"fixed64,4,opt,name=rate,proto3" json:"rate,omitempty"`
	Chips    int64                  `protobuf:"varint,5,opt,name=chips,proto3" json:"chips,omitempty"`
	// Array contain index of symbol in matrix
	Indices       []int32 `protobuf:"varint,6,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Payline) Reset() {
	*x = Payline{}
	mi := &file_slots_game_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Payline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payline) ProtoMessage() {}

func (x *Payline) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payline.ProtoReflect.Descriptor instead.
func (*Payline) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{7}
}

func (x *Payline) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Payline) GetSymbol() SiXiangSymbol {
	if x != nil {
		return x.Symbol
	}
	return SiXiangSymbol_SI_XIANG_SYMBOL_UNSPECIFIED
}

func (x *Payline) GetNumOccur() int32 {
	if x != nil {
		return x.NumOccur
	}
	return 0
}

func (x *Payline) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Payline) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *Payline) GetIndices() []int32 {
	if x != nil {
		return x.Indices
	}
	return nil
}

type GameReward struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	UpdateWallet bool                   `protobuf:"varint,1,opt,name=update_wallet,json=updateWallet,proto3" json:"update_wallet,omitempty"`
	// số chip trong wallet trước spin
	BalanceChipsWalletBefore int64 `protobuf:"varint,2,opt,name=balance_chips_wallet_before,json=balanceChipsWalletBefore,proto3" json:"balance_chips_wallet_before,omitempty"`
	// số chip trong wallet sau spin
	BalanceChipsWalletAfter int64 `protobuf:"varint,3,opt,name=balance_chips_wallet_after,json=balanceChipsWalletAfter,proto3" json:"balance_chips_wallet_after,omitempty"`
	// tổng chip win trong 1 game
	ChipsWin int64 `protobuf:"varint,4,opt,name=chips_win,json=chipsWin,proto3" json:"chips_win,omitempty"`
	// vd trong game tarzan,
	// chip ở đây sẽ là tổng chip trong 9 lần spin
	TotalChipsWinByGame int64 `protobuf:"varint,5,opt,name=total_chips_win_by_game,json=totalChipsWinByGame,proto3" json:"total_chips_win_by_game,omitempty"`
	// ngọc rừng xanh ở tarzan game
	UpdateChipsBonus bool `protobuf:"varint,6,opt,name=update_chips_bonus,json=updateChipsBonus,proto3" json:"update_chips_bonus,omitempty"`
	// int64 chips_bonus = 7;
	// save ratio win in some case
	RatioWin      float32 `protobuf:"fixed32,8,opt,name=ratio_win,json=ratioWin,proto3" json:"ratio_win,omitempty"`
	LineWin       int64   `protobuf:"varint,9,opt,name=line_win,json=lineWin,proto3" json:"line_win,omitempty"`
	TotalRatioWin float32 `protobuf:"fixed32,10,opt,name=total_ratio_win,json=totalRatioWin,proto3" json:"total_ratio_win,omitempty"`
	TotalLineWin  int64   `protobuf:"varint,11,opt,name=total_line_win,json=totalLineWin,proto3" json:"total_line_win,omitempty"`
	ChipBetFee    int64   `protobuf:"varint,12,opt,name=chip_bet_fee,json=chipBetFee,proto3" json:"chip_bet_fee,omitempty"`
	ChipFee       int64   `protobuf:"varint,13,opt,name=chip_fee,json=chipFee,proto3" json:"chip_fee,omitempty"`
	// ratio bonus like tarzan payline cross freespin
	RatioBonus float32 `protobuf:"fixed32,14,opt,name=ratio_bonus,json=ratioBonus,proto3" json:"ratio_bonus,omitempty"`
	// tarzan PerlGreenForest
	PerlGreenForest             int32 `protobuf:"varint,15,opt,name=perl_green_forest,json=perlGreenForest,proto3" json:"perl_green_forest,omitempty"`
	PerlGreenForestChips        int64 `protobuf:"varint,16,opt,name=perl_green_forest_chips,json=perlGreenForestChips,proto3" json:"perl_green_forest_chips,omitempty"`
	PerlGreenForestChipsCollect int64 `protobuf:"varint,17,opt,name=perl_green_forest_chips_collect,json=perlGreenForestChipsCollect,proto3" json:"perl_green_forest_chips_collect,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *GameReward) Reset() {
	*x = GameReward{}
	mi := &file_slots_game_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameReward) ProtoMessage() {}

func (x *GameReward) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameReward.ProtoReflect.Descriptor instead.
func (*GameReward) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{8}
}

func (x *GameReward) GetUpdateWallet() bool {
	if x != nil {
		return x.UpdateWallet
	}
	return false
}

func (x *GameReward) GetBalanceChipsWalletBefore() int64 {
	if x != nil {
		return x.BalanceChipsWalletBefore
	}
	return 0
}

func (x *GameReward) GetBalanceChipsWalletAfter() int64 {
	if x != nil {
		return x.BalanceChipsWalletAfter
	}
	return 0
}

func (x *GameReward) GetChipsWin() int64 {
	if x != nil {
		return x.ChipsWin
	}
	return 0
}

func (x *GameReward) GetTotalChipsWinByGame() int64 {
	if x != nil {
		return x.TotalChipsWinByGame
	}
	return 0
}

func (x *GameReward) GetUpdateChipsBonus() bool {
	if x != nil {
		return x.UpdateChipsBonus
	}
	return false
}

func (x *GameReward) GetRatioWin() float32 {
	if x != nil {
		return x.RatioWin
	}
	return 0
}

func (x *GameReward) GetLineWin() int64 {
	if x != nil {
		return x.LineWin
	}
	return 0
}

func (x *GameReward) GetTotalRatioWin() float32 {
	if x != nil {
		return x.TotalRatioWin
	}
	return 0
}

func (x *GameReward) GetTotalLineWin() int64 {
	if x != nil {
		return x.TotalLineWin
	}
	return 0
}

func (x *GameReward) GetChipBetFee() int64 {
	if x != nil {
		return x.ChipBetFee
	}
	return 0
}

func (x *GameReward) GetChipFee() int64 {
	if x != nil {
		return x.ChipFee
	}
	return 0
}

func (x *GameReward) GetRatioBonus() float32 {
	if x != nil {
		return x.RatioBonus
	}
	return 0
}

func (x *GameReward) GetPerlGreenForest() int32 {
	if x != nil {
		return x.PerlGreenForest
	}
	return 0
}

func (x *GameReward) GetPerlGreenForestChips() int64 {
	if x != nil {
		return x.PerlGreenForestChips
	}
	return 0
}

func (x *GameReward) GetPerlGreenForestChipsCollect() int64 {
	if x != nil {
		return x.PerlGreenForestChipsCollect
	}
	return 0
}

type SaveGame struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LastUpdateUnix int64                  `protobuf:"varint,1,opt,name=last_update_unix,json=lastUpdateUnix,proto3" json:"last_update_unix,omitempty"`
	Data           string                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SaveGame) Reset() {
	*x = SaveGame{}
	mi := &file_slots_game_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveGame) ProtoMessage() {}

func (x *SaveGame) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveGame.ProtoReflect.Descriptor instead.
func (*SaveGame) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{9}
}

func (x *SaveGame) GetLastUpdateUnix() int64 {
	if x != nil {
		return x.LastUpdateUnix
	}
	return 0
}

func (x *SaveGame) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_slots_game_proto protoreflect.FileDescriptor

const file_slots_game_proto_rawDesc = "" +
	"\n" +
	"\x10slots_game.proto\x12\x05proto\x1a\x10color_game.proto\"\xd0\b\n" +
	"\bSlotDesk\x12)\n" +
	"\x06matrix\x18\x01 \x01(\v2\x11.proto.SlotMatrixR\x06matrix\x126\n" +
	"\rspread_matrix\x18\x04 \x01(\v2\x11.proto.SlotMatrixR\fspreadMatrix\x12*\n" +
	"\bpaylines\x18\x05 \x03(\v2\x0e.proto.PaylineR\bpaylines\x12\x1b\n" +
	"\tchips_mcb\x18\x06 \x01(\x03R\bchipsMcb\x12>\n" +
	"\x11next_sixiang_game\x18\a \x01(\x0e2\x12.proto.SiXiangGameR\x0fnextSixiangGame\x12D\n" +
	"\x14current_sixiang_game\x18d \x01(\x0e2\x12.proto.SiXiangGameR\x12currentSixiangGame\x12$\n" +
	"\x0eis_finish_game\x18e \x01(\bR\fisFinishGame\x12-\n" +
	"\x13is_in_sixiang_bonus\x18n \x01(\bR\x10isInSixiangBonus\x124\n" +
	"\fspin_symbols\x18\b \x03(\v2\x11.proto.SpinSymbolR\vspinSymbols\x12(\n" +
	"\x06win_jp\x18\t \x01(\x0e2\x11.proto.WinJackpotR\x05winJp\x12&\n" +
	"\abig_win\x18\v \x01(\x0e2\r.proto.BigWinR\x06bigWin\x122\n" +
	"\vgame_reward\x18\x0e \x01(\v2\x11.proto.GameRewardR\n" +
	"gameReward\x12C\n" +
	"\x12collection_symbols\x18\x10 \x03(\v2\x14.proto.CollectSymbolR\x11collectionSymbols\x12\x17\n" +
	"\ats_unix\x18\x15 \x01(\x03R\x06tsUnix\x12,\n" +
	"\x12ratio_fruit_basket\x18\x16 \x01(\x03R\x10ratioFruitBasket\x12\"\n" +
	"\rnum_spin_left\x18\x17 \x01(\x03R\vnumSpinLeft\x12\x1d\n" +
	"\n" +
	"bet_levels\x18\x18 \x03(\x03R\tbetLevels\x12)\n" +
	"\binfo_bet\x18\x19 \x01(\v2\x0e.proto.InfoBetR\ainfoBet\x12\"\n" +
	"\rchips_buy_gem\x18\x1a \x01(\x03R\vchipsBuyGem\x125\n" +
	"\fsixiang_gems\x18\x1b \x03(\x0e2\x12.proto.SiXiangGameR\vsixiangGems\x12;\n" +
	"\x0eletter_symbols\x18\x1c \x03(\x0e2\x14.proto.SiXiangSymbolR\rletterSymbols\x12;\n" +
	"\x0ewin_jp_history\x18\x1d \x01(\v2\x15.proto.JackpotHistoryR\fwinJpHistory\x122\n" +
	"\vgame_config\x18\x1e \x01(\v2\x11.proto.GameConfigR\n" +
	"gameConfig\"\xb5\x01\n" +
	"\n" +
	"GameConfig\x12&\n" +
	"\x0fnum_scatter_seq\x18\x01 \x01(\x03R\rnumScatterSeq\x12\"\n" +
	"\rnum_free_spin\x18\x02 \x01(\x03R\vnumFreeSpin\x12\x19\n" +
	"\bnum_wild\x18\x03 \x01(\x03R\anumWild\x12\x1d\n" +
	"\n" +
	"ratio_wild\x18\x04 \x01(\x02R\tratioWild\x12!\n" +
	"\fratio_basket\x18\x05 \x01(\x02R\vratioBasket\"\x92\x01\n" +
	"\n" +
	"SlotMatrix\x12*\n" +
	"\x05lists\x18\x01 \x03(\x0e2\x14.proto.SiXiangSymbolR\x05lists\x12\x12\n" +
	"\x04rows\x18\x02 \x01(\x05R\x04rows\x12\x12\n" +
	"\x04cols\x18\x03 \x01(\x05R\x04cols\x120\n" +
	"\n" +
	"spin_lists\x18\x04 \x03(\v2\x11.proto.SpinSymbolR\tspinLists\"\xf4\x01\n" +
	"\n" +
	"SpinSymbol\x12,\n" +
	"\x06symbol\x18\x01 \x01(\x0e2\x14.proto.SiXiangSymbolR\x06symbol\x12\x10\n" +
	"\x03col\x18\x02 \x01(\x05R\x03col\x12\x10\n" +
	"\x03row\x18\x03 \x01(\x05R\x03row\x12\x14\n" +
	"\x05ratio\x18\x04 \x01(\x02R\x05ratio\x12\x14\n" +
	"\x05index\x18\x05 \x01(\x05R\x05index\x12(\n" +
	"\x06win_jp\x18\x06 \x01(\x0e2\x11.proto.WinJackpotR\x05winJp\x12\x1d\n" +
	"\n" +
	"win_amount\x18\a \x01(\x03R\twinAmount\x12\x1f\n" +
	"\vratio_bonus\x18\b \x01(\x02R\n" +
	"ratioBonus\"e\n" +
	"\rCollectSymbol\x12,\n" +
	"\x06symbol\x18\x01 \x01(\x0e2\x14.proto.SiXiangSymbolR\x06symbol\x12\x10\n" +
	"\x03qty\x18\x02 \x01(\x03R\x03qty\x12\x14\n" +
	"\x05ratio\x18\x03 \x01(\x02R\x05ratio\"\xa6\x01\n" +
	"\rJackpotReward\x122\n" +
	"\vwin_jackpot\x18\x01 \x01(\x0e2\x11.proto.WinJackpotR\n" +
	"winJackpot\x12\x14\n" +
	"\x05ratio\x18\x02 \x01(\x03R\x05ratio\x12\x14\n" +
	"\x05count\x18\x03 \x01(\x03R\x05count\x12\x14\n" +
	"\x05chips\x18\x04 \x01(\x03R\x05chips\x12\x1f\n" +
	"\vchips_accum\x18\x05 \x01(\x03R\n" +
	"chipsAccum\"\xe8\x01\n" +
	"\x0eJackpotHistory\x12*\n" +
	"\x05minor\x18\x01 \x01(\v2\x14.proto.JackpotRewardR\x05minor\x12*\n" +
	"\x05major\x18\x02 \x01(\v2\x14.proto.JackpotRewardR\x05major\x12(\n" +
	"\x04mega\x18\x03 \x01(\v2\x14.proto.JackpotRewardR\x04mega\x12*\n" +
	"\x05grand\x18\x04 \x01(\v2\x14.proto.JackpotRewardR\x05grand\x12(\n" +
	"\x04mini\x18\x05 \x01(\v2\x14.proto.JackpotRewardR\x04mini\"\xa8\x01\n" +
	"\aPayline\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12,\n" +
	"\x06symbol\x18\x02 \x01(\x0e2\x14.proto.SiXiangSymbolR\x06symbol\x12\x1b\n" +
	"\tnum_occur\x18\x03 \x01(\x05R\bnumOccur\x12\x12\n" +
	"\x04rate\x18\x04 \x01(\x01R\x04rate\x12\x14\n" +
	"\x05chips\x18\x05 \x01(\x03R\x05chips\x12\x18\n" +
	"\aindices\x18\x06 \x03(\x05R\aindices\"\xbb\x05\n" +
	"\n" +
	"GameReward\x12#\n" +
	"\rupdate_wallet\x18\x01 \x01(\bR\fupdateWallet\x12=\n" +
	"\x1bbalance_chips_wallet_before\x18\x02 \x01(\x03R\x18balanceChipsWalletBefore\x12;\n" +
	"\x1abalance_chips_wallet_after\x18\x03 \x01(\x03R\x17balanceChipsWalletAfter\x12\x1b\n" +
	"\tchips_win\x18\x04 \x01(\x03R\bchipsWin\x124\n" +
	"\x17total_chips_win_by_game\x18\x05 \x01(\x03R\x13totalChipsWinByGame\x12,\n" +
	"\x12update_chips_bonus\x18\x06 \x01(\bR\x10updateChipsBonus\x12\x1b\n" +
	"\tratio_win\x18\b \x01(\x02R\bratioWin\x12\x19\n" +
	"\bline_win\x18\t \x01(\x03R\alineWin\x12&\n" +
	"\x0ftotal_ratio_win\x18\n" +
	" \x01(\x02R\rtotalRatioWin\x12$\n" +
	"\x0etotal_line_win\x18\v \x01(\x03R\ftotalLineWin\x12 \n" +
	"\fchip_bet_fee\x18\f \x01(\x03R\n" +
	"chipBetFee\x12\x19\n" +
	"\bchip_fee\x18\r \x01(\x03R\achipFee\x12\x1f\n" +
	"\vratio_bonus\x18\x0e \x01(\x02R\n" +
	"ratioBonus\x12*\n" +
	"\x11perl_green_forest\x18\x0f \x01(\x05R\x0fperlGreenForest\x125\n" +
	"\x17perl_green_forest_chips\x18\x10 \x01(\x03R\x14perlGreenForestChips\x12D\n" +
	"\x1fperl_green_forest_chips_collect\x18\x11 \x01(\x03R\x1bperlGreenForestChipsCollect\"H\n" +
	"\bSaveGame\x12(\n" +
	"\x10last_update_unix\x18\x01 \x01(\x03R\x0elastUpdateUnix\x12\x12\n" +
	"\x04data\x18\x02 \x01(\tR\x04data*\xcf\"\n" +
	"\rSiXiangSymbol\x12\x1f\n" +
	"\x1bSI_XIANG_SYMBOL_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12SI_XIANG_SYMBOL_10\x10\x01\x12\x15\n" +
	"\x11SI_XIANG_SYMBOL_J\x10\x02\x12\x15\n" +
	"\x11SI_XIANG_SYMBOL_Q\x10\x04\x12\x15\n" +
	"\x11SI_XIANG_SYMBOL_K\x10\b\x12\x15\n" +
	"\x11SI_XIANG_SYMBOL_A\x10\x10\x12\x1f\n" +
	"\x1bSI_XIANG_SYMBOL_BLUE_DRAGON\x10 \x12\x1f\n" +
	"\x1bSI_XIANG_SYMBOL_WHITE_TIGER\x10@\x12#\n" +
	"\x1eSI_XIANG_SYMBOL_VERMILION_BIRD\x10\x80\x01\x12\x1c\n" +
	"\x17SI_XIANG_SYMBOL_WARRIOR\x10\x80\x02\x12\x1c\n" +
	"\x17SI_XIANG_SYMBOL_SCATTER\x10\x80\x04\x12%\n" +
	" SI_XIANG_SYMBOL_BONUS_DRAGONBALL\x10\x81\b\x12$\n" +
	"\x1fSI_XIANG_SYMBOL_BONUS_LUCKYDRAW\x10\x82\b\x12#\n" +
	"\x1eSI_XIANG_SYMBOL_BONUS_GOLDPICK\x10\x83\b\x12#\n" +
	"\x1eSI_XIANG_SYMBOL_BONUS_RAPIDPAY\x10\x84\b\x12\"\n" +
	"\x1dSI_XIANG_SYMBOL_BONUS_GOLDX10\x10\x85\b\x12\"\n" +
	"\x1dSI_XIANG_SYMBOL_BONUS_GOLDX20\x10\x86\b\x12\"\n" +
	"\x1dSI_XIANG_SYMBOL_BONUS_GOLDX30\x10\x87\b\x12\"\n" +
	"\x1dSI_XIANG_SYMBOL_BONUS_GOLDX50\x10\x88\b\x12*\n" +
	"%SI_XIANG_SYMBOL_DRAGONPEARL_LUCKMONEY\x10\x80\n" +
	"\x12,\n" +
	"'SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM1\x10\x81\n" +
	"\x12,\n" +
	"'SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM2\x10\x82\n" +
	"\x12,\n" +
	"'SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM3\x10\x83\n" +
	"\x12,\n" +
	"'SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM4\x10\x84\n" +
	"\x12,\n" +
	"'SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM5\x10\x85\n" +
	"\x12)\n" +
	"$SI_XIANG_SYMBOL_DRAGONPEARL_EYE_BIRD\x10\x90\n" +
	"\x12*\n" +
	"%SI_XIANG_SYMBOL_DRAGONPEARL_EYE_TIGER\x10\x91\n" +
	"\x12,\n" +
	"'SI_XIANG_SYMBOL_DRAGONPEARL_EYE_WARRIOR\x10\x92\n" +
	"\x12+\n" +
	"&SI_XIANG_SYMBOL_DRAGONPEARL_EYE_DRAGON\x10\x93\n" +
	"\x12)\n" +
	"$SI_XIANG_SYMBOL_DRAGONPEARL_JP_MINOR\x10\x94\n" +
	"\x12)\n" +
	"$SI_XIANG_SYMBOL_DRAGONPEARL_JP_MAJOR\x10\x95\n" +
	"\x12(\n" +
	"#SI_XIANG_SYMBOL_DRAGONPEARL_JP_MEGA\x10\x96\n" +
	"\x12)\n" +
	"$SI_XIANG_SYMBOL_DRAGONPEARL_JP_GRAND\x10\x97\n" +
	"\x12$\n" +
	"\x1fSI_XIANG_SYMBOL_LUCKYDRAW_MINOR\x10\x80\f\x12$\n" +
	"\x1fSI_XIANG_SYMBOL_LUCKYDRAW_MAJOR\x10\x81\f\x12#\n" +
	"\x1eSI_XIANG_SYMBOL_LUCKYDRAW_MEGA\x10\x82\f\x12$\n" +
	"\x1fSI_XIANG_SYMBOL_LUCKYDRAW_GRAND\x10\x83\f\x12%\n" +
	" SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_1\x10\x84\f\x12%\n" +
	" SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_2\x10\x85\f\x12%\n" +
	" SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_3\x10\x86\f\x12'\n" +
	"\"SI_XIANG_SYMBOL_GOLD_PICK_TRYAGAIN\x10\x80\x0e\x12$\n" +
	"\x1fSI_XIANG_SYMBOL_GOLD_PICK_GOLD1\x10\x81\x0e\x12$\n" +
	"\x1fSI_XIANG_SYMBOL_GOLD_PICK_GOLD2\x10\x82\x0e\x12$\n" +
	"\x1fSI_XIANG_SYMBOL_GOLD_PICK_GOLD3\x10\x83\x0e\x12$\n" +
	"\x1fSI_XIANG_SYMBOL_GOLD_PICK_GOLD4\x10\x84\x0e\x12$\n" +
	"\x1fSI_XIANG_SYMBOL_GOLD_PICK_GOLD5\x10\x85\x0e\x12'\n" +
	"\"SI_XIANG_SYMBOL_GOLD_PICK_JP_MINOR\x10\x86\x0e\x12'\n" +
	"\"SI_XIANG_SYMBOL_GOLD_PICK_JP_MAJOR\x10\x87\x0e\x12&\n" +
	"!SI_XIANG_SYMBOL_GOLD_PICK_JP_MEGA\x10\x88\x0e\x12!\n" +
	"\x1cSI_XIANG_SYMBOL_RAPIDPAY_END\x10\x80\x10\x12 \n" +
	"\x1bSI_XIANG_SYMBOL_RAPIDPAY_X2\x10\x81\x10\x12 \n" +
	"\x1bSI_XIANG_SYMBOL_RAPIDPAY_X3\x10\x82\x10\x12 \n" +
	"\x1bSI_XIANG_SYMBOL_RAPIDPAY_X4\x10\x83\x10\x12&\n" +
	"!SI_XIANG_SYMBOL_RAPIDPAY_LUCKYBOX\x10\x84\x10\x121\n" +
	",SI_XIANG_SYMBOL_SIXANGBONUS_DRAGONPEARL_GAME\x10\x81\x12\x12/\n" +
	"*SI_XIANG_SYMBOL_SIXANGBONUS_LUCKYDRAW_GAME\x10\x82\x12\x12.\n" +
	")SI_XIANG_SYMBOL_SIXANGBONUS_GOLDPICK_GAME\x10\x83\x12\x12.\n" +
	")SI_XIANG_SYMBOL_SIXANGBONUS_RAPIDPAY_GAME\x10\x84\x12\x12\x1c\n" +
	"\x17SI_XIANG_SYMBOL_GORILLE\x10\x81 \x12\x1d\n" +
	"\x18SI_XIANG_SYMBOL_ELEPHANT\x10\x82 \x12\x1b\n" +
	"\x16SI_XIANG_SYMBOL_JAGUAR\x10\x83 \x12\x1a\n" +
	"\x15SI_XIANG_SYMBOL_SNACK\x10\x84 \x12\x19\n" +
	"\x14SI_XIANG_SYMBOL_JANE\x10\x85 \x12 \n" +
	"\x1bSI_XIANG_SYMBOL_JANE_FATHER\x10\x86 \x12\x1c\n" +
	"\x17SI_XIANG_SYMBOL_CLAYTON\x10\x87 \x12\x1e\n" +
	"\x19SI_XIANG_SYMBOL_FREE_SPIN\x10\x88 \x12\x1b\n" +
	"\x16SI_XIANG_SYMBOL_TARZAN\x10\x89 \x12\x1d\n" +
	"\x18SI_XIANG_SYMBOL_LETTER_J\x10\x90 \x12\x1d\n" +
	"\x18SI_XIANG_SYMBOL_LETTER_U\x10\x91 \x12\x1d\n" +
	"\x18SI_XIANG_SYMBOL_LETTER_N\x10\x92 \x12\x1d\n" +
	"\x18SI_XIANG_SYMBOL_LETTER_G\x10\x93 \x12\x1d\n" +
	"\x18SI_XIANG_SYMBOL_LETTER_L\x10\x94 \x12\x1d\n" +
	"\x18SI_XIANG_SYMBOL_LETTER_E\x10\x95 \x12\x1c\n" +
	"\x17SI_XIANG_SYMBOL_DIAMOND\x10\x96 \x12'\n" +
	"\"SI_XIANG_SYMBOL_TARZAN_MORE_TURNX2\x10\xa0 \x12'\n" +
	"\"SI_XIANG_SYMBOL_TARZAN_MORE_TURNX3\x10\xa1 \x12$\n" +
	"\x1fSI_XIANG_SYMBOL_TARZAN_RANDOM_1\x10\xa2 \x12$\n" +
	"\x1fSI_XIANG_SYMBOL_TARZAN_RANDOM_2\x10\xa3 \x12$\n" +
	"\x1fSI_XIANG_SYMBOL_TARZAN_RANDOM_3\x10\xa4 \x12$\n" +
	"\x1fSI_XIANG_SYMBOL_TARZAN_RANDOM_4\x10\xa5 \x12$\n" +
	"\x1fSI_XIANG_SYMBOL_TARZAN_RANDOM_5\x10\xa6 \x12%\n" +
	" SI_XIANG_SYMBOL_JUICE_STRAWBERRY\x10\x81\"\x12%\n" +
	" SI_XIANG_SYMBOL_JUICE_WATERMELON\x10\x82\"\x12#\n" +
	"\x1eSI_XIANG_SYMBOL_JUICE_PINAPPLE\x10\x83\"\x12%\n" +
	" SI_XIANG_SYMBOL_JUICE_MANGOSTEEN\x10\x84\"\x12(\n" +
	"#SI_XIANG_SYMBOL_JUICE_STONE_DIAMOND\x10\x85\"\x12&\n" +
	"!SI_XIANG_SYMBOL_JUICE_STONE_GREEN\x10\x86\"\x12'\n" +
	"\"SI_XIANG_SYMBOL_JUICE_STONE_VIOLET\x10\x87\"\x12&\n" +
	"!SI_XIANG_SYMBOL_JUICE_SCATTERS_X3\x10\x88\"\x12&\n" +
	"!SI_XIANG_SYMBOL_JUICE_SCATTERS_X4\x10\x89\"\x12&\n" +
	"!SI_XIANG_SYMBOL_JUICE_SCATTERS_X5\x10\x90\"\x12+\n" +
	"&SI_XIANG_SYMBOL_JUICE_FRUITBASKET_SPIN\x10\x91\"\x12,\n" +
	"'SI_XIANG_SYMBOL_JUICE_FRUITBASKET_GRAND\x10\x92\"\x12,\n" +
	"'SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MAJOR\x10\x93\"\x12,\n" +
	"'SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINOR\x10\x94\"\x12+\n" +
	"&SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINI\x10\x95\"\x12/\n" +
	"*SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_1\x10\xa0\"\x12/\n" +
	"*SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_2\x10\xa1\"\x12/\n" +
	"*SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_3\x10\xa2\"\x12/\n" +
	"*SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_4\x10\xa3\"\x12/\n" +
	"*SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_5\x10\xa4\"\x12/\n" +
	"*SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_6\x10\xa5\"\x12/\n" +
	"*SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_7\x10\xa6\"\x120\n" +
	"+SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FREE_GAME\x10\xa7\"\x121\n" +
	",SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FRUIT_RAIN\x10\xa8\"\x12 \n" +
	"\x1bSI_XIANG_SYMBOL_SUIT_HEARTS\x10\x80$\x12\"\n" +
	"\x1dSI_XIANG_SYMBOL_SUIT_DIAMONDS\x10\x81$\x12\x1f\n" +
	"\x1aSI_XIANG_SYMBOL_SUIT_CLUBS\x10\x82$\x12 \n" +
	"\x1bSI_XIANG_SYMBOL_SUIT_SPADES\x10\x83$\x12\x18\n" +
	"\x13SI_XIANG_SYMBOL_SUN\x10\x84$\x12!\n" +
	"\x1cSI_XIANG_SYMBOL_EAGLE_GARUDA\x10\x85$\x12\x1c\n" +
	"\x17SI_XIANG_SYMBOL_ANTIQUE\x10\x86$\x12\"\n" +
	"\x1dSI_XIANG_SYMBOL_CHRISMAS_GIFT\x10\x90$\x12#\n" +
	"\x1eSI_XIANG_SYMBOL_CHRISMAS_CANDY\x10\x91$\x12\"\n" +
	"\x1dSI_XIANG_SYMBOL_CHRISMAS_RING\x10\x92$\x12\x1a\n" +
	"\x14SI_XIANG_SYMBOL_WILD\x10\xff\xff\x03*\x99\x05\n" +
	"\vSiXiangGame\x12\x1d\n" +
	"\x19SI_XIANG_GAME_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14SI_XIANG_GAME_NORMAL\x10\x01\x12\x17\n" +
	"\x13SI_XIANG_GAME_BONUS\x10\x02\x12\x1e\n" +
	"\x1aSI_XIANG_GAME_DRAGON_PEARL\x10\x03\x12\x1a\n" +
	"\x16SI_XIANG_GAME_LUCKDRAW\x10\x04\x12\x1a\n" +
	"\x16SI_XIANG_GAME_GOLDPICK\x10\x05\x12\x1a\n" +
	"\x16SI_XIANG_GAME_RAPIDPAY\x10\x06\x12\x1d\n" +
	"\x19SI_XIANG_GAME_SIXANGBONUS\x10\a\x12*\n" +
	"&SI_XIANG_GAME_SIXANGBONUS_DRAGON_PEARL\x10\b\x12&\n" +
	"\"SI_XIANG_GAME_SIXANGBONUS_LUCKDRAW\x10\t\x12&\n" +
	"\"SI_XIANG_GAME_SIXANGBONUS_GOLDPICK\x10\n" +
	"\x12&\n" +
	"\"SI_XIANG_GAME_SIXANGBONUS_RAPIDPAY\x10\v\x12(\n" +
	"$SI_XIANG_GAME_TARZAN_JUNGLE_TREASURE\x10e\x12#\n" +
	"\x1fSI_XIANG_GAME_TARZAN_FREESPINX9\x10f\x12\x1f\n" +
	"\x1aSI_XIANG_GAME_JUICE_NORMAL\x10\xc8\x01\x12%\n" +
	" SI_XIANG_GAME_JUICE_FRUIT_BASKET\x10\xc9\x01\x12#\n" +
	"\x1eSI_XIANG_GAME_JUICE_FRUIT_RAIN\x10\xca\x01\x12\"\n" +
	"\x1dSI_XIANG_GAME_JUICE_FREE_GAME\x10\xcb\x01\x12!\n" +
	"\x1cSI_XIANG_GAME_INCA_FREE_GAME\x10\xad\x02*h\n" +
	"\x06BigWin\x12\x17\n" +
	"\x13BIG_WIN_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fBIG_WIN_NICE\x10\x05\x12\x10\n" +
	"\fBIG_WIN_HUGE\x10\n" +
	"\x12\x0f\n" +
	"\vBIG_WIN_BIG\x10\x19\x12\x10\n" +
	"\fBIG_WIN_MEGA\x102*\x9b\x01\n" +
	"\n" +
	"WinJackpot\x12\x1b\n" +
	"\x17WIN_JACKPOT_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11WIN_JACKPOT_MINOR\x10\n" +
	"\x12\x15\n" +
	"\x11WIN_JACKPOT_MAJOR\x10\x14\x12\x14\n" +
	"\x10WIN_JACKPOT_MEGA\x10\x1e\x12\x16\n" +
	"\x11WIN_JACKPOT_GRAND\x10\x96\x01\x12\x14\n" +
	"\x10WIN_JACKPOT_MINI\x10\x01B4Z2github.com/nk-nigeria/whot-module/cgp-common/protob\x06proto3"

var (
	file_slots_game_proto_rawDescOnce sync.Once
	file_slots_game_proto_rawDescData []byte
)

func file_slots_game_proto_rawDescGZIP() []byte {
	file_slots_game_proto_rawDescOnce.Do(func() {
		file_slots_game_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_slots_game_proto_rawDesc), len(file_slots_game_proto_rawDesc)))
	})
	return file_slots_game_proto_rawDescData
}

var file_slots_game_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_slots_game_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_slots_game_proto_goTypes = []any{
	(SiXiangSymbol)(0),     // 0: proto.SiXiangSymbol
	(SiXiangGame)(0),       // 1: proto.SiXiangGame
	(BigWin)(0),            // 2: proto.BigWin
	(WinJackpot)(0),        // 3: proto.WinJackpot
	(*SlotDesk)(nil),       // 4: proto.SlotDesk
	(*GameConfig)(nil),     // 5: proto.GameConfig
	(*SlotMatrix)(nil),     // 6: proto.SlotMatrix
	(*SpinSymbol)(nil),     // 7: proto.SpinSymbol
	(*CollectSymbol)(nil),  // 8: proto.CollectSymbol
	(*JackpotReward)(nil),  // 9: proto.JackpotReward
	(*JackpotHistory)(nil), // 10: proto.JackpotHistory
	(*Payline)(nil),        // 11: proto.Payline
	(*GameReward)(nil),     // 12: proto.GameReward
	(*SaveGame)(nil),       // 13: proto.SaveGame
	(*InfoBet)(nil),        // 14: proto.InfoBet
}
var file_slots_game_proto_depIdxs = []int32{
	6,  // 0: proto.SlotDesk.matrix:type_name -> proto.SlotMatrix
	6,  // 1: proto.SlotDesk.spread_matrix:type_name -> proto.SlotMatrix
	11, // 2: proto.SlotDesk.paylines:type_name -> proto.Payline
	1,  // 3: proto.SlotDesk.next_sixiang_game:type_name -> proto.SiXiangGame
	1,  // 4: proto.SlotDesk.current_sixiang_game:type_name -> proto.SiXiangGame
	7,  // 5: proto.SlotDesk.spin_symbols:type_name -> proto.SpinSymbol
	3,  // 6: proto.SlotDesk.win_jp:type_name -> proto.WinJackpot
	2,  // 7: proto.SlotDesk.big_win:type_name -> proto.BigWin
	12, // 8: proto.SlotDesk.game_reward:type_name -> proto.GameReward
	8,  // 9: proto.SlotDesk.collection_symbols:type_name -> proto.CollectSymbol
	14, // 10: proto.SlotDesk.info_bet:type_name -> proto.InfoBet
	1,  // 11: proto.SlotDesk.sixiang_gems:type_name -> proto.SiXiangGame
	0,  // 12: proto.SlotDesk.letter_symbols:type_name -> proto.SiXiangSymbol
	10, // 13: proto.SlotDesk.win_jp_history:type_name -> proto.JackpotHistory
	5,  // 14: proto.SlotDesk.game_config:type_name -> proto.GameConfig
	0,  // 15: proto.SlotMatrix.lists:type_name -> proto.SiXiangSymbol
	7,  // 16: proto.SlotMatrix.spin_lists:type_name -> proto.SpinSymbol
	0,  // 17: proto.SpinSymbol.symbol:type_name -> proto.SiXiangSymbol
	3,  // 18: proto.SpinSymbol.win_jp:type_name -> proto.WinJackpot
	0,  // 19: proto.CollectSymbol.symbol:type_name -> proto.SiXiangSymbol
	3,  // 20: proto.JackpotReward.win_jackpot:type_name -> proto.WinJackpot
	9,  // 21: proto.JackpotHistory.minor:type_name -> proto.JackpotReward
	9,  // 22: proto.JackpotHistory.major:type_name -> proto.JackpotReward
	9,  // 23: proto.JackpotHistory.mega:type_name -> proto.JackpotReward
	9,  // 24: proto.JackpotHistory.grand:type_name -> proto.JackpotReward
	9,  // 25: proto.JackpotHistory.mini:type_name -> proto.JackpotReward
	0,  // 26: proto.Payline.symbol:type_name -> proto.SiXiangSymbol
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_slots_game_proto_init() }
func file_slots_game_proto_init() {
	if File_slots_game_proto != nil {
		return
	}
	file_color_game_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_slots_game_proto_rawDesc), len(file_slots_game_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_slots_game_proto_goTypes,
		DependencyIndexes: file_slots_game_proto_depIdxs,
		EnumInfos:         file_slots_game_proto_enumTypes,
		MessageInfos:      file_slots_game_proto_msgTypes,
	}.Build()
	File_slots_game_proto = out.File
	file_slots_game_proto_goTypes = nil
	file_slots_game_proto_depIdxs = nil
}
