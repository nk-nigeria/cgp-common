// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: slots_game.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SiXiangSymbol int32

const (
	SiXiangSymbol_SI_XIANG_SYMBOL_UNSPECIFIED    SiXiangSymbol = 0
	SiXiangSymbol_SI_XIANG_SYMBOL_10             SiXiangSymbol = 1
	SiXiangSymbol_SI_XIANG_SYMBOL_J              SiXiangSymbol = 2
	SiXiangSymbol_SI_XIANG_SYMBOL_Q              SiXiangSymbol = 4
	SiXiangSymbol_SI_XIANG_SYMBOL_K              SiXiangSymbol = 8
	SiXiangSymbol_SI_XIANG_SYMBOL_A              SiXiangSymbol = 16
	SiXiangSymbol_SI_XIANG_SYMBOL_BLUE_DRAGON    SiXiangSymbol = 32
	SiXiangSymbol_SI_XIANG_SYMBOL_WHITE_TIGER    SiXiangSymbol = 64
	SiXiangSymbol_SI_XIANG_SYMBOL_VERMILION_BIRD SiXiangSymbol = 128
	SiXiangSymbol_SI_XIANG_SYMBOL_WARRIOR        SiXiangSymbol = 256
	SiXiangSymbol_SI_XIANG_SYMBOL_SCATTER        SiXiangSymbol = 512
	// Bonus game
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_DRAGONBALL SiXiangSymbol = 1025
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_LUCKYDRAW  SiXiangSymbol = 1026
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_GOLDPICK   SiXiangSymbol = 1027
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_RAPIDPAY   SiXiangSymbol = 1028
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_GOLDX10    SiXiangSymbol = 1029
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_GOLDX20    SiXiangSymbol = 1030
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_GOLDX30    SiXiangSymbol = 1031
	SiXiangSymbol_SI_XIANG_SYMBOL_BONUS_GOLDX50    SiXiangSymbol = 1032
	// Dragon Pearl
	// bao li xi, quay random ra eye bird/dragon...
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_LUCKMONEY SiXiangSymbol = 1280
	// ngoc tien random mcb
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM1 SiXiangSymbol = 1281
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM2 SiXiangSymbol = 1282
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM3 SiXiangSymbol = 1283
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM4 SiXiangSymbol = 1284
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM5 SiXiangSymbol = 1285
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_EYE_BIRD    SiXiangSymbol = 1296
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_EYE_TIGER   SiXiangSymbol = 1297
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_EYE_WARRIOR SiXiangSymbol = 1298
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_EYE_DRAGON  SiXiangSymbol = 1299
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_JP_MINOR    SiXiangSymbol = 1300
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_JP_MAJOR    SiXiangSymbol = 1301
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_JP_MEGA     SiXiangSymbol = 1302
	SiXiangSymbol_SI_XIANG_SYMBOL_DRAGONPEARL_JP_GRAND    SiXiangSymbol = 1303
	// LUCKY DRAW SYMBOL
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_MINOR  SiXiangSymbol = 1536
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_MAJOR  SiXiangSymbol = 1537
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_MEGA   SiXiangSymbol = 1538
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_GRAND  SiXiangSymbol = 1539
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_1 SiXiangSymbol = 1540
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_2 SiXiangSymbol = 1541
	SiXiangSymbol_SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_3 SiXiangSymbol = 1542
	// GOLP PICK
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_TRYAGAIN SiXiangSymbol = 1792
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_GOLD1    SiXiangSymbol = 1793
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_GOLD2    SiXiangSymbol = 1794
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_GOLD3    SiXiangSymbol = 1795
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_GOLD4    SiXiangSymbol = 1796
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_GOLD5    SiXiangSymbol = 1797
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_JP_MINOR SiXiangSymbol = 1798
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_JP_MAJOR SiXiangSymbol = 1799
	SiXiangSymbol_SI_XIANG_SYMBOL_GOLD_PICK_JP_MEGA  SiXiangSymbol = 1800
	// RAPID PAY SYMBOL
	SiXiangSymbol_SI_XIANG_SYMBOL_RAPIDPAY_END      SiXiangSymbol = 2048
	SiXiangSymbol_SI_XIANG_SYMBOL_RAPIDPAY_X2       SiXiangSymbol = 2049
	SiXiangSymbol_SI_XIANG_SYMBOL_RAPIDPAY_X3       SiXiangSymbol = 2050
	SiXiangSymbol_SI_XIANG_SYMBOL_RAPIDPAY_X4       SiXiangSymbol = 2051
	SiXiangSymbol_SI_XIANG_SYMBOL_RAPIDPAY_LUCKYBOX SiXiangSymbol = 2052
	// SIXANGBONUS
	SiXiangSymbol_SI_XIANG_SYMBOL_SIXANGBONUS_DRAGONPEARL_GAME SiXiangSymbol = 2305
	SiXiangSymbol_SI_XIANG_SYMBOL_SIXANGBONUS_LUCKYDRAW_GAME   SiXiangSymbol = 2306
	SiXiangSymbol_SI_XIANG_SYMBOL_SIXANGBONUS_GOLDPICK_GAME    SiXiangSymbol = 2307
	SiXiangSymbol_SI_XIANG_SYMBOL_SIXANGBONUS_RAPIDPAY_GAME    SiXiangSymbol = 2308
	// Tazan symbol
	SiXiangSymbol_SI_XIANG_SYMBOL_GORILLE            SiXiangSymbol = 4097
	SiXiangSymbol_SI_XIANG_SYMBOL_ELEPHANT           SiXiangSymbol = 4098
	SiXiangSymbol_SI_XIANG_SYMBOL_JAGUAR             SiXiangSymbol = 4099
	SiXiangSymbol_SI_XIANG_SYMBOL_SNACK              SiXiangSymbol = 4100
	SiXiangSymbol_SI_XIANG_SYMBOL_JANE               SiXiangSymbol = 4101
	SiXiangSymbol_SI_XIANG_SYMBOL_JANE_FATHER        SiXiangSymbol = 4102
	SiXiangSymbol_SI_XIANG_SYMBOL_CLAYTON            SiXiangSymbol = 4103
	SiXiangSymbol_SI_XIANG_SYMBOL_FREE_SPIN          SiXiangSymbol = 4104
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN             SiXiangSymbol = 4105
	SiXiangSymbol_SI_XIANG_SYMBOL_LETTER_J           SiXiangSymbol = 4112
	SiXiangSymbol_SI_XIANG_SYMBOL_LETTER_U           SiXiangSymbol = 4113
	SiXiangSymbol_SI_XIANG_SYMBOL_LETTER_N           SiXiangSymbol = 4114
	SiXiangSymbol_SI_XIANG_SYMBOL_LETTER_G           SiXiangSymbol = 4115
	SiXiangSymbol_SI_XIANG_SYMBOL_LETTER_L           SiXiangSymbol = 4116
	SiXiangSymbol_SI_XIANG_SYMBOL_LETTER_E           SiXiangSymbol = 4117
	SiXiangSymbol_SI_XIANG_SYMBOL_DIAMOND            SiXiangSymbol = 4118
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_MORE_TURNX2 SiXiangSymbol = 4128
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_MORE_TURNX3 SiXiangSymbol = 4129
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_RANDOM_1    SiXiangSymbol = 4130
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_RANDOM_2    SiXiangSymbol = 4131
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_RANDOM_3    SiXiangSymbol = 4132
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_RANDOM_4    SiXiangSymbol = 4133
	SiXiangSymbol_SI_XIANG_SYMBOL_TARZAN_RANDOM_5    SiXiangSymbol = 4134
	// Juice Garden
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_STRAWBERRY    SiXiangSymbol = 4353
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_WATERMELON    SiXiangSymbol = 4354
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_PINAPPLE      SiXiangSymbol = 4355
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_MANGOSTEEN    SiXiangSymbol = 4356
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_STONE_DIAMOND SiXiangSymbol = 4357
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_STONE_GREEN   SiXiangSymbol = 4358
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_STONE_VIOLET  SiXiangSymbol = 4359
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_SCATTERS_X3   SiXiangSymbol = 4360
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_SCATTERS_X4   SiXiangSymbol = 4361
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_SCATTERS_X5   SiXiangSymbol = 4368
	// fruit basket game
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_SPIN  SiXiangSymbol = 4369
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_GRAND SiXiangSymbol = 4370
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MAJOR SiXiangSymbol = 4371
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINOR SiXiangSymbol = 4372
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINI  SiXiangSymbol = 4373
	// fruit rain
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_1   SiXiangSymbol = 4384
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_2   SiXiangSymbol = 4385
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_3   SiXiangSymbol = 4386
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_4   SiXiangSymbol = 4387
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_5   SiXiangSymbol = 4388
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_6   SiXiangSymbol = 4389
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_7   SiXiangSymbol = 4390
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FREE_GAME  SiXiangSymbol = 4391
	SiXiangSymbol_SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FRUIT_RAIN SiXiangSymbol = 4392
	// inca
	SiXiangSymbol_SI_XIANG_SYMBOL_SUIT_HEARTS   SiXiangSymbol = 4608
	SiXiangSymbol_SI_XIANG_SYMBOL_SUIT_DIAMONDS SiXiangSymbol = 4609
	SiXiangSymbol_SI_XIANG_SYMBOL_SUIT_CLUBS    SiXiangSymbol = 4610
	SiXiangSymbol_SI_XIANG_SYMBOL_SUIT_SPADES   SiXiangSymbol = 4611
	SiXiangSymbol_SI_XIANG_SYMBOL_SUN           SiXiangSymbol = 4612
	SiXiangSymbol_SI_XIANG_SYMBOL_EAGLE_GARUDA  SiXiangSymbol = 4613
	SiXiangSymbol_SI_XIANG_SYMBOL_ANTIQUE       SiXiangSymbol = 4614
	SiXiangSymbol_SI_XIANG_SYMBOL_WILD          SiXiangSymbol = 65535
)

// Enum value maps for SiXiangSymbol.
var (
	SiXiangSymbol_name = map[int32]string{
		0:     "SI_XIANG_SYMBOL_UNSPECIFIED",
		1:     "SI_XIANG_SYMBOL_10",
		2:     "SI_XIANG_SYMBOL_J",
		4:     "SI_XIANG_SYMBOL_Q",
		8:     "SI_XIANG_SYMBOL_K",
		16:    "SI_XIANG_SYMBOL_A",
		32:    "SI_XIANG_SYMBOL_BLUE_DRAGON",
		64:    "SI_XIANG_SYMBOL_WHITE_TIGER",
		128:   "SI_XIANG_SYMBOL_VERMILION_BIRD",
		256:   "SI_XIANG_SYMBOL_WARRIOR",
		512:   "SI_XIANG_SYMBOL_SCATTER",
		1025:  "SI_XIANG_SYMBOL_BONUS_DRAGONBALL",
		1026:  "SI_XIANG_SYMBOL_BONUS_LUCKYDRAW",
		1027:  "SI_XIANG_SYMBOL_BONUS_GOLDPICK",
		1028:  "SI_XIANG_SYMBOL_BONUS_RAPIDPAY",
		1029:  "SI_XIANG_SYMBOL_BONUS_GOLDX10",
		1030:  "SI_XIANG_SYMBOL_BONUS_GOLDX20",
		1031:  "SI_XIANG_SYMBOL_BONUS_GOLDX30",
		1032:  "SI_XIANG_SYMBOL_BONUS_GOLDX50",
		1280:  "SI_XIANG_SYMBOL_DRAGONPEARL_LUCKMONEY",
		1281:  "SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM1",
		1282:  "SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM2",
		1283:  "SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM3",
		1284:  "SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM4",
		1285:  "SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM5",
		1296:  "SI_XIANG_SYMBOL_DRAGONPEARL_EYE_BIRD",
		1297:  "SI_XIANG_SYMBOL_DRAGONPEARL_EYE_TIGER",
		1298:  "SI_XIANG_SYMBOL_DRAGONPEARL_EYE_WARRIOR",
		1299:  "SI_XIANG_SYMBOL_DRAGONPEARL_EYE_DRAGON",
		1300:  "SI_XIANG_SYMBOL_DRAGONPEARL_JP_MINOR",
		1301:  "SI_XIANG_SYMBOL_DRAGONPEARL_JP_MAJOR",
		1302:  "SI_XIANG_SYMBOL_DRAGONPEARL_JP_MEGA",
		1303:  "SI_XIANG_SYMBOL_DRAGONPEARL_JP_GRAND",
		1536:  "SI_XIANG_SYMBOL_LUCKYDRAW_MINOR",
		1537:  "SI_XIANG_SYMBOL_LUCKYDRAW_MAJOR",
		1538:  "SI_XIANG_SYMBOL_LUCKYDRAW_MEGA",
		1539:  "SI_XIANG_SYMBOL_LUCKYDRAW_GRAND",
		1540:  "SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_1",
		1541:  "SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_2",
		1542:  "SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_3",
		1792:  "SI_XIANG_SYMBOL_GOLD_PICK_TRYAGAIN",
		1793:  "SI_XIANG_SYMBOL_GOLD_PICK_GOLD1",
		1794:  "SI_XIANG_SYMBOL_GOLD_PICK_GOLD2",
		1795:  "SI_XIANG_SYMBOL_GOLD_PICK_GOLD3",
		1796:  "SI_XIANG_SYMBOL_GOLD_PICK_GOLD4",
		1797:  "SI_XIANG_SYMBOL_GOLD_PICK_GOLD5",
		1798:  "SI_XIANG_SYMBOL_GOLD_PICK_JP_MINOR",
		1799:  "SI_XIANG_SYMBOL_GOLD_PICK_JP_MAJOR",
		1800:  "SI_XIANG_SYMBOL_GOLD_PICK_JP_MEGA",
		2048:  "SI_XIANG_SYMBOL_RAPIDPAY_END",
		2049:  "SI_XIANG_SYMBOL_RAPIDPAY_X2",
		2050:  "SI_XIANG_SYMBOL_RAPIDPAY_X3",
		2051:  "SI_XIANG_SYMBOL_RAPIDPAY_X4",
		2052:  "SI_XIANG_SYMBOL_RAPIDPAY_LUCKYBOX",
		2305:  "SI_XIANG_SYMBOL_SIXANGBONUS_DRAGONPEARL_GAME",
		2306:  "SI_XIANG_SYMBOL_SIXANGBONUS_LUCKYDRAW_GAME",
		2307:  "SI_XIANG_SYMBOL_SIXANGBONUS_GOLDPICK_GAME",
		2308:  "SI_XIANG_SYMBOL_SIXANGBONUS_RAPIDPAY_GAME",
		4097:  "SI_XIANG_SYMBOL_GORILLE",
		4098:  "SI_XIANG_SYMBOL_ELEPHANT",
		4099:  "SI_XIANG_SYMBOL_JAGUAR",
		4100:  "SI_XIANG_SYMBOL_SNACK",
		4101:  "SI_XIANG_SYMBOL_JANE",
		4102:  "SI_XIANG_SYMBOL_JANE_FATHER",
		4103:  "SI_XIANG_SYMBOL_CLAYTON",
		4104:  "SI_XIANG_SYMBOL_FREE_SPIN",
		4105:  "SI_XIANG_SYMBOL_TARZAN",
		4112:  "SI_XIANG_SYMBOL_LETTER_J",
		4113:  "SI_XIANG_SYMBOL_LETTER_U",
		4114:  "SI_XIANG_SYMBOL_LETTER_N",
		4115:  "SI_XIANG_SYMBOL_LETTER_G",
		4116:  "SI_XIANG_SYMBOL_LETTER_L",
		4117:  "SI_XIANG_SYMBOL_LETTER_E",
		4118:  "SI_XIANG_SYMBOL_DIAMOND",
		4128:  "SI_XIANG_SYMBOL_TARZAN_MORE_TURNX2",
		4129:  "SI_XIANG_SYMBOL_TARZAN_MORE_TURNX3",
		4130:  "SI_XIANG_SYMBOL_TARZAN_RANDOM_1",
		4131:  "SI_XIANG_SYMBOL_TARZAN_RANDOM_2",
		4132:  "SI_XIANG_SYMBOL_TARZAN_RANDOM_3",
		4133:  "SI_XIANG_SYMBOL_TARZAN_RANDOM_4",
		4134:  "SI_XIANG_SYMBOL_TARZAN_RANDOM_5",
		4353:  "SI_XIANG_SYMBOL_JUICE_STRAWBERRY",
		4354:  "SI_XIANG_SYMBOL_JUICE_WATERMELON",
		4355:  "SI_XIANG_SYMBOL_JUICE_PINAPPLE",
		4356:  "SI_XIANG_SYMBOL_JUICE_MANGOSTEEN",
		4357:  "SI_XIANG_SYMBOL_JUICE_STONE_DIAMOND",
		4358:  "SI_XIANG_SYMBOL_JUICE_STONE_GREEN",
		4359:  "SI_XIANG_SYMBOL_JUICE_STONE_VIOLET",
		4360:  "SI_XIANG_SYMBOL_JUICE_SCATTERS_X3",
		4361:  "SI_XIANG_SYMBOL_JUICE_SCATTERS_X4",
		4368:  "SI_XIANG_SYMBOL_JUICE_SCATTERS_X5",
		4369:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_SPIN",
		4370:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_GRAND",
		4371:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MAJOR",
		4372:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINOR",
		4373:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINI",
		4384:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_1",
		4385:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_2",
		4386:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_3",
		4387:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_4",
		4388:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_5",
		4389:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_6",
		4390:  "SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_7",
		4391:  "SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FREE_GAME",
		4392:  "SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FRUIT_RAIN",
		4608:  "SI_XIANG_SYMBOL_SUIT_HEARTS",
		4609:  "SI_XIANG_SYMBOL_SUIT_DIAMONDS",
		4610:  "SI_XIANG_SYMBOL_SUIT_CLUBS",
		4611:  "SI_XIANG_SYMBOL_SUIT_SPADES",
		4612:  "SI_XIANG_SYMBOL_SUN",
		4613:  "SI_XIANG_SYMBOL_EAGLE_GARUDA",
		4614:  "SI_XIANG_SYMBOL_ANTIQUE",
		65535: "SI_XIANG_SYMBOL_WILD",
	}
	SiXiangSymbol_value = map[string]int32{
		"SI_XIANG_SYMBOL_UNSPECIFIED":                  0,
		"SI_XIANG_SYMBOL_10":                           1,
		"SI_XIANG_SYMBOL_J":                            2,
		"SI_XIANG_SYMBOL_Q":                            4,
		"SI_XIANG_SYMBOL_K":                            8,
		"SI_XIANG_SYMBOL_A":                            16,
		"SI_XIANG_SYMBOL_BLUE_DRAGON":                  32,
		"SI_XIANG_SYMBOL_WHITE_TIGER":                  64,
		"SI_XIANG_SYMBOL_VERMILION_BIRD":               128,
		"SI_XIANG_SYMBOL_WARRIOR":                      256,
		"SI_XIANG_SYMBOL_SCATTER":                      512,
		"SI_XIANG_SYMBOL_BONUS_DRAGONBALL":             1025,
		"SI_XIANG_SYMBOL_BONUS_LUCKYDRAW":              1026,
		"SI_XIANG_SYMBOL_BONUS_GOLDPICK":               1027,
		"SI_XIANG_SYMBOL_BONUS_RAPIDPAY":               1028,
		"SI_XIANG_SYMBOL_BONUS_GOLDX10":                1029,
		"SI_XIANG_SYMBOL_BONUS_GOLDX20":                1030,
		"SI_XIANG_SYMBOL_BONUS_GOLDX30":                1031,
		"SI_XIANG_SYMBOL_BONUS_GOLDX50":                1032,
		"SI_XIANG_SYMBOL_DRAGONPEARL_LUCKMONEY":        1280,
		"SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM1":      1281,
		"SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM2":      1282,
		"SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM3":      1283,
		"SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM4":      1284,
		"SI_XIANG_SYMBOL_DRAGONPEARL_GEM_RANDOM5":      1285,
		"SI_XIANG_SYMBOL_DRAGONPEARL_EYE_BIRD":         1296,
		"SI_XIANG_SYMBOL_DRAGONPEARL_EYE_TIGER":        1297,
		"SI_XIANG_SYMBOL_DRAGONPEARL_EYE_WARRIOR":      1298,
		"SI_XIANG_SYMBOL_DRAGONPEARL_EYE_DRAGON":       1299,
		"SI_XIANG_SYMBOL_DRAGONPEARL_JP_MINOR":         1300,
		"SI_XIANG_SYMBOL_DRAGONPEARL_JP_MAJOR":         1301,
		"SI_XIANG_SYMBOL_DRAGONPEARL_JP_MEGA":          1302,
		"SI_XIANG_SYMBOL_DRAGONPEARL_JP_GRAND":         1303,
		"SI_XIANG_SYMBOL_LUCKYDRAW_MINOR":              1536,
		"SI_XIANG_SYMBOL_LUCKYDRAW_MAJOR":              1537,
		"SI_XIANG_SYMBOL_LUCKYDRAW_MEGA":               1538,
		"SI_XIANG_SYMBOL_LUCKYDRAW_GRAND":              1539,
		"SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_1":             1540,
		"SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_2":             1541,
		"SI_XIANG_SYMBOL_LUCKYDRAW_GOLD_3":             1542,
		"SI_XIANG_SYMBOL_GOLD_PICK_TRYAGAIN":           1792,
		"SI_XIANG_SYMBOL_GOLD_PICK_GOLD1":              1793,
		"SI_XIANG_SYMBOL_GOLD_PICK_GOLD2":              1794,
		"SI_XIANG_SYMBOL_GOLD_PICK_GOLD3":              1795,
		"SI_XIANG_SYMBOL_GOLD_PICK_GOLD4":              1796,
		"SI_XIANG_SYMBOL_GOLD_PICK_GOLD5":              1797,
		"SI_XIANG_SYMBOL_GOLD_PICK_JP_MINOR":           1798,
		"SI_XIANG_SYMBOL_GOLD_PICK_JP_MAJOR":           1799,
		"SI_XIANG_SYMBOL_GOLD_PICK_JP_MEGA":            1800,
		"SI_XIANG_SYMBOL_RAPIDPAY_END":                 2048,
		"SI_XIANG_SYMBOL_RAPIDPAY_X2":                  2049,
		"SI_XIANG_SYMBOL_RAPIDPAY_X3":                  2050,
		"SI_XIANG_SYMBOL_RAPIDPAY_X4":                  2051,
		"SI_XIANG_SYMBOL_RAPIDPAY_LUCKYBOX":            2052,
		"SI_XIANG_SYMBOL_SIXANGBONUS_DRAGONPEARL_GAME": 2305,
		"SI_XIANG_SYMBOL_SIXANGBONUS_LUCKYDRAW_GAME":   2306,
		"SI_XIANG_SYMBOL_SIXANGBONUS_GOLDPICK_GAME":    2307,
		"SI_XIANG_SYMBOL_SIXANGBONUS_RAPIDPAY_GAME":    2308,
		"SI_XIANG_SYMBOL_GORILLE":                      4097,
		"SI_XIANG_SYMBOL_ELEPHANT":                     4098,
		"SI_XIANG_SYMBOL_JAGUAR":                       4099,
		"SI_XIANG_SYMBOL_SNACK":                        4100,
		"SI_XIANG_SYMBOL_JANE":                         4101,
		"SI_XIANG_SYMBOL_JANE_FATHER":                  4102,
		"SI_XIANG_SYMBOL_CLAYTON":                      4103,
		"SI_XIANG_SYMBOL_FREE_SPIN":                    4104,
		"SI_XIANG_SYMBOL_TARZAN":                       4105,
		"SI_XIANG_SYMBOL_LETTER_J":                     4112,
		"SI_XIANG_SYMBOL_LETTER_U":                     4113,
		"SI_XIANG_SYMBOL_LETTER_N":                     4114,
		"SI_XIANG_SYMBOL_LETTER_G":                     4115,
		"SI_XIANG_SYMBOL_LETTER_L":                     4116,
		"SI_XIANG_SYMBOL_LETTER_E":                     4117,
		"SI_XIANG_SYMBOL_DIAMOND":                      4118,
		"SI_XIANG_SYMBOL_TARZAN_MORE_TURNX2":           4128,
		"SI_XIANG_SYMBOL_TARZAN_MORE_TURNX3":           4129,
		"SI_XIANG_SYMBOL_TARZAN_RANDOM_1":              4130,
		"SI_XIANG_SYMBOL_TARZAN_RANDOM_2":              4131,
		"SI_XIANG_SYMBOL_TARZAN_RANDOM_3":              4132,
		"SI_XIANG_SYMBOL_TARZAN_RANDOM_4":              4133,
		"SI_XIANG_SYMBOL_TARZAN_RANDOM_5":              4134,
		"SI_XIANG_SYMBOL_JUICE_STRAWBERRY":             4353,
		"SI_XIANG_SYMBOL_JUICE_WATERMELON":             4354,
		"SI_XIANG_SYMBOL_JUICE_PINAPPLE":               4355,
		"SI_XIANG_SYMBOL_JUICE_MANGOSTEEN":             4356,
		"SI_XIANG_SYMBOL_JUICE_STONE_DIAMOND":          4357,
		"SI_XIANG_SYMBOL_JUICE_STONE_GREEN":            4358,
		"SI_XIANG_SYMBOL_JUICE_STONE_VIOLET":           4359,
		"SI_XIANG_SYMBOL_JUICE_SCATTERS_X3":            4360,
		"SI_XIANG_SYMBOL_JUICE_SCATTERS_X4":            4361,
		"SI_XIANG_SYMBOL_JUICE_SCATTERS_X5":            4368,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_SPIN":       4369,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_GRAND":      4370,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MAJOR":      4371,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINOR":      4372,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_MINI":       4373,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_1":   4384,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_2":   4385,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_3":   4386,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_4":   4387,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_5":   4388,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_6":   4389,
		"SI_XIANG_SYMBOL_JUICE_FRUITBASKET_RANDOM_7":   4390,
		"SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FREE_GAME":  4391,
		"SI_XIANG_SYMBOL_JUICE_FUIT_SELECT_FRUIT_RAIN": 4392,
		"SI_XIANG_SYMBOL_SUIT_HEARTS":                  4608,
		"SI_XIANG_SYMBOL_SUIT_DIAMONDS":                4609,
		"SI_XIANG_SYMBOL_SUIT_CLUBS":                   4610,
		"SI_XIANG_SYMBOL_SUIT_SPADES":                  4611,
		"SI_XIANG_SYMBOL_SUN":                          4612,
		"SI_XIANG_SYMBOL_EAGLE_GARUDA":                 4613,
		"SI_XIANG_SYMBOL_ANTIQUE":                      4614,
		"SI_XIANG_SYMBOL_WILD":                         65535,
	}
)

func (x SiXiangSymbol) Enum() *SiXiangSymbol {
	p := new(SiXiangSymbol)
	*p = x
	return p
}

func (x SiXiangSymbol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SiXiangSymbol) Descriptor() protoreflect.EnumDescriptor {
	return file_slots_game_proto_enumTypes[0].Descriptor()
}

func (SiXiangSymbol) Type() protoreflect.EnumType {
	return &file_slots_game_proto_enumTypes[0]
}

func (x SiXiangSymbol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SiXiangSymbol.Descriptor instead.
func (SiXiangSymbol) EnumDescriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{0}
}

type SiXiangGame int32

const (
	SiXiangGame_SI_XIANG_GAME_UNSPECIFIED              SiXiangGame = 0
	SiXiangGame_SI_XIANG_GAME_NORMAL                   SiXiangGame = 1
	SiXiangGame_SI_XIANG_GAME_BONUS                    SiXiangGame = 2
	SiXiangGame_SI_XIANG_GAME_DRAGON_PEARL             SiXiangGame = 3
	SiXiangGame_SI_XIANG_GAME_LUCKDRAW                 SiXiangGame = 4
	SiXiangGame_SI_XIANG_GAME_GOLDPICK                 SiXiangGame = 5
	SiXiangGame_SI_XIANG_GAME_RAPIDPAY                 SiXiangGame = 6
	SiXiangGame_SI_XIANG_GAME_SIXANGBONUS              SiXiangGame = 7
	SiXiangGame_SI_XIANG_GAME_SIXANGBONUS_DRAGON_PEARL SiXiangGame = 8
	SiXiangGame_SI_XIANG_GAME_SIXANGBONUS_LUCKDRAW     SiXiangGame = 9
	SiXiangGame_SI_XIANG_GAME_SIXANGBONUS_GOLDPICK     SiXiangGame = 10
	SiXiangGame_SI_XIANG_GAME_SIXANGBONUS_RAPIDPAY     SiXiangGame = 11
	// Tazan game
	SiXiangGame_SI_XIANG_GAME_TARZAN_JUNGLE_TREASURE SiXiangGame = 101
	SiXiangGame_SI_XIANG_GAME_TARZAN_FREESPINX9      SiXiangGame = 102 // Juice Garden
	SiXiangGame_SI_XIANG_GAME_JUICE_NORMAL           SiXiangGame = 200
	SiXiangGame_SI_XIANG_GAME_JUICE_FRUIT_BASKET     SiXiangGame = 201
	SiXiangGame_SI_XIANG_GAME_JUICE_FRUIT_RAIN       SiXiangGame = 202
	SiXiangGame_SI_XIANG_GAME_JUICE_FREE_GAME        SiXiangGame = 203
	SiXiangGame_SI_XIANG_GAME_INCA_FREE_GAME         SiXiangGame = 301
)

// Enum value maps for SiXiangGame.
var (
	SiXiangGame_name = map[int32]string{
		0:   "SI_XIANG_GAME_UNSPECIFIED",
		1:   "SI_XIANG_GAME_NORMAL",
		2:   "SI_XIANG_GAME_BONUS",
		3:   "SI_XIANG_GAME_DRAGON_PEARL",
		4:   "SI_XIANG_GAME_LUCKDRAW",
		5:   "SI_XIANG_GAME_GOLDPICK",
		6:   "SI_XIANG_GAME_RAPIDPAY",
		7:   "SI_XIANG_GAME_SIXANGBONUS",
		8:   "SI_XIANG_GAME_SIXANGBONUS_DRAGON_PEARL",
		9:   "SI_XIANG_GAME_SIXANGBONUS_LUCKDRAW",
		10:  "SI_XIANG_GAME_SIXANGBONUS_GOLDPICK",
		11:  "SI_XIANG_GAME_SIXANGBONUS_RAPIDPAY",
		101: "SI_XIANG_GAME_TARZAN_JUNGLE_TREASURE",
		102: "SI_XIANG_GAME_TARZAN_FREESPINX9",
		200: "SI_XIANG_GAME_JUICE_NORMAL",
		201: "SI_XIANG_GAME_JUICE_FRUIT_BASKET",
		202: "SI_XIANG_GAME_JUICE_FRUIT_RAIN",
		203: "SI_XIANG_GAME_JUICE_FREE_GAME",
		301: "SI_XIANG_GAME_INCA_FREE_GAME",
	}
	SiXiangGame_value = map[string]int32{
		"SI_XIANG_GAME_UNSPECIFIED":              0,
		"SI_XIANG_GAME_NORMAL":                   1,
		"SI_XIANG_GAME_BONUS":                    2,
		"SI_XIANG_GAME_DRAGON_PEARL":             3,
		"SI_XIANG_GAME_LUCKDRAW":                 4,
		"SI_XIANG_GAME_GOLDPICK":                 5,
		"SI_XIANG_GAME_RAPIDPAY":                 6,
		"SI_XIANG_GAME_SIXANGBONUS":              7,
		"SI_XIANG_GAME_SIXANGBONUS_DRAGON_PEARL": 8,
		"SI_XIANG_GAME_SIXANGBONUS_LUCKDRAW":     9,
		"SI_XIANG_GAME_SIXANGBONUS_GOLDPICK":     10,
		"SI_XIANG_GAME_SIXANGBONUS_RAPIDPAY":     11,
		"SI_XIANG_GAME_TARZAN_JUNGLE_TREASURE":   101,
		"SI_XIANG_GAME_TARZAN_FREESPINX9":        102,
		"SI_XIANG_GAME_JUICE_NORMAL":             200,
		"SI_XIANG_GAME_JUICE_FRUIT_BASKET":       201,
		"SI_XIANG_GAME_JUICE_FRUIT_RAIN":         202,
		"SI_XIANG_GAME_JUICE_FREE_GAME":          203,
		"SI_XIANG_GAME_INCA_FREE_GAME":           301,
	}
)

func (x SiXiangGame) Enum() *SiXiangGame {
	p := new(SiXiangGame)
	*p = x
	return p
}

func (x SiXiangGame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SiXiangGame) Descriptor() protoreflect.EnumDescriptor {
	return file_slots_game_proto_enumTypes[1].Descriptor()
}

func (SiXiangGame) Type() protoreflect.EnumType {
	return &file_slots_game_proto_enumTypes[1]
}

func (x SiXiangGame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SiXiangGame.Descriptor instead.
func (SiXiangGame) EnumDescriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{1}
}

type BigWin int32

const (
	BigWin_BIG_WIN_UNSPECIFIED BigWin = 0
	BigWin_BIG_WIN_NICE        BigWin = 5
	BigWin_BIG_WIN_HUGE        BigWin = 10
	BigWin_BIG_WIN_BIG         BigWin = 25
	BigWin_BIG_WIN_MEGA        BigWin = 50
)

// Enum value maps for BigWin.
var (
	BigWin_name = map[int32]string{
		0:  "BIG_WIN_UNSPECIFIED",
		5:  "BIG_WIN_NICE",
		10: "BIG_WIN_HUGE",
		25: "BIG_WIN_BIG",
		50: "BIG_WIN_MEGA",
	}
	BigWin_value = map[string]int32{
		"BIG_WIN_UNSPECIFIED": 0,
		"BIG_WIN_NICE":        5,
		"BIG_WIN_HUGE":        10,
		"BIG_WIN_BIG":         25,
		"BIG_WIN_MEGA":        50,
	}
)

func (x BigWin) Enum() *BigWin {
	p := new(BigWin)
	*p = x
	return p
}

func (x BigWin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BigWin) Descriptor() protoreflect.EnumDescriptor {
	return file_slots_game_proto_enumTypes[2].Descriptor()
}

func (BigWin) Type() protoreflect.EnumType {
	return &file_slots_game_proto_enumTypes[2]
}

func (x BigWin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BigWin.Descriptor instead.
func (BigWin) EnumDescriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{2}
}

type WinJackpot int32

const (
	WinJackpot_WIN_JACKPOT_UNSPECIFIED WinJackpot = 0
	WinJackpot_WIN_JACKPOT_MINOR       WinJackpot = 10
	WinJackpot_WIN_JACKPOT_MAJOR       WinJackpot = 20
	WinJackpot_WIN_JACKPOT_MEGA        WinJackpot = 30
	WinJackpot_WIN_JACKPOT_GRAND       WinJackpot = 150
	WinJackpot_WIN_JACKPOT_MINI        WinJackpot = 1
)

// Enum value maps for WinJackpot.
var (
	WinJackpot_name = map[int32]string{
		0:   "WIN_JACKPOT_UNSPECIFIED",
		10:  "WIN_JACKPOT_MINOR",
		20:  "WIN_JACKPOT_MAJOR",
		30:  "WIN_JACKPOT_MEGA",
		150: "WIN_JACKPOT_GRAND",
		1:   "WIN_JACKPOT_MINI",
	}
	WinJackpot_value = map[string]int32{
		"WIN_JACKPOT_UNSPECIFIED": 0,
		"WIN_JACKPOT_MINOR":       10,
		"WIN_JACKPOT_MAJOR":       20,
		"WIN_JACKPOT_MEGA":        30,
		"WIN_JACKPOT_GRAND":       150,
		"WIN_JACKPOT_MINI":        1,
	}
)

func (x WinJackpot) Enum() *WinJackpot {
	p := new(WinJackpot)
	*p = x
	return p
}

func (x WinJackpot) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WinJackpot) Descriptor() protoreflect.EnumDescriptor {
	return file_slots_game_proto_enumTypes[3].Descriptor()
}

func (WinJackpot) Type() protoreflect.EnumType {
	return &file_slots_game_proto_enumTypes[3]
}

func (x WinJackpot) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WinJackpot.Descriptor instead.
func (WinJackpot) EnumDescriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{3}
}

type SlotDesk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ma trận rowxcol ở dạng array 1 chiều,
	// thể hiện các symbol hiện tại của game
	Matrix *SlotMatrix `protobuf:"bytes,1,opt,name=matrix,proto3" json:"matrix,omitempty"`
	// ma trận 5x3 ở dạng array 1 chiều,
	//
	//	thể hiện các symbol hiện tại của game, đã áp dụng rule thay thế wild
	SpreadMatrix *SlotMatrix `protobuf:"bytes,4,opt,name=spread_matrix,json=spreadMatrix,proto3" json:"spread_matrix,omitempty"`
	// mảng chưa danh sách payline đã win.
	Paylines []*Payline `protobuf:"bytes,5,rep,name=paylines,proto3" json:"paylines,omitempty"`
	// mức cược hiện tại của lần spin
	ChipsMcb int64 `protobuf:"varint,6,opt,name=chips_mcb,json=chipsMcb,proto3" json:"chips_mcb,omitempty"`
	// loại game kế tiếp user sẽ chơi
	NextSixiangGame SiXiangGame `protobuf:"varint,7,opt,name=next_sixiang_game,json=nextSixiangGame,proto3,enum=api.SiXiangGame" json:"next_sixiang_game,omitempty"`
	// loại game hiện tại user đang chơi
	CurrentSixiangGame SiXiangGame `protobuf:"varint,100,opt,name=current_sixiang_game,json=currentSixiangGame,proto3,enum=api.SiXiangGame" json:"current_sixiang_game,omitempty"`
	// true khi kết thúc game, và có hành động cập nhật số dư ví của user
	// ví dụ game bình thường mỗi lần spin thì sẽ kết thúc game và + tiền
	// nhưng các game đặc biệt như bonus, lucky draw ...
	// thì sau x lần spin mới end game
	// khi đó mới cộng tiền
	IsFinishGame bool `protobuf:"varint,101,opt,name=is_finish_game,json=isFinishGame,proto3" json:"is_finish_game,omitempty"`
	// Is sixinag bonus, x4 reward, chưa làm
	IsInSixiangBonus bool `protobuf:"varint,110,opt,name=is_in_sixiang_bonus,json=isInSixiangBonus,proto3" json:"is_in_sixiang_bonus,omitempty"`
	// các mảng symbol quay được ở các game đặc biệt.
	SpinSymbols []*SpinSymbol `protobuf:"bytes,8,rep,name=spin_symbols,json=spinSymbols,proto3" json:"spin_symbols,omitempty"`
	// loại jackot đã win
	WinJp WinJackpot `protobuf:"varint,9,opt,name=win_jp,json=winJp,proto3,enum=api.WinJackpot" json:"win_jp,omitempty"`
	// loại big win (mega, huge, big...)
	BigWin BigWin `protobuf:"varint,11,opt,name=big_win,json=bigWin,proto3,enum=api.BigWin" json:"big_win,omitempty"`
	// tổng số chip thắng trong game
	// int64 chips_win = 13;
	// cap nhat bien dong so du trong wallet
	// nếu true, có nghĩa có action cộng tiền ở wallet
	// nếu fale, 2 giá trị balance_chips_wallet_before và
	// balance_chips_wallet_after luôn = 0, nên bỏ qua
	// bool update_wallet = 104;
	GameReward *GameReward `protobuf:"bytes,14,opt,name=game_reward,json=gameReward,proto3" json:"game_reward,omitempty"`
	// int64 total_chips_win_by_game = 17;
	// số chip trong wallet trước spin
	// các symbol đặc biệt thu thập được,
	// vd như eye ở sixiang, letter ở tarzan
	CollectionSymbols []*CollectSymbol `protobuf:"bytes,16,rep,name=collection_symbols,json=collectionSymbols,proto3" json:"collection_symbols,omitempty"`
	// ngọc rừng xanh ở tarzan game
	TsUnix           int64 `protobuf:"varint,21,opt,name=ts_unix,json=tsUnix,proto3" json:"ts_unix,omitempty"`
	RatioFruitBasket int64 `protobuf:"varint,22,opt,name=ratio_fruit_basket,json=ratioFruitBasket,proto3" json:"ratio_fruit_basket,omitempty"`
	// số lượt spin còn lại, -1 = unlimited
	NumSpinLeft int64    `protobuf:"varint,23,opt,name=num_spin_left,json=numSpinLeft,proto3" json:"num_spin_left,omitempty"`
	BetLevels   []int64  `protobuf:"varint,24,rep,packed,name=bet_levels,json=betLevels,proto3" json:"bet_levels,omitempty"`
	InfoBet     *InfoBet `protobuf:"bytes,25,opt,name=info_bet,json=infoBet,proto3" json:"info_bet,omitempty"`
	ChipsBuyGem int64    `protobuf:"varint,26,opt,name=chips_buy_gem,json=chipsBuyGem,proto3" json:"chips_buy_gem,omitempty"`
	// số ngọc collect được để mở SI XIANG BONUS game
	// symbol is
	// SI_XIANG_GAME_DRAGON_PEARL
	// SI_XIANG_GAME_LUCKDRAW
	// SI_XIANG_GAME_GOLDPICK
	// SI_XIANG_GAME_RAPIDPAY
	SixiangGems   []SiXiangGame   `protobuf:"varint,27,rep,packed,name=sixiang_gems,json=sixiangGems,proto3,enum=api.SiXiangGame" json:"sixiang_gems,omitempty"`
	LetterSymbols []SiXiangSymbol `protobuf:"varint,28,rep,packed,name=letter_symbols,json=letterSymbols,proto3,enum=api.SiXiangSymbol" json:"letter_symbols,omitempty"`
	WinJpHistory  *JackpotHistory `protobuf:"bytes,29,opt,name=win_jp_history,json=winJpHistory,proto3" json:"win_jp_history,omitempty"`
	GameConfig    *GameConfig     `protobuf:"bytes,30,opt,name=game_config,json=gameConfig,proto3" json:"game_config,omitempty"`
}

func (x *SlotDesk) Reset() {
	*x = SlotDesk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotDesk) ProtoMessage() {}

func (x *SlotDesk) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotDesk.ProtoReflect.Descriptor instead.
func (*SlotDesk) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{0}
}

func (x *SlotDesk) GetMatrix() *SlotMatrix {
	if x != nil {
		return x.Matrix
	}
	return nil
}

func (x *SlotDesk) GetSpreadMatrix() *SlotMatrix {
	if x != nil {
		return x.SpreadMatrix
	}
	return nil
}

func (x *SlotDesk) GetPaylines() []*Payline {
	if x != nil {
		return x.Paylines
	}
	return nil
}

func (x *SlotDesk) GetChipsMcb() int64 {
	if x != nil {
		return x.ChipsMcb
	}
	return 0
}

func (x *SlotDesk) GetNextSixiangGame() SiXiangGame {
	if x != nil {
		return x.NextSixiangGame
	}
	return SiXiangGame_SI_XIANG_GAME_UNSPECIFIED
}

func (x *SlotDesk) GetCurrentSixiangGame() SiXiangGame {
	if x != nil {
		return x.CurrentSixiangGame
	}
	return SiXiangGame_SI_XIANG_GAME_UNSPECIFIED
}

func (x *SlotDesk) GetIsFinishGame() bool {
	if x != nil {
		return x.IsFinishGame
	}
	return false
}

func (x *SlotDesk) GetIsInSixiangBonus() bool {
	if x != nil {
		return x.IsInSixiangBonus
	}
	return false
}

func (x *SlotDesk) GetSpinSymbols() []*SpinSymbol {
	if x != nil {
		return x.SpinSymbols
	}
	return nil
}

func (x *SlotDesk) GetWinJp() WinJackpot {
	if x != nil {
		return x.WinJp
	}
	return WinJackpot_WIN_JACKPOT_UNSPECIFIED
}

func (x *SlotDesk) GetBigWin() BigWin {
	if x != nil {
		return x.BigWin
	}
	return BigWin_BIG_WIN_UNSPECIFIED
}

func (x *SlotDesk) GetGameReward() *GameReward {
	if x != nil {
		return x.GameReward
	}
	return nil
}

func (x *SlotDesk) GetCollectionSymbols() []*CollectSymbol {
	if x != nil {
		return x.CollectionSymbols
	}
	return nil
}

func (x *SlotDesk) GetTsUnix() int64 {
	if x != nil {
		return x.TsUnix
	}
	return 0
}

func (x *SlotDesk) GetRatioFruitBasket() int64 {
	if x != nil {
		return x.RatioFruitBasket
	}
	return 0
}

func (x *SlotDesk) GetNumSpinLeft() int64 {
	if x != nil {
		return x.NumSpinLeft
	}
	return 0
}

func (x *SlotDesk) GetBetLevels() []int64 {
	if x != nil {
		return x.BetLevels
	}
	return nil
}

func (x *SlotDesk) GetInfoBet() *InfoBet {
	if x != nil {
		return x.InfoBet
	}
	return nil
}

func (x *SlotDesk) GetChipsBuyGem() int64 {
	if x != nil {
		return x.ChipsBuyGem
	}
	return 0
}

func (x *SlotDesk) GetSixiangGems() []SiXiangGame {
	if x != nil {
		return x.SixiangGems
	}
	return nil
}

func (x *SlotDesk) GetLetterSymbols() []SiXiangSymbol {
	if x != nil {
		return x.LetterSymbols
	}
	return nil
}

func (x *SlotDesk) GetWinJpHistory() *JackpotHistory {
	if x != nil {
		return x.WinJpHistory
	}
	return nil
}

func (x *SlotDesk) GetGameConfig() *GameConfig {
	if x != nil {
		return x.GameConfig
	}
	return nil
}

type GameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumScatterSeq int64   `protobuf:"varint,1,opt,name=num_scatter_seq,json=numScatterSeq,proto3" json:"num_scatter_seq,omitempty"`
	NumFreeSpin   int64   `protobuf:"varint,2,opt,name=num_free_spin,json=numFreeSpin,proto3" json:"num_free_spin,omitempty"`
	NumWild       int64   `protobuf:"varint,3,opt,name=num_wild,json=numWild,proto3" json:"num_wild,omitempty"`
	RatioWild     float32 `protobuf:"fixed32,4,opt,name=ratio_wild,json=ratioWild,proto3" json:"ratio_wild,omitempty"`
	RatioBasket   float32 `protobuf:"fixed32,5,opt,name=ratio_basket,json=ratioBasket,proto3" json:"ratio_basket,omitempty"`
}

func (x *GameConfig) Reset() {
	*x = GameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfig) ProtoMessage() {}

func (x *GameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfig.ProtoReflect.Descriptor instead.
func (*GameConfig) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{1}
}

func (x *GameConfig) GetNumScatterSeq() int64 {
	if x != nil {
		return x.NumScatterSeq
	}
	return 0
}

func (x *GameConfig) GetNumFreeSpin() int64 {
	if x != nil {
		return x.NumFreeSpin
	}
	return 0
}

func (x *GameConfig) GetNumWild() int64 {
	if x != nil {
		return x.NumWild
	}
	return 0
}

func (x *GameConfig) GetRatioWild() float32 {
	if x != nil {
		return x.RatioWild
	}
	return 0
}

func (x *GameConfig) GetRatioBasket() float32 {
	if x != nil {
		return x.RatioBasket
	}
	return 0
}

// Ma trận symbol
type SlotMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mảng 2 chiều ở dạng list, rowxcol
	Lists []SiXiangSymbol `protobuf:"varint,1,rep,packed,name=lists,proto3,enum=api.SiXiangSymbol" json:"lists,omitempty"`
	// số hàng tối đa
	Rows int32 `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
	// số cột tối đa
	Cols      int32         `protobuf:"varint,3,opt,name=cols,proto3" json:"cols,omitempty"`
	SpinLists []*SpinSymbol `protobuf:"bytes,4,rep,name=spin_lists,json=spinLists,proto3" json:"spin_lists,omitempty"`
}

func (x *SlotMatrix) Reset() {
	*x = SlotMatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotMatrix) ProtoMessage() {}

func (x *SlotMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotMatrix.ProtoReflect.Descriptor instead.
func (*SlotMatrix) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{2}
}

func (x *SlotMatrix) GetLists() []SiXiangSymbol {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *SlotMatrix) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *SlotMatrix) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *SlotMatrix) GetSpinLists() []*SpinSymbol {
	if x != nil {
		return x.SpinLists
	}
	return nil
}

// Symbol quay được
// có số hàng là row, côt là col
// với ô đầu tính ở (0,0)
type SpinSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     SiXiangSymbol `protobuf:"varint,1,opt,name=symbol,proto3,enum=api.SiXiangSymbol" json:"symbol,omitempty"`
	Col        int32         `protobuf:"varint,2,opt,name=col,proto3" json:"col,omitempty"`
	Row        int32         `protobuf:"varint,3,opt,name=row,proto3" json:"row,omitempty"`
	Ratio      float32       `protobuf:"fixed32,4,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Index      int32         `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	WinJp      WinJackpot    `protobuf:"varint,6,opt,name=win_jp,json=winJp,proto3,enum=api.WinJackpot" json:"win_jp,omitempty"`
	WinAmount  int64         `protobuf:"varint,7,opt,name=win_amount,json=winAmount,proto3" json:"win_amount,omitempty"`
	RatioBonus float32       `protobuf:"fixed32,8,opt,name=ratio_bonus,json=ratioBonus,proto3" json:"ratio_bonus,omitempty"`
}

func (x *SpinSymbol) Reset() {
	*x = SpinSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpinSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpinSymbol) ProtoMessage() {}

func (x *SpinSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpinSymbol.ProtoReflect.Descriptor instead.
func (*SpinSymbol) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{3}
}

func (x *SpinSymbol) GetSymbol() SiXiangSymbol {
	if x != nil {
		return x.Symbol
	}
	return SiXiangSymbol_SI_XIANG_SYMBOL_UNSPECIFIED
}

func (x *SpinSymbol) GetCol() int32 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *SpinSymbol) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *SpinSymbol) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *SpinSymbol) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SpinSymbol) GetWinJp() WinJackpot {
	if x != nil {
		return x.WinJp
	}
	return WinJackpot_WIN_JACKPOT_UNSPECIFIED
}

func (x *SpinSymbol) GetWinAmount() int64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

func (x *SpinSymbol) GetRatioBonus() float32 {
	if x != nil {
		return x.RatioBonus
	}
	return 0
}

type CollectSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol SiXiangSymbol `protobuf:"varint,1,opt,name=symbol,proto3,enum=api.SiXiangSymbol" json:"symbol,omitempty"`
	Qty    int64         `protobuf:"varint,2,opt,name=qty,proto3" json:"qty,omitempty"` // so luong
	Ratio  float32       `protobuf:"fixed32,3,opt,name=ratio,proto3" json:"ratio,omitempty"`
}

func (x *CollectSymbol) Reset() {
	*x = CollectSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectSymbol) ProtoMessage() {}

func (x *CollectSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectSymbol.ProtoReflect.Descriptor instead.
func (*CollectSymbol) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{4}
}

func (x *CollectSymbol) GetSymbol() SiXiangSymbol {
	if x != nil {
		return x.Symbol
	}
	return SiXiangSymbol_SI_XIANG_SYMBOL_UNSPECIFIED
}

func (x *CollectSymbol) GetQty() int64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *CollectSymbol) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

type JackpotReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinJackpot WinJackpot `protobuf:"varint,1,opt,name=win_jackpot,json=winJackpot,proto3,enum=api.WinJackpot" json:"win_jackpot,omitempty"`
	Ratio      int64      `protobuf:"varint,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Count      int64      `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Chips      int64      `protobuf:"varint,4,opt,name=chips,proto3" json:"chips,omitempty"`
	// tích lũy lịch sử chơi
	ChipsAccum int64 `protobuf:"varint,5,opt,name=chips_accum,json=chipsAccum,proto3" json:"chips_accum,omitempty"`
}

func (x *JackpotReward) Reset() {
	*x = JackpotReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JackpotReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JackpotReward) ProtoMessage() {}

func (x *JackpotReward) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JackpotReward.ProtoReflect.Descriptor instead.
func (*JackpotReward) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{5}
}

func (x *JackpotReward) GetWinJackpot() WinJackpot {
	if x != nil {
		return x.WinJackpot
	}
	return WinJackpot_WIN_JACKPOT_UNSPECIFIED
}

func (x *JackpotReward) GetRatio() int64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *JackpotReward) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *JackpotReward) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *JackpotReward) GetChipsAccum() int64 {
	if x != nil {
		return x.ChipsAccum
	}
	return 0
}

type JackpotHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minor *JackpotReward `protobuf:"bytes,1,opt,name=minor,proto3" json:"minor,omitempty"`
	Major *JackpotReward `protobuf:"bytes,2,opt,name=major,proto3" json:"major,omitempty"`
	Mega  *JackpotReward `protobuf:"bytes,3,opt,name=mega,proto3" json:"mega,omitempty"`
	Grand *JackpotReward `protobuf:"bytes,4,opt,name=grand,proto3" json:"grand,omitempty"`
	Mini  *JackpotReward `protobuf:"bytes,5,opt,name=mini,proto3" json:"mini,omitempty"`
}

func (x *JackpotHistory) Reset() {
	*x = JackpotHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JackpotHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JackpotHistory) ProtoMessage() {}

func (x *JackpotHistory) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JackpotHistory.ProtoReflect.Descriptor instead.
func (*JackpotHistory) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{6}
}

func (x *JackpotHistory) GetMinor() *JackpotReward {
	if x != nil {
		return x.Minor
	}
	return nil
}

func (x *JackpotHistory) GetMajor() *JackpotReward {
	if x != nil {
		return x.Major
	}
	return nil
}

func (x *JackpotHistory) GetMega() *JackpotReward {
	if x != nil {
		return x.Mega
	}
	return nil
}

func (x *JackpotHistory) GetGrand() *JackpotReward {
	if x != nil {
		return x.Grand
	}
	return nil
}

func (x *JackpotHistory) GetMini() *JackpotReward {
	if x != nil {
		return x.Mini
	}
	return nil
}

type Payline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol   SiXiangSymbol `protobuf:"varint,2,opt,name=symbol,proto3,enum=api.SiXiangSymbol" json:"symbol,omitempty"`
	NumOccur int32         `protobuf:"varint,3,opt,name=num_occur,json=numOccur,proto3" json:"num_occur,omitempty"`
	Rate     float64       `protobuf:"fixed64,4,opt,name=rate,proto3" json:"rate,omitempty"`
	Chips    int64         `protobuf:"varint,5,opt,name=chips,proto3" json:"chips,omitempty"`
	// Array contain index of symbol in matrix
	Indices []int32 `protobuf:"varint,6,rep,packed,name=indices,proto3" json:"indices,omitempty"`
}

func (x *Payline) Reset() {
	*x = Payline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_game_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payline) ProtoMessage() {}

func (x *Payline) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payline.ProtoReflect.Descriptor instead.
func (*Payline) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{7}
}

func (x *Payline) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Payline) GetSymbol() SiXiangSymbol {
	if x != nil {
		return x.Symbol
	}
	return SiXiangSymbol_SI_XIANG_SYMBOL_UNSPECIFIED
}

func (x *Payline) GetNumOccur() int32 {
	if x != nil {
		return x.NumOccur
	}
	return 0
}

func (x *Payline) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Payline) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *Payline) GetIndices() []int32 {
	if x != nil {
		return x.Indices
	}
	return nil
}

type GameReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateWallet bool `protobuf:"varint,1,opt,name=update_wallet,json=updateWallet,proto3" json:"update_wallet,omitempty"`
	// số chip trong wallet trước spin
	BalanceChipsWalletBefore int64 `protobuf:"varint,2,opt,name=balance_chips_wallet_before,json=balanceChipsWalletBefore,proto3" json:"balance_chips_wallet_before,omitempty"`
	// số chip trong wallet sau spin
	BalanceChipsWalletAfter int64 `protobuf:"varint,3,opt,name=balance_chips_wallet_after,json=balanceChipsWalletAfter,proto3" json:"balance_chips_wallet_after,omitempty"`
	// tổng chip win trong 1 game
	ChipsWin int64 `protobuf:"varint,4,opt,name=chips_win,json=chipsWin,proto3" json:"chips_win,omitempty"`
	// vd trong game tarzan,
	// chip ở đây sẽ là tổng chip trong 9 lần spin
	TotalChipsWinByGame int64 `protobuf:"varint,5,opt,name=total_chips_win_by_game,json=totalChipsWinByGame,proto3" json:"total_chips_win_by_game,omitempty"`
	// ngọc rừng xanh ở tarzan game
	UpdateChipsBonus bool `protobuf:"varint,6,opt,name=update_chips_bonus,json=updateChipsBonus,proto3" json:"update_chips_bonus,omitempty"`
	// int64 chips_bonus = 7;
	// save ratio win in some case
	RatioWin      float32 `protobuf:"fixed32,8,opt,name=ratio_win,json=ratioWin,proto3" json:"ratio_win,omitempty"`
	LineWin       int64   `protobuf:"varint,9,opt,name=line_win,json=lineWin,proto3" json:"line_win,omitempty"`
	TotalRatioWin float32 `protobuf:"fixed32,10,opt,name=total_ratio_win,json=totalRatioWin,proto3" json:"total_ratio_win,omitempty"`
	TotalLineWin  int64   `protobuf:"varint,11,opt,name=total_line_win,json=totalLineWin,proto3" json:"total_line_win,omitempty"`
	ChipBetFee    int64   `protobuf:"varint,12,opt,name=chip_bet_fee,json=chipBetFee,proto3" json:"chip_bet_fee,omitempty"`
	ChipFee       int64   `protobuf:"varint,13,opt,name=chip_fee,json=chipFee,proto3" json:"chip_fee,omitempty"`
	// ratio bonus like tarzan payline cross freespin
	RatioBonus float32 `protobuf:"fixed32,14,opt,name=ratio_bonus,json=ratioBonus,proto3" json:"ratio_bonus,omitempty"`
	// tarzan PerlGreenForest
	PerlGreenForest             int32 `protobuf:"varint,15,opt,name=perl_green_forest,json=perlGreenForest,proto3" json:"perl_green_forest,omitempty"`
	PerlGreenForestChips        int64 `protobuf:"varint,16,opt,name=perl_green_forest_chips,json=perlGreenForestChips,proto3" json:"perl_green_forest_chips,omitempty"`
	PerlGreenForestChipsCollect int64 `protobuf:"varint,17,opt,name=perl_green_forest_chips_collect,json=perlGreenForestChipsCollect,proto3" json:"perl_green_forest_chips_collect,omitempty"`
}

func (x *GameReward) Reset() {
	*x = GameReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_game_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameReward) ProtoMessage() {}

func (x *GameReward) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameReward.ProtoReflect.Descriptor instead.
func (*GameReward) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{8}
}

func (x *GameReward) GetUpdateWallet() bool {
	if x != nil {
		return x.UpdateWallet
	}
	return false
}

func (x *GameReward) GetBalanceChipsWalletBefore() int64 {
	if x != nil {
		return x.BalanceChipsWalletBefore
	}
	return 0
}

func (x *GameReward) GetBalanceChipsWalletAfter() int64 {
	if x != nil {
		return x.BalanceChipsWalletAfter
	}
	return 0
}

func (x *GameReward) GetChipsWin() int64 {
	if x != nil {
		return x.ChipsWin
	}
	return 0
}

func (x *GameReward) GetTotalChipsWinByGame() int64 {
	if x != nil {
		return x.TotalChipsWinByGame
	}
	return 0
}

func (x *GameReward) GetUpdateChipsBonus() bool {
	if x != nil {
		return x.UpdateChipsBonus
	}
	return false
}

func (x *GameReward) GetRatioWin() float32 {
	if x != nil {
		return x.RatioWin
	}
	return 0
}

func (x *GameReward) GetLineWin() int64 {
	if x != nil {
		return x.LineWin
	}
	return 0
}

func (x *GameReward) GetTotalRatioWin() float32 {
	if x != nil {
		return x.TotalRatioWin
	}
	return 0
}

func (x *GameReward) GetTotalLineWin() int64 {
	if x != nil {
		return x.TotalLineWin
	}
	return 0
}

func (x *GameReward) GetChipBetFee() int64 {
	if x != nil {
		return x.ChipBetFee
	}
	return 0
}

func (x *GameReward) GetChipFee() int64 {
	if x != nil {
		return x.ChipFee
	}
	return 0
}

func (x *GameReward) GetRatioBonus() float32 {
	if x != nil {
		return x.RatioBonus
	}
	return 0
}

func (x *GameReward) GetPerlGreenForest() int32 {
	if x != nil {
		return x.PerlGreenForest
	}
	return 0
}

func (x *GameReward) GetPerlGreenForestChips() int64 {
	if x != nil {
		return x.PerlGreenForestChips
	}
	return 0
}

func (x *GameReward) GetPerlGreenForestChipsCollect() int64 {
	if x != nil {
		return x.PerlGreenForestChipsCollect
	}
	return 0
}

type SaveGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastUpdateUnix int64  `protobuf:"varint,1,opt,name=last_update_unix,json=lastUpdateUnix,proto3" json:"last_update_unix,omitempty"`
	Data           string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SaveGame) Reset() {
	*x = SaveGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_game_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveGame) ProtoMessage() {}

func (x *SaveGame) ProtoReflect() protoreflect.Message {
	mi := &file_slots_game_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveGame.ProtoReflect.Descriptor instead.
func (*SaveGame) Descriptor() ([]byte, []int) {
	return file_slots_game_proto_rawDescGZIP(), []int{9}
}

func (x *SaveGame) GetLastUpdateUnix() int64 {
	if x != nil {
		return x.LastUpdateUnix
	}
	return 0
}

func (x *SaveGame) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_slots_game_proto protoreflect.FileDescriptor

var file_slots_game_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x08, 0x0a, 0x08, 0x53, 0x6c,
	0x6f, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12,
	0x34, 0x0a, 0x0d, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x0c, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x6d, 0x63, 0x62, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x69, 0x70, 0x73, 0x4d, 0x63, 0x62, 0x12, 0x3c, 0x0a, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x69, 0x78, 0x69, 0x61, 0x6e, 0x67, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69,
	0x58, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x53,
	0x69, 0x78, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x14, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x78, 0x69, 0x61, 0x6e, 0x67, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x78, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69,
	0x78, 0x69, 0x61, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x49, 0x6e, 0x53, 0x69, 0x78, 0x69, 0x61, 0x6e, 0x67, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x73, 0x70, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x70, 0x69, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0b, 0x73, 0x70, 0x69, 0x6e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x5f, 0x6a,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69,
	0x6e, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x52, 0x05, 0x77, 0x69, 0x6e, 0x4a, 0x70, 0x12,
	0x24, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x52, 0x06, 0x62,
	0x69, 0x67, 0x57, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x73,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x73, 0x55,
	0x6e, 0x69, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x66, 0x72, 0x75,
	0x69, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x46, 0x72, 0x75, 0x69, 0x74, 0x42, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x53, 0x70, 0x69,
	0x6e, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x65, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x65, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x65, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x67, 0x65, 0x6d, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x70, 0x73, 0x42, 0x75, 0x79, 0x47, 0x65,
	0x6d, 0x12, 0x33, 0x0a, 0x0c, 0x73, 0x69, 0x78, 0x69, 0x61, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x6d,
	0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69,
	0x58, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x78, 0x69, 0x61,
	0x6e, 0x67, 0x47, 0x65, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x0d, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x12, 0x39, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x5f, 0x6a, 0x70, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c,
	0x77, 0x69, 0x6e, 0x4a, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x0b,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb5,
	0x01, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x53, 0x63, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d,
	0x5f, 0x77, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d,
	0x57, 0x69, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x77, 0x69,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x57,
	0x69, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x62, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x53, 0x6c, 0x6f, 0x74, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x58, 0x69, 0x61,
	0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x70, 0x69, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x09, 0x73, 0x70,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x0a, 0x53, 0x70, 0x69, 0x6e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x58,
	0x69, 0x61, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x63, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x26, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x5f, 0x6a, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69, 0x6e, 0x4a, 0x61, 0x63, 0x6b,
	0x70, 0x6f, 0x74, 0x52, 0x05, 0x77, 0x69, 0x6e, 0x4a, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x22, 0x63, 0x0a, 0x0d, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x22,
	0xa4, 0x01, 0x0a, 0x0d, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x30, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x5f, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69, 0x6e,
	0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x4a, 0x61, 0x63, 0x6b,
	0x70, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x61,
	0x63, 0x63, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x22, 0xde, 0x01, 0x0a, 0x0e, 0x4a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x04, 0x6d, 0x65, 0x67, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x04, 0x6d, 0x65, 0x67, 0x61, 0x12, 0x28, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x12,
	0x26, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x69, 0x22, 0xa6, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x58, 0x69, 0x61, 0x6e,
	0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x22, 0xbb, 0x05, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x68, 0x69, 0x70, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x68, 0x69, 0x70, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x69, 0x70, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x34, 0x0a,
	0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x77, 0x69, 0x6e,
	0x5f, 0x62, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x73, 0x57, 0x69, 0x6e, 0x42, 0x79, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68,
	0x69, 0x70, 0x73, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x70, 0x73, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x57, 0x69, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x57, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x77, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x6e, 0x65, 0x57, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x70, 0x5f,
	0x62, 0x65, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x68, 0x69, 0x70, 0x42, 0x65, 0x74, 0x46, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x70, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x69,
	0x70, 0x46, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x6c, 0x5f, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x70, 0x65, 0x72, 0x6c, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x6c, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x70, 0x65, 0x72, 0x6c, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x46, 0x6f, 0x72,
	0x65, 0x73, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x65, 0x72, 0x6c,
	0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x69, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1b, 0x70, 0x65, 0x72, 0x6c, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x65,
	0x73, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x22, 0x48,
	0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0xe2, 0x21, 0x0a, 0x0d, 0x53, 0x69, 0x58,
	0x69, 0x61, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x49,
	0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x31,
	0x30, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49,
	0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x51, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x5f, 0x58,
	0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x41, 0x10, 0x10, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x10, 0x20,
	0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x47, 0x45, 0x52, 0x10,
	0x40, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x4d, 0x49, 0x4c, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x49, 0x52, 0x44, 0x10, 0x80, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x52, 0x49, 0x4f,
	0x52, 0x10, 0x80, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x43, 0x41, 0x54, 0x54, 0x45, 0x52, 0x10,
	0x80, 0x04, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x47,
	0x4f, 0x4e, 0x42, 0x41, 0x4c, 0x4c, 0x10, 0x81, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x49, 0x5f,
	0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x4e,
	0x55, 0x53, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x44, 0x52, 0x41, 0x57, 0x10, 0x82, 0x08, 0x12,
	0x23, 0x0a, 0x1e, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x50, 0x49, 0x43,
	0x4b, 0x10, 0x83, 0x08, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x52, 0x41,
	0x50, 0x49, 0x44, 0x50, 0x41, 0x59, 0x10, 0x84, 0x08, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x49, 0x5f,
	0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x4e,
	0x55, 0x53, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x58, 0x31, 0x30, 0x10, 0x85, 0x08, 0x12, 0x22, 0x0a,
	0x1d, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x58, 0x32, 0x30, 0x10, 0x86,
	0x08, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x58,
	0x33, 0x30, 0x10, 0x87, 0x08, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e,
	0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x47,
	0x4f, 0x4c, 0x44, 0x58, 0x35, 0x30, 0x10, 0x88, 0x08, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x49, 0x5f,
	0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x52, 0x41,
	0x47, 0x4f, 0x4e, 0x50, 0x45, 0x41, 0x52, 0x4c, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x4d, 0x4f, 0x4e,
	0x45, 0x59, 0x10, 0x80, 0x0a, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e,
	0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x50,
	0x45, 0x41, 0x52, 0x4c, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x31,
	0x10, 0x81, 0x0a, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x50, 0x45, 0x41,
	0x52, 0x4c, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x32, 0x10, 0x82,
	0x0a, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x50, 0x45, 0x41, 0x52, 0x4c,
	0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x33, 0x10, 0x83, 0x0a, 0x12,
	0x2c, 0x0a, 0x27, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x50, 0x45, 0x41, 0x52, 0x4c, 0x5f, 0x47,
	0x45, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x34, 0x10, 0x84, 0x0a, 0x12, 0x2c, 0x0a,
	0x27, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x50, 0x45, 0x41, 0x52, 0x4c, 0x5f, 0x47, 0x45, 0x4d,
	0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x35, 0x10, 0x85, 0x0a, 0x12, 0x29, 0x0a, 0x24, 0x53,
	0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44,
	0x52, 0x41, 0x47, 0x4f, 0x4e, 0x50, 0x45, 0x41, 0x52, 0x4c, 0x5f, 0x45, 0x59, 0x45, 0x5f, 0x42,
	0x49, 0x52, 0x44, 0x10, 0x90, 0x0a, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e,
	0x50, 0x45, 0x41, 0x52, 0x4c, 0x5f, 0x45, 0x59, 0x45, 0x5f, 0x54, 0x49, 0x47, 0x45, 0x52, 0x10,
	0x91, 0x0a, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x50, 0x45, 0x41, 0x52,
	0x4c, 0x5f, 0x45, 0x59, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x52, 0x49, 0x4f, 0x52, 0x10, 0x92, 0x0a,
	0x12, 0x2b, 0x0a, 0x26, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x50, 0x45, 0x41, 0x52, 0x4c, 0x5f,
	0x45, 0x59, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x10, 0x93, 0x0a, 0x12, 0x29, 0x0a,
	0x24, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x50, 0x45, 0x41, 0x52, 0x4c, 0x5f, 0x4a, 0x50, 0x5f,
	0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x94, 0x0a, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x49, 0x5f, 0x58,
	0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x52, 0x41, 0x47,
	0x4f, 0x4e, 0x50, 0x45, 0x41, 0x52, 0x4c, 0x5f, 0x4a, 0x50, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52,
	0x10, 0x95, 0x0a, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x50, 0x45, 0x41,
	0x52, 0x4c, 0x5f, 0x4a, 0x50, 0x5f, 0x4d, 0x45, 0x47, 0x41, 0x10, 0x96, 0x0a, 0x12, 0x29, 0x0a,
	0x24, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x50, 0x45, 0x41, 0x52, 0x4c, 0x5f, 0x4a, 0x50, 0x5f,
	0x47, 0x52, 0x41, 0x4e, 0x44, 0x10, 0x97, 0x0a, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x49, 0x5f, 0x58,
	0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x55, 0x43, 0x4b,
	0x59, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x80, 0x0c, 0x12, 0x24,
	0x0a, 0x1f, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x4d, 0x41, 0x4a, 0x4f,
	0x52, 0x10, 0x81, 0x0c, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x44, 0x52, 0x41,
	0x57, 0x5f, 0x4d, 0x45, 0x47, 0x41, 0x10, 0x82, 0x0c, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x49, 0x5f,
	0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x55, 0x43,
	0x4b, 0x59, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x44, 0x10, 0x83, 0x0c, 0x12,
	0x25, 0x0a, 0x20, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x47, 0x4f, 0x4c,
	0x44, 0x5f, 0x31, 0x10, 0x84, 0x0c, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x44,
	0x52, 0x41, 0x57, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x32, 0x10, 0x85, 0x0c, 0x12, 0x25, 0x0a,
	0x20, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f,
	0x33, 0x10, 0x86, 0x0c, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x49, 0x43,
	0x4b, 0x5f, 0x54, 0x52, 0x59, 0x41, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x80, 0x0e, 0x12, 0x24, 0x0a,
	0x1f, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x31,
	0x10, 0x81, 0x0e, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x49, 0x43, 0x4b,
	0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x32, 0x10, 0x82, 0x0e, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x49, 0x5f,
	0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x47, 0x4f, 0x4c,
	0x44, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x33, 0x10, 0x83, 0x0e, 0x12,
	0x24, 0x0a, 0x1f, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x4f, 0x4c,
	0x44, 0x34, 0x10, 0x84, 0x0e, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e,
	0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x49,
	0x43, 0x4b, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x35, 0x10, 0x85, 0x0e, 0x12, 0x27, 0x0a, 0x22, 0x53,
	0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x47,
	0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x4a, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x4f,
	0x52, 0x10, 0x86, 0x0e, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x49, 0x43,
	0x4b, 0x5f, 0x4a, 0x50, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x87, 0x0e, 0x12, 0x26, 0x0a,
	0x21, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x4a, 0x50, 0x5f, 0x4d, 0x45,
	0x47, 0x41, 0x10, 0x88, 0x0e, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e,
	0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x41, 0x50, 0x49, 0x44, 0x50, 0x41,
	0x59, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x80, 0x10, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x49, 0x5f, 0x58,
	0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x41, 0x50, 0x49,
	0x44, 0x50, 0x41, 0x59, 0x5f, 0x58, 0x32, 0x10, 0x81, 0x10, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x49,
	0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x41,
	0x50, 0x49, 0x44, 0x50, 0x41, 0x59, 0x5f, 0x58, 0x33, 0x10, 0x82, 0x10, 0x12, 0x20, 0x0a, 0x1b,
	0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f,
	0x52, 0x41, 0x50, 0x49, 0x44, 0x50, 0x41, 0x59, 0x5f, 0x58, 0x34, 0x10, 0x83, 0x10, 0x12, 0x26,
	0x0a, 0x21, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x52, 0x41, 0x50, 0x49, 0x44, 0x50, 0x41, 0x59, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59,
	0x42, 0x4f, 0x58, 0x10, 0x84, 0x10, 0x12, 0x31, 0x0a, 0x2c, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x49, 0x58, 0x41, 0x4e, 0x47,
	0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x50, 0x45, 0x41, 0x52,
	0x4c, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x81, 0x12, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x49, 0x5f,
	0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x49, 0x58,
	0x41, 0x4e, 0x47, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x44, 0x52,
	0x41, 0x57, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x82, 0x12, 0x12, 0x2e, 0x0a, 0x29, 0x53, 0x49,
	0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x49,
	0x58, 0x41, 0x4e, 0x47, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x50, 0x49,
	0x43, 0x4b, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x83, 0x12, 0x12, 0x2e, 0x0a, 0x29, 0x53, 0x49,
	0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x49,
	0x58, 0x41, 0x4e, 0x47, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x52, 0x41, 0x50, 0x49, 0x44, 0x50,
	0x41, 0x59, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x84, 0x12, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x49,
	0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x47, 0x4f,
	0x52, 0x49, 0x4c, 0x4c, 0x45, 0x10, 0x81, 0x20, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x49, 0x5f, 0x58,
	0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x45, 0x4c, 0x45, 0x50,
	0x48, 0x41, 0x4e, 0x54, 0x10, 0x82, 0x20, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x49, 0x5f, 0x58, 0x49,
	0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x41, 0x47, 0x55, 0x41,
	0x52, 0x10, 0x83, 0x20, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x4e, 0x41, 0x43, 0x4b, 0x10, 0x84, 0x20,
	0x12, 0x19, 0x0a, 0x14, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x41, 0x4e, 0x45, 0x10, 0x85, 0x20, 0x12, 0x20, 0x0a, 0x1b, 0x53,
	0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a,
	0x41, 0x4e, 0x45, 0x5f, 0x46, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x86, 0x20, 0x12, 0x1c, 0x0a,
	0x17, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x43, 0x4c, 0x41, 0x59, 0x54, 0x4f, 0x4e, 0x10, 0x87, 0x20, 0x12, 0x1e, 0x0a, 0x19, 0x53,
	0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x46,
	0x52, 0x45, 0x45, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x10, 0x88, 0x20, 0x12, 0x1b, 0x0a, 0x16, 0x53,
	0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54,
	0x41, 0x52, 0x5a, 0x41, 0x4e, 0x10, 0x89, 0x20, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x49, 0x5f, 0x58,
	0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x45, 0x54, 0x54,
	0x45, 0x52, 0x5f, 0x4a, 0x10, 0x90, 0x20, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x49, 0x5f, 0x58, 0x49,
	0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45,
	0x52, 0x5f, 0x55, 0x10, 0x91, 0x20, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52,
	0x5f, 0x4e, 0x10, 0x92, 0x20, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e,
	0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f,
	0x47, 0x10, 0x93, 0x20, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x4c,
	0x10, 0x94, 0x20, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x10,
	0x95, 0x20, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x10, 0x96, 0x20,
	0x12, 0x27, 0x0a, 0x22, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x41, 0x52, 0x5a, 0x41, 0x4e, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x5f,
	0x54, 0x55, 0x52, 0x4e, 0x58, 0x32, 0x10, 0xa0, 0x20, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x49, 0x5f,
	0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x41, 0x52,
	0x5a, 0x41, 0x4e, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x58, 0x33, 0x10,
	0xa1, 0x20, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x41, 0x52, 0x5a, 0x41, 0x4e, 0x5f, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x5f, 0x31, 0x10, 0xa2, 0x20, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x49, 0x5f, 0x58,
	0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x41, 0x52, 0x5a,
	0x41, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x32, 0x10, 0xa3, 0x20, 0x12, 0x24,
	0x0a, 0x1f, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x54, 0x41, 0x52, 0x5a, 0x41, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f,
	0x33, 0x10, 0xa4, 0x20, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x41, 0x52, 0x5a, 0x41, 0x4e, 0x5f, 0x52,
	0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x34, 0x10, 0xa5, 0x20, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x49,
	0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x41,
	0x52, 0x5a, 0x41, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x35, 0x10, 0xa6, 0x20,
	0x12, 0x25, 0x0a, 0x20, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x57, 0x42,
	0x45, 0x52, 0x52, 0x59, 0x10, 0x81, 0x22, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x49, 0x5f, 0x58, 0x49,
	0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45,
	0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x4c, 0x4f, 0x4e, 0x10, 0x82, 0x22, 0x12, 0x23,
	0x0a, 0x1e, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x49, 0x4e, 0x41, 0x50, 0x50, 0x4c, 0x45,
	0x10, 0x83, 0x22, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x47, 0x4f, 0x53, 0x54, 0x45, 0x45, 0x4e, 0x10, 0x84, 0x22, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x49,
	0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e,
	0x44, 0x10, 0x85, 0x22, 0x12, 0x26, 0x0a, 0x21, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x4f, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x86, 0x22, 0x12, 0x27, 0x0a, 0x22,
	0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f,
	0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x56, 0x49, 0x4f, 0x4c,
	0x45, 0x54, 0x10, 0x87, 0x22, 0x12, 0x26, 0x0a, 0x21, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e,
	0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x43, 0x41, 0x54, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x58, 0x33, 0x10, 0x88, 0x22, 0x12, 0x26, 0x0a,
	0x21, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x54, 0x54, 0x45, 0x52, 0x53, 0x5f,
	0x58, 0x34, 0x10, 0x89, 0x22, 0x12, 0x26, 0x0a, 0x21, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e,
	0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x43, 0x41, 0x54, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x58, 0x35, 0x10, 0x90, 0x22, 0x12, 0x2b, 0x0a,
	0x26, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x42, 0x41, 0x53, 0x4b,
	0x45, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x10, 0x91, 0x22, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x49,
	0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55,
	0x49, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x5f,
	0x47, 0x52, 0x41, 0x4e, 0x44, 0x10, 0x92, 0x22, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x49, 0x5f, 0x58,
	0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43,
	0x45, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x5f, 0x4d, 0x41,
	0x4a, 0x4f, 0x52, 0x10, 0x93, 0x22, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f,
	0x46, 0x52, 0x55, 0x49, 0x54, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x4f,
	0x52, 0x10, 0x94, 0x22, 0x12, 0x2b, 0x0a, 0x26, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x52,
	0x55, 0x49, 0x54, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x10, 0x95,
	0x22, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54,
	0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x31, 0x10,
	0xa0, 0x22, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x55, 0x49,
	0x54, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x32,
	0x10, 0xa1, 0x22, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x55,
	0x49, 0x54, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f,
	0x33, 0x10, 0xa2, 0x22, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x52,
	0x55, 0x49, 0x54, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d,
	0x5f, 0x34, 0x10, 0xa3, 0x22, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e,
	0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x46,
	0x52, 0x55, 0x49, 0x54, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f,
	0x4d, 0x5f, 0x35, 0x10, 0xa4, 0x22, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f,
	0x46, 0x52, 0x55, 0x49, 0x54, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x44,
	0x4f, 0x4d, 0x5f, 0x36, 0x10, 0xa5, 0x22, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x49, 0x5f, 0x58, 0x49,
	0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45,
	0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x5f, 0x37, 0x10, 0xa6, 0x22, 0x12, 0x30, 0x0a, 0x2b, 0x53, 0x49, 0x5f, 0x58,
	0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55, 0x49, 0x43,
	0x45, 0x5f, 0x46, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0xa7, 0x22, 0x12, 0x31, 0x0a, 0x2c, 0x53, 0x49,
	0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4a, 0x55,
	0x49, 0x43, 0x45, 0x5f, 0x46, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f,
	0x46, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x49, 0x4e, 0x10, 0xa8, 0x22, 0x12, 0x20, 0x0a,
	0x1b, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x53, 0x10, 0x80, 0x24, 0x12,
	0x22, 0x0a, 0x1d, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x53,
	0x10, 0x81, 0x24, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x42,
	0x53, 0x10, 0x82, 0x24, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x50, 0x41,
	0x44, 0x45, 0x53, 0x10, 0x83, 0x24, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x55, 0x4e, 0x10, 0x84, 0x24,
	0x12, 0x21, 0x0a, 0x1c, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x45, 0x41, 0x47, 0x4c, 0x45, 0x5f, 0x47, 0x41, 0x52, 0x55, 0x44, 0x41,
	0x10, 0x85, 0x24, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x51, 0x55, 0x45, 0x10, 0x86,
	0x24, 0x12, 0x1a, 0x0a, 0x14, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x57, 0x49, 0x4c, 0x44, 0x10, 0xff, 0xff, 0x03, 0x2a, 0x99, 0x05,
	0x0a, 0x0b, 0x53, 0x69, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x41, 0x52, 0x4c, 0x10, 0x03, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x44, 0x52, 0x41, 0x57, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x47, 0x4f, 0x4c,
	0x44, 0x50, 0x49, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x49, 0x5f, 0x58, 0x49,
	0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x50, 0x49, 0x44, 0x50, 0x41,
	0x59, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x49, 0x58, 0x41, 0x4e, 0x47, 0x42, 0x4f, 0x4e, 0x55, 0x53,
	0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x53, 0x49, 0x58, 0x41, 0x4e, 0x47, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f,
	0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x41, 0x52, 0x4c, 0x10, 0x08, 0x12, 0x26,
	0x0a, 0x22, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x53, 0x49, 0x58, 0x41, 0x4e, 0x47, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x4c, 0x55, 0x43, 0x4b,
	0x44, 0x52, 0x41, 0x57, 0x10, 0x09, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x49, 0x58, 0x41, 0x4e, 0x47, 0x42, 0x4f,
	0x4e, 0x55, 0x53, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x50, 0x49, 0x43, 0x4b, 0x10, 0x0a, 0x12, 0x26,
	0x0a, 0x22, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x53, 0x49, 0x58, 0x41, 0x4e, 0x47, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x52, 0x41, 0x50, 0x49,
	0x44, 0x50, 0x41, 0x59, 0x10, 0x0b, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x5a, 0x41, 0x4e, 0x5f, 0x4a,
	0x55, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x65,
	0x12, 0x23, 0x0a, 0x1f, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x41, 0x52, 0x5a, 0x41, 0x4e, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x53, 0x50, 0x49,
	0x4e, 0x58, 0x39, 0x10, 0x66, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e,
	0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0xc8, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x52,
	0x55, 0x49, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x10, 0xc9, 0x01, 0x12, 0x23, 0x0a,
	0x1e, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4a,
	0x55, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x49, 0x4e, 0x10,
	0xca, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x10, 0xcb, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x49, 0x5f, 0x58, 0x49, 0x41,
	0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x41, 0x5f, 0x46, 0x52, 0x45,
	0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0xad, 0x02, 0x2a, 0x68, 0x0a, 0x06, 0x42, 0x69, 0x67,
	0x57, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x49, 0x47, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x42, 0x49, 0x47, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x4e, 0x49, 0x43, 0x45, 0x10, 0x05, 0x12, 0x10,
	0x0a, 0x0c, 0x42, 0x49, 0x47, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x48, 0x55, 0x47, 0x45, 0x10, 0x0a,
	0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x49, 0x47, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x42, 0x49, 0x47, 0x10,
	0x19, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x49, 0x47, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x47,
	0x41, 0x10, 0x32, 0x2a, 0x9b, 0x01, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x4a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x49, 0x4e, 0x5f, 0x4a, 0x41, 0x43, 0x4b, 0x50, 0x4f,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x57, 0x49, 0x4e, 0x5f, 0x4a, 0x41, 0x43, 0x4b, 0x50, 0x4f, 0x54, 0x5f, 0x4d,
	0x49, 0x4e, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x49, 0x4e, 0x5f, 0x4a, 0x41,
	0x43, 0x4b, 0x50, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x14, 0x12, 0x14, 0x0a,
	0x10, 0x57, 0x49, 0x4e, 0x5f, 0x4a, 0x41, 0x43, 0x4b, 0x50, 0x4f, 0x54, 0x5f, 0x4d, 0x45, 0x47,
	0x41, 0x10, 0x1e, 0x12, 0x16, 0x0a, 0x11, 0x57, 0x49, 0x4e, 0x5f, 0x4a, 0x41, 0x43, 0x4b, 0x50,
	0x4f, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x44, 0x10, 0x96, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x57,
	0x49, 0x4e, 0x5f, 0x4a, 0x41, 0x43, 0x4b, 0x50, 0x4f, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x10,
	0x01, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x69, 0x61, 0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x67, 0x70, 0x2d, 0x62, 0x69, 0x6e, 0x67, 0x2d,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_slots_game_proto_rawDescOnce sync.Once
	file_slots_game_proto_rawDescData = file_slots_game_proto_rawDesc
)

func file_slots_game_proto_rawDescGZIP() []byte {
	file_slots_game_proto_rawDescOnce.Do(func() {
		file_slots_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_slots_game_proto_rawDescData)
	})
	return file_slots_game_proto_rawDescData
}

var file_slots_game_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_slots_game_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_slots_game_proto_goTypes = []interface{}{
	(SiXiangSymbol)(0),     // 0: api.SiXiangSymbol
	(SiXiangGame)(0),       // 1: api.SiXiangGame
	(BigWin)(0),            // 2: api.BigWin
	(WinJackpot)(0),        // 3: api.WinJackpot
	(*SlotDesk)(nil),       // 4: api.SlotDesk
	(*GameConfig)(nil),     // 5: api.GameConfig
	(*SlotMatrix)(nil),     // 6: api.SlotMatrix
	(*SpinSymbol)(nil),     // 7: api.SpinSymbol
	(*CollectSymbol)(nil),  // 8: api.CollectSymbol
	(*JackpotReward)(nil),  // 9: api.JackpotReward
	(*JackpotHistory)(nil), // 10: api.JackpotHistory
	(*Payline)(nil),        // 11: api.Payline
	(*GameReward)(nil),     // 12: api.GameReward
	(*SaveGame)(nil),       // 13: api.SaveGame
	(*InfoBet)(nil),        // 14: api.InfoBet
}
var file_slots_game_proto_depIdxs = []int32{
	6,  // 0: api.SlotDesk.matrix:type_name -> api.SlotMatrix
	6,  // 1: api.SlotDesk.spread_matrix:type_name -> api.SlotMatrix
	11, // 2: api.SlotDesk.paylines:type_name -> api.Payline
	1,  // 3: api.SlotDesk.next_sixiang_game:type_name -> api.SiXiangGame
	1,  // 4: api.SlotDesk.current_sixiang_game:type_name -> api.SiXiangGame
	7,  // 5: api.SlotDesk.spin_symbols:type_name -> api.SpinSymbol
	3,  // 6: api.SlotDesk.win_jp:type_name -> api.WinJackpot
	2,  // 7: api.SlotDesk.big_win:type_name -> api.BigWin
	12, // 8: api.SlotDesk.game_reward:type_name -> api.GameReward
	8,  // 9: api.SlotDesk.collection_symbols:type_name -> api.CollectSymbol
	14, // 10: api.SlotDesk.info_bet:type_name -> api.InfoBet
	1,  // 11: api.SlotDesk.sixiang_gems:type_name -> api.SiXiangGame
	0,  // 12: api.SlotDesk.letter_symbols:type_name -> api.SiXiangSymbol
	10, // 13: api.SlotDesk.win_jp_history:type_name -> api.JackpotHistory
	5,  // 14: api.SlotDesk.game_config:type_name -> api.GameConfig
	0,  // 15: api.SlotMatrix.lists:type_name -> api.SiXiangSymbol
	7,  // 16: api.SlotMatrix.spin_lists:type_name -> api.SpinSymbol
	0,  // 17: api.SpinSymbol.symbol:type_name -> api.SiXiangSymbol
	3,  // 18: api.SpinSymbol.win_jp:type_name -> api.WinJackpot
	0,  // 19: api.CollectSymbol.symbol:type_name -> api.SiXiangSymbol
	3,  // 20: api.JackpotReward.win_jackpot:type_name -> api.WinJackpot
	9,  // 21: api.JackpotHistory.minor:type_name -> api.JackpotReward
	9,  // 22: api.JackpotHistory.major:type_name -> api.JackpotReward
	9,  // 23: api.JackpotHistory.mega:type_name -> api.JackpotReward
	9,  // 24: api.JackpotHistory.grand:type_name -> api.JackpotReward
	9,  // 25: api.JackpotHistory.mini:type_name -> api.JackpotReward
	0,  // 26: api.Payline.symbol:type_name -> api.SiXiangSymbol
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_slots_game_proto_init() }
func file_slots_game_proto_init() {
	if File_slots_game_proto != nil {
		return
	}
	file_color_game_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_slots_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotDesk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotMatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_game_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpinSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_game_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_game_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JackpotReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_game_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JackpotHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_game_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_game_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_game_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_slots_game_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_slots_game_proto_goTypes,
		DependencyIndexes: file_slots_game_proto_depIdxs,
		EnumInfos:         file_slots_game_proto_enumTypes,
		MessageInfos:      file_slots_game_proto_msgTypes,
	}.Build()
	File_slots_game_proto = out.File
	file_slots_game_proto_rawDesc = nil
	file_slots_game_proto_goTypes = nil
	file_slots_game_proto_depIdxs = nil
}
