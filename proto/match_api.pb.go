// Copyright 2020 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: match_api.proto

// The realtime protocol for the template match engine.

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The complete set of rpc used for communication between clients and server.
type RPCCode int32

const (
	// No opcode specified. Unused.
	RPCCode_RPC_FIND_MATCH   RPCCode = 0
	RPCCode_RPC_CREATE_MATCH RPCCode = 1
)

// Enum value maps for RPCCode.
var (
	RPCCode_name = map[int32]string{
		0: "RPC_FIND_MATCH",
		1: "RPC_CREATE_MATCH",
	}
	RPCCode_value = map[string]int32{
		"RPC_FIND_MATCH":   0,
		"RPC_CREATE_MATCH": 1,
	}
)

func (x RPCCode) Enum() *RPCCode {
	p := new(RPCCode)
	*p = x
	return p
}

func (x RPCCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RPCCode) Descriptor() protoreflect.EnumDescriptor {
	return file_match_api_proto_enumTypes[0].Descriptor()
}

func (RPCCode) Type() protoreflect.EnumType {
	return &file_match_api_proto_enumTypes[0]
}

func (x RPCCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RPCCode.Descriptor instead.
func (RPCCode) EnumDescriptor() ([]byte, []int) {
	return file_match_api_proto_rawDescGZIP(), []int{0}
}

// Payload for an RPC request to find a match.
type RpcFindMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User can choose a fast or normal speed match.
	MarkUnit     int32  `protobuf:"varint,1,opt,name=mark_unit,json=markUnit,proto3" json:"mark_unit,omitempty"`
	GameCode     string `protobuf:"bytes,2,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	WithNonOpen  bool   `protobuf:"varint,3,opt,name=with_non_open,json=withNonOpen,proto3" json:"with_non_open,omitempty"`
	Create       bool   `protobuf:"varint,4,opt,name=create,proto3" json:"create,omitempty"`
	MockCodeCard int32  `protobuf:"varint,5,opt,name=mock_code_card,json=mockCodeCard,proto3" json:"mock_code_card,omitempty"`
	UserData     string `protobuf:"bytes,6,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	LastBet      int64  `protobuf:"varint,7,opt,name=last_bet,json=lastBet,proto3" json:"last_bet,omitempty"`
	Password     string `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`
	TableId      string `protobuf:"bytes,9,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
}

func (x *RpcFindMatchRequest) Reset() {
	*x = RpcFindMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcFindMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcFindMatchRequest) ProtoMessage() {}

func (x *RpcFindMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcFindMatchRequest.ProtoReflect.Descriptor instead.
func (*RpcFindMatchRequest) Descriptor() ([]byte, []int) {
	return file_match_api_proto_rawDescGZIP(), []int{0}
}

func (x *RpcFindMatchRequest) GetMarkUnit() int32 {
	if x != nil {
		return x.MarkUnit
	}
	return 0
}

func (x *RpcFindMatchRequest) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *RpcFindMatchRequest) GetWithNonOpen() bool {
	if x != nil {
		return x.WithNonOpen
	}
	return false
}

func (x *RpcFindMatchRequest) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *RpcFindMatchRequest) GetMockCodeCard() int32 {
	if x != nil {
		return x.MockCodeCard
	}
	return 0
}

func (x *RpcFindMatchRequest) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *RpcFindMatchRequest) GetLastBet() int64 {
	if x != nil {
		return x.LastBet
	}
	return 0
}

func (x *RpcFindMatchRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RpcFindMatchRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId      string           `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Size         int32            `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	MaxSize      int32            `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	Name         string           `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	MarkUnit     int32            `protobuf:"varint,5,opt,name=mark_unit,json=markUnit,proto3" json:"mark_unit,omitempty"`
	Open         bool             `protobuf:"varint,6,opt,name=open,proto3" json:"open,omitempty"`
	MockCodeCard int32            `protobuf:"varint,7,opt,name=mock_code_card,json=mockCodeCard,proto3" json:"mock_code_card,omitempty"`
	UserData     string           `protobuf:"bytes,8,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	LastBet      int64            `protobuf:"varint,9,opt,name=last_bet,json=lastBet,proto3" json:"last_bet,omitempty"`
	UserCreated  *Profile         `protobuf:"bytes,10,opt,name=user_created,json=userCreated,proto3" json:"user_created,omitempty"`
	TableId      string           `protobuf:"bytes,11,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	NumBot       int32            `protobuf:"varint,12,opt,name=num_bot,json=numBot,proto3" json:"num_bot,omitempty"`
	Password     string           `protobuf:"bytes,13,opt,name=password,proto3" json:"password,omitempty"`
	Players      []string         `protobuf:"bytes,14,rep,name=players,proto3" json:"players,omitempty"`
	Profiles     []*SimpleProfile `protobuf:"bytes,15,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_match_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_match_api_proto_rawDescGZIP(), []int{1}
}

func (x *Match) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *Match) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Match) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *Match) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Match) GetMarkUnit() int32 {
	if x != nil {
		return x.MarkUnit
	}
	return 0
}

func (x *Match) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *Match) GetMockCodeCard() int32 {
	if x != nil {
		return x.MockCodeCard
	}
	return 0
}

func (x *Match) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *Match) GetLastBet() int64 {
	if x != nil {
		return x.LastBet
	}
	return 0
}

func (x *Match) GetUserCreated() *Profile {
	if x != nil {
		return x.UserCreated
	}
	return nil
}

func (x *Match) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *Match) GetNumBot() int32 {
	if x != nil {
		return x.NumBot
	}
	return 0
}

func (x *Match) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Match) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Match) GetProfiles() []*SimpleProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type MatchInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId   string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	QueryUser bool   `protobuf:"varint,2,opt,name=query_user,json=queryUser,proto3" json:"query_user,omitempty"`
	NoCache   bool   `protobuf:"varint,3,opt,name=no_cache,json=noCache,proto3" json:"no_cache,omitempty"`
}

func (x *MatchInfoRequest) Reset() {
	*x = MatchInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfoRequest) ProtoMessage() {}

func (x *MatchInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfoRequest.ProtoReflect.Descriptor instead.
func (*MatchInfoRequest) Descriptor() ([]byte, []int) {
	return file_match_api_proto_rawDescGZIP(), []int{2}
}

func (x *MatchInfoRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchInfoRequest) GetQueryUser() bool {
	if x != nil {
		return x.QueryUser
	}
	return false
}

func (x *MatchInfoRequest) GetNoCache() bool {
	if x != nil {
		return x.NoCache
	}
	return false
}

// Payload for an RPC response containing match IDs the user can join.
type RpcFindMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more matches that fit the user's request.
	Matches []*Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *RpcFindMatchResponse) Reset() {
	*x = RpcFindMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcFindMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcFindMatchResponse) ProtoMessage() {}

func (x *RpcFindMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcFindMatchResponse.ProtoReflect.Descriptor instead.
func (*RpcFindMatchResponse) Descriptor() ([]byte, []int) {
	return file_match_api_proto_rawDescGZIP(), []int{3}
}

func (x *RpcFindMatchResponse) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

// Payload for an RPC request to find a match.
type RpcCreateMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkUnit   int32  `protobuf:"varint,1,opt,name=mark_unit,json=markUnit,proto3" json:"mark_unit,omitempty"`
	GameCode   string `protobuf:"bytes,2,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Password   string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	LastBet    int64  `protobuf:"varint,5,opt,name=last_bet,json=lastBet,proto3" json:"last_bet,omitempty"`
	MaxSize    int64  `protobuf:"varint,6,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	CustomData string `protobuf:"bytes,7,opt,name=custom_data,json=customData,proto3" json:"custom_data,omitempty"`
}

func (x *RpcCreateMatchRequest) Reset() {
	*x = RpcCreateMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcCreateMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcCreateMatchRequest) ProtoMessage() {}

func (x *RpcCreateMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcCreateMatchRequest.ProtoReflect.Descriptor instead.
func (*RpcCreateMatchRequest) Descriptor() ([]byte, []int) {
	return file_match_api_proto_rawDescGZIP(), []int{4}
}

func (x *RpcCreateMatchRequest) GetMarkUnit() int32 {
	if x != nil {
		return x.MarkUnit
	}
	return 0
}

func (x *RpcCreateMatchRequest) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *RpcCreateMatchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RpcCreateMatchRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RpcCreateMatchRequest) GetLastBet() int64 {
	if x != nil {
		return x.LastBet
	}
	return 0
}

func (x *RpcCreateMatchRequest) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *RpcCreateMatchRequest) GetCustomData() string {
	if x != nil {
		return x.CustomData
	}
	return ""
}

// Payload for an RPC response containing match IDs the user can join.
type RpcCreateMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more matches that fit the user's request.
	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *RpcCreateMatchResponse) Reset() {
	*x = RpcCreateMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcCreateMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcCreateMatchResponse) ProtoMessage() {}

func (x *RpcCreateMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcCreateMatchResponse.ProtoReflect.Descriptor instead.
func (*RpcCreateMatchResponse) Descriptor() ([]byte, []int) {
	return file_match_api_proto_rawDescGZIP(), []int{5}
}

func (x *RpcCreateMatchResponse) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Enable       bool    `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	MarkUnit     float32 `protobuf:"fixed32,3,opt,name=mark_unit,json=markUnit,proto3" json:"mark_unit,omitempty"` // mức cược (chip)
	GameId       int64   `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	XJoin        float32 `protobuf:"fixed32,5,opt,name=x_join,json=xJoin,proto3" json:"x_join,omitempty"`
	AgJoin       int64   `protobuf:"varint,6,opt,name=ag_join,json=agJoin,proto3" json:"ag_join,omitempty"`
	XPlayNow     float32 `protobuf:"fixed32,7,opt,name=x_play_now,json=xPlayNow,proto3" json:"x_play_now,omitempty"`
	AgPlayNow    int64   `protobuf:"varint,8,opt,name=ag_play_now,json=agPlayNow,proto3" json:"ag_play_now,omitempty"`
	XLeave       float32 `protobuf:"fixed32,9,opt,name=x_leave,json=xLeave,proto3" json:"x_leave,omitempty"`
	AgLeave      int64   `protobuf:"varint,10,opt,name=ag_leave,json=agLeave,proto3" json:"ag_leave,omitempty"`
	XFee         float32 `protobuf:"fixed32,11,opt,name=x_fee,json=xFee,proto3" json:"x_fee,omitempty"`
	AgFee        int64   `protobuf:"varint,12,opt,name=ag_fee,json=agFee,proto3" json:"ag_fee,omitempty"`
	NewFee       float32 `protobuf:"fixed32,13,opt,name=new_fee,json=newFee,proto3" json:"new_fee,omitempty"`
	CountPlaying int64   `protobuf:"varint,14,opt,name=count_playing,json=countPlaying,proto3" json:"count_playing,omitempty"`
}

func (x *Bet) Reset() {
	*x = Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bet) ProtoMessage() {}

func (x *Bet) ProtoReflect() protoreflect.Message {
	mi := &file_match_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bet.ProtoReflect.Descriptor instead.
func (*Bet) Descriptor() ([]byte, []int) {
	return file_match_api_proto_rawDescGZIP(), []int{6}
}

func (x *Bet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bet) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Bet) GetMarkUnit() float32 {
	if x != nil {
		return x.MarkUnit
	}
	return 0
}

func (x *Bet) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *Bet) GetXJoin() float32 {
	if x != nil {
		return x.XJoin
	}
	return 0
}

func (x *Bet) GetAgJoin() int64 {
	if x != nil {
		return x.AgJoin
	}
	return 0
}

func (x *Bet) GetXPlayNow() float32 {
	if x != nil {
		return x.XPlayNow
	}
	return 0
}

func (x *Bet) GetAgPlayNow() int64 {
	if x != nil {
		return x.AgPlayNow
	}
	return 0
}

func (x *Bet) GetXLeave() float32 {
	if x != nil {
		return x.XLeave
	}
	return 0
}

func (x *Bet) GetAgLeave() int64 {
	if x != nil {
		return x.AgLeave
	}
	return 0
}

func (x *Bet) GetXFee() float32 {
	if x != nil {
		return x.XFee
	}
	return 0
}

func (x *Bet) GetAgFee() int64 {
	if x != nil {
		return x.AgFee
	}
	return 0
}

func (x *Bet) GetNewFee() float32 {
	if x != nil {
		return x.NewFee
	}
	return 0
}

func (x *Bet) GetCountPlaying() int64 {
	if x != nil {
		return x.CountPlaying
	}
	return 0
}

type Bets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bets       []*Bet `protobuf:"bytes,1,rep,name=bets,proto3" json:"bets,omitempty"`
	Total      int64  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Offset     int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit      int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	BestChoice *Bet   `protobuf:"bytes,5,opt,name=best_choice,json=bestChoice,proto3" json:"best_choice,omitempty"`
}

func (x *Bets) Reset() {
	*x = Bets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bets) ProtoMessage() {}

func (x *Bets) ProtoReflect() protoreflect.Message {
	mi := &file_match_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bets.ProtoReflect.Descriptor instead.
func (*Bets) Descriptor() ([]byte, []int) {
	return file_match_api_proto_rawDescGZIP(), []int{7}
}

func (x *Bets) GetBets() []*Bet {
	if x != nil {
		return x.Bets
	}
	return nil
}

func (x *Bets) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Bets) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Bets) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Bets) GetBestChoice() *Bet {
	if x != nil {
		return x.BestChoice
	}
	return nil
}

type BetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId int64 `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *BetRequest) Reset() {
	*x = BetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetRequest) ProtoMessage() {}

func (x *BetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetRequest.ProtoReflect.Descriptor instead.
func (*BetRequest) Descriptor() ([]byte, []int) {
	return file_match_api_proto_rawDescGZIP(), []int{8}
}

func (x *BetRequest) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *BetRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *BetRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

var File_match_api_proto protoreflect.FileDescriptor

var file_match_api_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x02, 0x0a, 0x13, 0x52, 0x70, 0x63, 0x46, 0x69,
	0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x77, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x62, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xbf, 0x03, 0x0a, 0x05, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x65,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74,
	0x12, 0x2f, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x42, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x10, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x22, 0x3c, 0x0a, 0x14, 0x52, 0x70, 0x63, 0x46, 0x69, 0x6e, 0x64, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x15, 0x52, 0x70, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x65,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x33, 0x0a,
	0x16, 0x52, 0x70, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x22, 0xef, 0x02, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x78, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x78, 0x4a, 0x6f, 0x69, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x67, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x67, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x78, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x78, 0x50,
	0x6c, 0x61, 0x79, 0x4e, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x67, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x67, 0x50,
	0x6c, 0x61, 0x79, 0x4e, 0x6f, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x78, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x67, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x67, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x78, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x78, 0x46, 0x65, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x61, 0x67, 0x46, 0x65, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x46, 0x65, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x22, 0x93, 0x01, 0x0a, 0x04, 0x42, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x04, 0x62, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x29, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x0a,
	0x62, 0x65, 0x73, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x0a, 0x42, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2a,
	0x33, 0x0a, 0x07, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x50,
	0x43, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x01, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x69, 0x61, 0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x67, 0x61, 0x6d, 0x65,
	0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x67, 0x62, 0x2d, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_match_api_proto_rawDescOnce sync.Once
	file_match_api_proto_rawDescData = file_match_api_proto_rawDesc
)

func file_match_api_proto_rawDescGZIP() []byte {
	file_match_api_proto_rawDescOnce.Do(func() {
		file_match_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_match_api_proto_rawDescData)
	})
	return file_match_api_proto_rawDescData
}

var file_match_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_match_api_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_match_api_proto_goTypes = []interface{}{
	(RPCCode)(0),                   // 0: api.RPCCode
	(*RpcFindMatchRequest)(nil),    // 1: api.RpcFindMatchRequest
	(*Match)(nil),                  // 2: api.Match
	(*MatchInfoRequest)(nil),       // 3: api.MatchInfoRequest
	(*RpcFindMatchResponse)(nil),   // 4: api.RpcFindMatchResponse
	(*RpcCreateMatchRequest)(nil),  // 5: api.RpcCreateMatchRequest
	(*RpcCreateMatchResponse)(nil), // 6: api.RpcCreateMatchResponse
	(*Bet)(nil),                    // 7: api.Bet
	(*Bets)(nil),                   // 8: api.Bets
	(*BetRequest)(nil),             // 9: api.BetRequest
	(*Profile)(nil),                // 10: api.Profile
	(*SimpleProfile)(nil),          // 11: api.SimpleProfile
}
var file_match_api_proto_depIdxs = []int32{
	10, // 0: api.Match.user_created:type_name -> api.Profile
	11, // 1: api.Match.profiles:type_name -> api.SimpleProfile
	2,  // 2: api.RpcFindMatchResponse.matches:type_name -> api.Match
	7,  // 3: api.Bets.bets:type_name -> api.Bet
	7,  // 4: api.Bets.best_choice:type_name -> api.Bet
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_match_api_proto_init() }
func file_match_api_proto_init() {
	if File_match_api_proto != nil {
		return
	}
	file_auth_api_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_match_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcFindMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcFindMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcCreateMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcCreateMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_match_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_match_api_proto_goTypes,
		DependencyIndexes: file_match_api_proto_depIdxs,
		EnumInfos:         file_match_api_proto_enumTypes,
		MessageInfos:      file_match_api_proto_msgTypes,
	}.Build()
	File_match_api_proto = out.File
	file_match_api_proto_rawDesc = nil
	file_match_api_proto_goTypes = nil
	file_match_api_proto_depIdxs = nil
}
