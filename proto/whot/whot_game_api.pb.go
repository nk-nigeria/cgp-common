// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: whot_game_api.proto

package whot

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardSuit int32

const (
	CardSuit_SUIT_UNSPECIFIED CardSuit = 0
	CardSuit_SUIT_CIRCLE      CardSuit = 1
	CardSuit_SUIT_CROSS       CardSuit = 2
	CardSuit_SUIT_STAR        CardSuit = 3
	CardSuit_SUIT_SQUARE      CardSuit = 4
	CardSuit_SUIT_TRIANGLE    CardSuit = 5
)

// Enum value maps for CardSuit.
var (
	CardSuit_name = map[int32]string{
		0: "SUIT_UNSPECIFIED",
		1: "SUIT_CIRCLE",
		2: "SUIT_CROSS",
		3: "SUIT_STAR",
		4: "SUIT_SQUARE",
		5: "SUIT_TRIANGLE",
	}
	CardSuit_value = map[string]int32{
		"SUIT_UNSPECIFIED": 0,
		"SUIT_CIRCLE":      1,
		"SUIT_CROSS":       2,
		"SUIT_STAR":        3,
		"SUIT_SQUARE":      4,
		"SUIT_TRIANGLE":    5,
	}
)

func (x CardSuit) Enum() *CardSuit {
	p := new(CardSuit)
	*p = x
	return p
}

func (x CardSuit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardSuit) Descriptor() protoreflect.EnumDescriptor {
	return file_whot_game_api_proto_enumTypes[0].Descriptor()
}

func (CardSuit) Type() protoreflect.EnumType {
	return &file_whot_game_api_proto_enumTypes[0]
}

func (x CardSuit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardSuit.Descriptor instead.
func (CardSuit) EnumDescriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{0}
}

type CardRank int32

const (
	CardRank_RANK_UNSPECIFIED CardRank = 0
	CardRank_RANK_1           CardRank = 1
	CardRank_RANK_2           CardRank = 2
	CardRank_RANK_3           CardRank = 3
	CardRank_RANK_4           CardRank = 4
	CardRank_RANK_5           CardRank = 5
	CardRank_RANK_7           CardRank = 7
	CardRank_RANK_8           CardRank = 8
	CardRank_RANK_10          CardRank = 10
	CardRank_RANK_11          CardRank = 11
	CardRank_RANK_12          CardRank = 12
	CardRank_RANK_13          CardRank = 13
	CardRank_RANK_14          CardRank = 14
	CardRank_RANK_20          CardRank = 20
)

// Enum value maps for CardRank.
var (
	CardRank_name = map[int32]string{
		0:  "RANK_UNSPECIFIED",
		1:  "RANK_1",
		2:  "RANK_2",
		3:  "RANK_3",
		4:  "RANK_4",
		5:  "RANK_5",
		7:  "RANK_7",
		8:  "RANK_8",
		10: "RANK_10",
		11: "RANK_11",
		12: "RANK_12",
		13: "RANK_13",
		14: "RANK_14",
		20: "RANK_20",
	}
	CardRank_value = map[string]int32{
		"RANK_UNSPECIFIED": 0,
		"RANK_1":           1,
		"RANK_2":           2,
		"RANK_3":           3,
		"RANK_4":           4,
		"RANK_5":           5,
		"RANK_7":           7,
		"RANK_8":           8,
		"RANK_10":          10,
		"RANK_11":          11,
		"RANK_12":          12,
		"RANK_13":          13,
		"RANK_14":          14,
		"RANK_20":          20,
	}
)

func (x CardRank) Enum() *CardRank {
	p := new(CardRank)
	*p = x
	return p
}

func (x CardRank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardRank) Descriptor() protoreflect.EnumDescriptor {
	return file_whot_game_api_proto_enumTypes[1].Descriptor()
}

func (CardRank) Type() protoreflect.EnumType {
	return &file_whot_game_api_proto_enumTypes[1]
}

func (x CardRank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardRank.Descriptor instead.
func (CardRank) EnumDescriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{1}
}

type OpCodeRequest int32

const (
	OpCodeRequest_OPCODE_UNSPECIFIED OpCodeRequest = 0
	// New game round starting.
	OpCodeRequest_OPCODE_REQUEST_NEW_GAME    OpCodeRequest = 1
	OpCodeRequest_OPCODE_REQUEST_LEAVE_GAME  OpCodeRequest = 2
	OpCodeRequest_OPCODE_REQUEST_PLAY_CARD   OpCodeRequest = 3 // client chơi 1 lá
	OpCodeRequest_OPCODE_REQUEST_DRAW_CARD   OpCodeRequest = 4 // client yêu cầu rút bài
	OpCodeRequest_OPCODE_REQUEST_CALL_WHOT   OpCodeRequest = 5 // nếu client đánh WHOT, call lựa chọn suit
	OpCodeRequest_OPCODE_USER_INTERACT_CARDS OpCodeRequest = 6 // client tương tác với cards
)

// Enum value maps for OpCodeRequest.
var (
	OpCodeRequest_name = map[int32]string{
		0: "OPCODE_UNSPECIFIED",
		1: "OPCODE_REQUEST_NEW_GAME",
		2: "OPCODE_REQUEST_LEAVE_GAME",
		3: "OPCODE_REQUEST_PLAY_CARD",
		4: "OPCODE_REQUEST_DRAW_CARD",
		5: "OPCODE_REQUEST_CALL_WHOT",
		6: "OPCODE_USER_INTERACT_CARDS",
	}
	OpCodeRequest_value = map[string]int32{
		"OPCODE_UNSPECIFIED":         0,
		"OPCODE_REQUEST_NEW_GAME":    1,
		"OPCODE_REQUEST_LEAVE_GAME":  2,
		"OPCODE_REQUEST_PLAY_CARD":   3,
		"OPCODE_REQUEST_DRAW_CARD":   4,
		"OPCODE_REQUEST_CALL_WHOT":   5,
		"OPCODE_USER_INTERACT_CARDS": 6,
	}
)

func (x OpCodeRequest) Enum() *OpCodeRequest {
	p := new(OpCodeRequest)
	*p = x
	return p
}

func (x OpCodeRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpCodeRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_whot_game_api_proto_enumTypes[2].Descriptor()
}

func (OpCodeRequest) Type() protoreflect.EnumType {
	return &file_whot_game_api_proto_enumTypes[2]
}

func (x OpCodeRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpCodeRequest.Descriptor instead.
func (OpCodeRequest) EnumDescriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{2}
}

type OpCodeUpdate int32

const (
	OpCodeUpdate_OPCODE_UPDATE_UNSPECIFIED      OpCodeUpdate = 0
	OpCodeUpdate_OPCODE_UPDATE_TABLE            OpCodeUpdate = 1 // message UpdateTable
	OpCodeUpdate_OPCODE_UPDATE_DEAL             OpCodeUpdate = 2 // message UpdateDeal
	OpCodeUpdate_OPCODE_UPDATE_FINISH           OpCodeUpdate = 3 // message UpdateFinish
	OpCodeUpdate_OPCODE_UPDATE_REJECTED         OpCodeUpdate = 4
	OpCodeUpdate_OPCODE_UPDATE_GAME_STATE       OpCodeUpdate = 5
	OpCodeUpdate_OPCODE_UPDATE_CARD_PLAYED      OpCodeUpdate = 6 // ai đó đã đánh bài
	OpCodeUpdate_OPCODE_UPDATE_DRAW_RESULT      OpCodeUpdate = 7 // kết quả rút bài (ai đó rút)
	OpCodeUpdate_OPCODE_UPDATE_CALL_WHOT_RESULT OpCodeUpdate = 8 // kết quả chọn suit sau khi đánh WHOT
	OpCodeUpdate_OPCODE_UPDATE_TURN             OpCodeUpdate = 9 // thông báo tới lượt ai
	OpCodeUpdate_OPCODE_UPDATE_CARD_STATE       OpCodeUpdate = 10
	OpCodeUpdate_OPCODE_UPDATE_WALLET           OpCodeUpdate = 11
	OpCodeUpdate_OPCODE_KICK_OFF_THE_TABLE      OpCodeUpdate = 12
	OpCodeUpdate_OPCODE_UPDATE_USER_INFO        OpCodeUpdate = 13
)

// Enum value maps for OpCodeUpdate.
var (
	OpCodeUpdate_name = map[int32]string{
		0:  "OPCODE_UPDATE_UNSPECIFIED",
		1:  "OPCODE_UPDATE_TABLE",
		2:  "OPCODE_UPDATE_DEAL",
		3:  "OPCODE_UPDATE_FINISH",
		4:  "OPCODE_UPDATE_REJECTED",
		5:  "OPCODE_UPDATE_GAME_STATE",
		6:  "OPCODE_UPDATE_CARD_PLAYED",
		7:  "OPCODE_UPDATE_DRAW_RESULT",
		8:  "OPCODE_UPDATE_CALL_WHOT_RESULT",
		9:  "OPCODE_UPDATE_TURN",
		10: "OPCODE_UPDATE_CARD_STATE",
		11: "OPCODE_UPDATE_WALLET",
		12: "OPCODE_KICK_OFF_THE_TABLE",
		13: "OPCODE_UPDATE_USER_INFO",
	}
	OpCodeUpdate_value = map[string]int32{
		"OPCODE_UPDATE_UNSPECIFIED":      0,
		"OPCODE_UPDATE_TABLE":            1,
		"OPCODE_UPDATE_DEAL":             2,
		"OPCODE_UPDATE_FINISH":           3,
		"OPCODE_UPDATE_REJECTED":         4,
		"OPCODE_UPDATE_GAME_STATE":       5,
		"OPCODE_UPDATE_CARD_PLAYED":      6,
		"OPCODE_UPDATE_DRAW_RESULT":      7,
		"OPCODE_UPDATE_CALL_WHOT_RESULT": 8,
		"OPCODE_UPDATE_TURN":             9,
		"OPCODE_UPDATE_CARD_STATE":       10,
		"OPCODE_UPDATE_WALLET":           11,
		"OPCODE_KICK_OFF_THE_TABLE":      12,
		"OPCODE_UPDATE_USER_INFO":        13,
	}
)

func (x OpCodeUpdate) Enum() *OpCodeUpdate {
	p := new(OpCodeUpdate)
	*p = x
	return p
}

func (x OpCodeUpdate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpCodeUpdate) Descriptor() protoreflect.EnumDescriptor {
	return file_whot_game_api_proto_enumTypes[3].Descriptor()
}

func (OpCodeUpdate) Type() protoreflect.EnumType {
	return &file_whot_game_api_proto_enumTypes[3]
}

func (x OpCodeUpdate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpCodeUpdate.Descriptor instead.
func (OpCodeUpdate) EnumDescriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{3}
}

type GameState int32

const (
	GameState_GameStateUnknown   GameState = 0
	GameState_GameStateIdle      GameState = 1
	GameState_GameStateMatching  GameState = 2
	GameState_GameStatePreparing GameState = 3
	GameState_GameStatePlay      GameState = 4
	GameState_GameStateReward    GameState = 5
	GameState_GameStateFinish    GameState = 6
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0: "GameStateUnknown",
		1: "GameStateIdle",
		2: "GameStateMatching",
		3: "GameStatePreparing",
		4: "GameStatePlay",
		5: "GameStateReward",
		6: "GameStateFinish",
	}
	GameState_value = map[string]int32{
		"GameStateUnknown":   0,
		"GameStateIdle":      1,
		"GameStateMatching":  2,
		"GameStatePreparing": 3,
		"GameStatePlay":      4,
		"GameStateReward":    5,
		"GameStateFinish":    6,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_whot_game_api_proto_enumTypes[4].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_whot_game_api_proto_enumTypes[4]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{4}
}

type CardEvent int32

const (
	CardEvent_NONE      CardEvent = 0
	CardEvent_PLAY      CardEvent = 1
	CardEvent_DRAW      CardEvent = 2
	CardEvent_PASS      CardEvent = 3
	CardEvent_AUTO_PLAY CardEvent = 4
)

// Enum value maps for CardEvent.
var (
	CardEvent_name = map[int32]string{
		0: "NONE",
		1: "PLAY",
		2: "DRAW",
		3: "PASS",
		4: "AUTO_PLAY",
	}
	CardEvent_value = map[string]int32{
		"NONE":      0,
		"PLAY":      1,
		"DRAW":      2,
		"PASS":      3,
		"AUTO_PLAY": 4,
	}
)

func (x CardEvent) Enum() *CardEvent {
	p := new(CardEvent)
	*p = x
	return p
}

func (x CardEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_whot_game_api_proto_enumTypes[5].Descriptor()
}

func (CardEvent) Type() protoreflect.EnumType {
	return &file_whot_game_api_proto_enumTypes[5]
}

func (x CardEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardEvent.Descriptor instead.
func (CardEvent) EnumDescriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{5}
}

type CardEffect int32

const (
	CardEffect_EFFECT_NONE        CardEffect = 0
	CardEffect_HOLD_ON            CardEffect = 1
	CardEffect_PICK_TWO           CardEffect = 2
	CardEffect_PICK_THREE         CardEffect = 3
	CardEffect_SUSPENSION         CardEffect = 4
	CardEffect_GENERAL_MARKET     CardEffect = 5
	CardEffect_WHOT               CardEffect = 6
	CardEffect_CHOICE_SHAPE_GHOST CardEffect = 7
)

// Enum value maps for CardEffect.
var (
	CardEffect_name = map[int32]string{
		0: "EFFECT_NONE",
		1: "HOLD_ON",
		2: "PICK_TWO",
		3: "PICK_THREE",
		4: "SUSPENSION",
		5: "GENERAL_MARKET",
		6: "WHOT",
		7: "CHOICE_SHAPE_GHOST",
	}
	CardEffect_value = map[string]int32{
		"EFFECT_NONE":        0,
		"HOLD_ON":            1,
		"PICK_TWO":           2,
		"PICK_THREE":         3,
		"SUSPENSION":         4,
		"GENERAL_MARKET":     5,
		"WHOT":               6,
		"CHOICE_SHAPE_GHOST": 7,
	}
)

func (x CardEffect) Enum() *CardEffect {
	p := new(CardEffect)
	*p = x
	return p
}

func (x CardEffect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardEffect) Descriptor() protoreflect.EnumDescriptor {
	return file_whot_game_api_proto_enumTypes[6].Descriptor()
}

func (CardEffect) Type() protoreflect.EnumType {
	return &file_whot_game_api_proto_enumTypes[6]
}

func (x CardEffect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardEffect.Descriptor instead.
func (CardEffect) EnumDescriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{6}
}

type WhotEndGameReason int32

const (
	WhotEndGameReason_REASON_NORMAL_WIN WhotEndGameReason = 0
	WhotEndGameReason_REASON_DECK_EMPTY WhotEndGameReason = 1
)

// Enum value maps for WhotEndGameReason.
var (
	WhotEndGameReason_name = map[int32]string{
		0: "REASON_NORMAL_WIN",
		1: "REASON_DECK_EMPTY",
	}
	WhotEndGameReason_value = map[string]int32{
		"REASON_NORMAL_WIN": 0,
		"REASON_DECK_EMPTY": 1,
	}
)

func (x WhotEndGameReason) Enum() *WhotEndGameReason {
	p := new(WhotEndGameReason)
	*p = x
	return p
}

func (x WhotEndGameReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WhotEndGameReason) Descriptor() protoreflect.EnumDescriptor {
	return file_whot_game_api_proto_enumTypes[7].Descriptor()
}

func (WhotEndGameReason) Type() protoreflect.EnumType {
	return &file_whot_game_api_proto_enumTypes[7]
}

func (x WhotEndGameReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WhotEndGameReason.Descriptor instead.
func (WhotEndGameReason) EnumDescriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{7}
}

type Card struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rank          CardRank               `protobuf:"varint,1,opt,name=rank,proto3,enum=whot.CardRank" json:"rank,omitempty"`
	Suit          CardSuit               `protobuf:"varint,2,opt,name=suit,proto3,enum=whot.CardSuit" json:"suit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Card) Reset() {
	*x = Card{}
	mi := &file_whot_game_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetRank() CardRank {
	if x != nil {
		return x.Rank
	}
	return CardRank_RANK_UNSPECIFIED
}

func (x *Card) GetSuit() CardSuit {
	if x != nil {
		return x.Suit
	}
	return CardSuit_SUIT_UNSPECIFIED
}

type ListCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cards         []*Card                `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCard) Reset() {
	*x = ListCard{}
	mi := &file_whot_game_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCard) ProtoMessage() {}

func (x *ListCard) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCard.ProtoReflect.Descriptor instead.
func (*ListCard) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{1}
}

func (x *ListCard) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type UpdateTurn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Countdown     int64                  `protobuf:"varint,2,opt,name=countdown,proto3" json:"countdown,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTurn) Reset() {
	*x = UpdateTurn{}
	mi := &file_whot_game_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTurn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTurn) ProtoMessage() {}

func (x *UpdateTurn) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTurn.ProtoReflect.Descriptor instead.
func (*UpdateTurn) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateTurn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateTurn) GetCountdown() int64 {
	if x != nil {
		return x.Countdown
	}
	return 0
}

// Message data sent by client to server representing the cards was organize.
type NewGame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewGame) Reset() {
	*x = NewGame{}
	mi := &file_whot_game_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewGame) ProtoMessage() {}

func (x *NewGame) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewGame.ProtoReflect.Descriptor instead.
func (*NewGame) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{3}
}

type UpdateTable struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Players        []*Player              `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	PlayingPlayers []*Player              `protobuf:"bytes,2,rep,name=playing_players,json=playingPlayers,proto3" json:"playing_players,omitempty"`
	JoinPlayers    []*Player              `protobuf:"bytes,3,rep,name=join_players,json=joinPlayers,proto3" json:"join_players,omitempty"`
	LeavePlayers   []*Player              `protobuf:"bytes,4,rep,name=leave_players,json=leavePlayers,proto3" json:"leave_players,omitempty"`
	Bet            int64                  `protobuf:"varint,5,opt,name=bet,proto3" json:"bet,omitempty"`                                 // chip bet info
	Vip            int64                  `protobuf:"varint,6,opt,name=vip,proto3" json:"vip,omitempty"`                                 // min level vip require join room
	TimePlay       int64                  `protobuf:"varint,7,opt,name=time_play,json=timePlay,proto3" json:"time_play,omitempty"`       // timestamp play game
	RemainTime     int64                  `protobuf:"varint,8,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"` // remain time to end game
	GameState      GameState              `protobuf:"varint,9,opt,name=game_state,json=gameState,proto3,enum=whot.GameState" json:"game_state,omitempty"`
	JpTreasure     *Jackpot               `protobuf:"bytes,10,opt,name=jp_treasure,json=jpTreasure,proto3" json:"jp_treasure,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateTable) Reset() {
	*x = UpdateTable{}
	mi := &file_whot_game_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTable) ProtoMessage() {}

func (x *UpdateTable) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTable.ProtoReflect.Descriptor instead.
func (*UpdateTable) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateTable) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *UpdateTable) GetPlayingPlayers() []*Player {
	if x != nil {
		return x.PlayingPlayers
	}
	return nil
}

func (x *UpdateTable) GetJoinPlayers() []*Player {
	if x != nil {
		return x.JoinPlayers
	}
	return nil
}

func (x *UpdateTable) GetLeavePlayers() []*Player {
	if x != nil {
		return x.LeavePlayers
	}
	return nil
}

func (x *UpdateTable) GetBet() int64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *UpdateTable) GetVip() int64 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *UpdateTable) GetTimePlay() int64 {
	if x != nil {
		return x.TimePlay
	}
	return 0
}

func (x *UpdateTable) GetRemainTime() int64 {
	if x != nil {
		return x.RemainTime
	}
	return 0
}

func (x *UpdateTable) GetGameState() GameState {
	if x != nil {
		return x.GameState
	}
	return GameState_GameStateUnknown
}

func (x *UpdateTable) GetJpTreasure() *Jackpot {
	if x != nil {
		return x.JpTreasure
	}
	return nil
}

type PresenceCards struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Presence      string                 `protobuf:"bytes,1,opt,name=presence,proto3" json:"presence,omitempty"`
	Cards         []*Card                `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PresenceCards) Reset() {
	*x = PresenceCards{}
	mi := &file_whot_game_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PresenceCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceCards) ProtoMessage() {}

func (x *PresenceCards) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceCards.ProtoReflect.Descriptor instead.
func (*PresenceCards) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{5}
}

func (x *PresenceCards) GetPresence() string {
	if x != nil {
		return x.Presence
	}
	return ""
}

func (x *PresenceCards) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

// Complete game round with winner announcement.
type UpdateDeal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PresenceCard  *PresenceCards         `protobuf:"bytes,1,opt,name=presence_card,json=presenceCard,proto3" json:"presence_card,omitempty"`
	CardEvent     map[string]CardEvent   `protobuf:"bytes,2,rep,name=card_event,json=cardEvent,proto3" json:"card_event,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=whot.CardEvent"`
	TopCard       *Card                  `protobuf:"bytes,3,opt,name=top_card,json=topCard,proto3" json:"top_card,omitempty"` // card on top of deck
	IdDealer      string                 `protobuf:"bytes,4,opt,name=id_dealer,json=idDealer,proto3" json:"id_dealer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDeal) Reset() {
	*x = UpdateDeal{}
	mi := &file_whot_game_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeal) ProtoMessage() {}

func (x *UpdateDeal) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeal.ProtoReflect.Descriptor instead.
func (*UpdateDeal) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateDeal) GetPresenceCard() *PresenceCards {
	if x != nil {
		return x.PresenceCard
	}
	return nil
}

func (x *UpdateDeal) GetCardEvent() map[string]CardEvent {
	if x != nil {
		return x.CardEvent
	}
	return nil
}

func (x *UpdateDeal) GetTopCard() *Card {
	if x != nil {
		return x.TopCard
	}
	return nil
}

func (x *UpdateDeal) GetIdDealer() string {
	if x != nil {
		return x.IdDealer
	}
	return ""
}

type UpdateGameState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         GameState              `protobuf:"varint,1,opt,name=state,proto3,enum=whot.GameState" json:"state,omitempty"`
	CountDown     int64                  `protobuf:"varint,2,opt,name=count_down,json=countDown,proto3" json:"count_down,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateGameState) Reset() {
	*x = UpdateGameState{}
	mi := &file_whot_game_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameState) ProtoMessage() {}

func (x *UpdateGameState) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameState.ProtoReflect.Descriptor instead.
func (*UpdateGameState) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateGameState) GetState() GameState {
	if x != nil {
		return x.State
	}
	return GameState_GameStateUnknown
}

func (x *UpdateGameState) GetCountDown() int64 {
	if x != nil {
		return x.CountDown
	}
	return 0
}

type UpdateCardState struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UserId           string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Event            CardEvent              `protobuf:"varint,2,opt,name=event,proto3,enum=whot.CardEvent" json:"event,omitempty"`
	PlayedCard       *Card                  `protobuf:"bytes,3,opt,name=played_card,json=playedCard,proto3" json:"played_card,omitempty"`
	TopCard          *Card                  `protobuf:"bytes,4,opt,name=top_card,json=topCard,proto3" json:"top_card,omitempty"`
	CardsAfter       []*Card                `protobuf:"bytes,5,rep,name=cards_after,json=cardsAfter,proto3" json:"cards_after,omitempty"`
	Effect           CardEffect             `protobuf:"varint,6,opt,name=effect,proto3,enum=whot.CardEffect" json:"effect,omitempty"`
	PickPenalty      int32                  `protobuf:"varint,7,opt,name=pick_penalty,json=pickPenalty,proto3" json:"pick_penalty,omitempty"`
	TargetUserId     string                 `protobuf:"bytes,8,opt,name=target_user_id,json=targetUserId,proto3" json:"target_user_id,omitempty"`
	IsAutoPlay       bool                   `protobuf:"varint,9,opt,name=is_auto_play,json=isAutoPlay,proto3" json:"is_auto_play,omitempty"`
	DeckCount        int32                  `protobuf:"varint,10,opt,name=deck_count,json=deckCount,proto3" json:"deck_count,omitempty"`
	PlayerCardCounts map[string]int32       `protobuf:"bytes,11,rep,name=player_card_counts,json=playerCardCounts,proto3" json:"player_card_counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateCardState) Reset() {
	*x = UpdateCardState{}
	mi := &file_whot_game_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCardState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCardState) ProtoMessage() {}

func (x *UpdateCardState) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCardState.ProtoReflect.Descriptor instead.
func (*UpdateCardState) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCardState) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateCardState) GetEvent() CardEvent {
	if x != nil {
		return x.Event
	}
	return CardEvent_NONE
}

func (x *UpdateCardState) GetPlayedCard() *Card {
	if x != nil {
		return x.PlayedCard
	}
	return nil
}

func (x *UpdateCardState) GetTopCard() *Card {
	if x != nil {
		return x.TopCard
	}
	return nil
}

func (x *UpdateCardState) GetCardsAfter() []*Card {
	if x != nil {
		return x.CardsAfter
	}
	return nil
}

func (x *UpdateCardState) GetEffect() CardEffect {
	if x != nil {
		return x.Effect
	}
	return CardEffect_EFFECT_NONE
}

func (x *UpdateCardState) GetPickPenalty() int32 {
	if x != nil {
		return x.PickPenalty
	}
	return 0
}

func (x *UpdateCardState) GetTargetUserId() string {
	if x != nil {
		return x.TargetUserId
	}
	return ""
}

func (x *UpdateCardState) GetIsAutoPlay() bool {
	if x != nil {
		return x.IsAutoPlay
	}
	return false
}

func (x *UpdateCardState) GetDeckCount() int32 {
	if x != nil {
		return x.DeckCount
	}
	return 0
}

func (x *UpdateCardState) GetPlayerCardCounts() map[string]int32 {
	if x != nil {
		return x.PlayerCardCounts
	}
	return nil
}

type WhotPlayerResult struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserId         string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TotalPoints    int64                  `protobuf:"varint,2,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	WinFactor      float64                `protobuf:"fixed64,3,opt,name=win_factor,json=winFactor,proto3" json:"win_factor,omitempty"`
	IsWinner       bool                   `protobuf:"varint,4,opt,name=is_winner,json=isWinner,proto3" json:"is_winner,omitempty"`
	RemainingCards []*Card                `protobuf:"bytes,5,rep,name=remaining_cards,json=remainingCards,proto3" json:"remaining_cards,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WhotPlayerResult) Reset() {
	*x = WhotPlayerResult{}
	mi := &file_whot_game_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhotPlayerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhotPlayerResult) ProtoMessage() {}

func (x *WhotPlayerResult) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhotPlayerResult.ProtoReflect.Descriptor instead.
func (*WhotPlayerResult) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{9}
}

func (x *WhotPlayerResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WhotPlayerResult) GetTotalPoints() int64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *WhotPlayerResult) GetWinFactor() float64 {
	if x != nil {
		return x.WinFactor
	}
	return 0
}

func (x *WhotPlayerResult) GetIsWinner() bool {
	if x != nil {
		return x.IsWinner
	}
	return false
}

func (x *WhotPlayerResult) GetRemainingCards() []*Card {
	if x != nil {
		return x.RemainingCards
	}
	return nil
}

type UpdateFinish struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*WhotPlayerResult    `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	EndReason     WhotEndGameReason      `protobuf:"varint,2,opt,name=end_reason,json=endReason,proto3,enum=whot.WhotEndGameReason" json:"end_reason,omitempty"`
	Jackpot       *Jackpot               `protobuf:"bytes,4,opt,name=jackpot,proto3" json:"jackpot,omitempty"`
	JpTreasure    *Jackpot               `protobuf:"bytes,5,opt,name=jp_treasure,json=jpTreasure,proto3" json:"jp_treasure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFinish) Reset() {
	*x = UpdateFinish{}
	mi := &file_whot_game_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFinish) ProtoMessage() {}

func (x *UpdateFinish) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFinish.ProtoReflect.Descriptor instead.
func (*UpdateFinish) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateFinish) GetResults() []*WhotPlayerResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UpdateFinish) GetEndReason() WhotEndGameReason {
	if x != nil {
		return x.EndReason
	}
	return WhotEndGameReason_REASON_NORMAL_WIN
}

func (x *UpdateFinish) GetJackpot() *Jackpot {
	if x != nil {
		return x.Jackpot
	}
	return nil
}

func (x *UpdateFinish) GetJpTreasure() *Jackpot {
	if x != nil {
		return x.JpTreasure
	}
	return nil
}

type BalanceUpdate struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UserId             string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AmountChipBefore   int64                  `protobuf:"varint,2,opt,name=amount_chip_before,json=amountChipBefore,proto3" json:"amount_chip_before,omitempty"`
	AmountChipCurrent  int64                  `protobuf:"varint,3,opt,name=amount_chip_current,json=amountChipCurrent,proto3" json:"amount_chip_current,omitempty"`
	AmountChipAdd      int64                  `protobuf:"varint,4,opt,name=amount_chip_add,json=amountChipAdd,proto3" json:"amount_chip_add,omitempty"`
	AmoutChipBet       int64                  `protobuf:"varint,5,opt,name=amout_chip_bet,json=amoutChipBet,proto3" json:"amout_chip_bet,omitempty"`
	AmoutChipFee       int64                  `protobuf:"varint,6,opt,name=amout_chip_fee,json=amoutChipFee,proto3" json:"amout_chip_fee,omitempty"`
	AmoutChipAddPrefee int64                  `protobuf:"varint,7,opt,name=amout_chip_add_prefee,json=amoutChipAddPrefee,proto3" json:"amout_chip_add_prefee,omitempty"`
	TotalChipInMatch   int64                  `protobuf:"varint,8,opt,name=total_chip_in_match,json=totalChipInMatch,proto3" json:"total_chip_in_match,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BalanceUpdate) Reset() {
	*x = BalanceUpdate{}
	mi := &file_whot_game_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceUpdate) ProtoMessage() {}

func (x *BalanceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceUpdate.ProtoReflect.Descriptor instead.
func (*BalanceUpdate) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{11}
}

func (x *BalanceUpdate) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BalanceUpdate) GetAmountChipBefore() int64 {
	if x != nil {
		return x.AmountChipBefore
	}
	return 0
}

func (x *BalanceUpdate) GetAmountChipCurrent() int64 {
	if x != nil {
		return x.AmountChipCurrent
	}
	return 0
}

func (x *BalanceUpdate) GetAmountChipAdd() int64 {
	if x != nil {
		return x.AmountChipAdd
	}
	return 0
}

func (x *BalanceUpdate) GetAmoutChipBet() int64 {
	if x != nil {
		return x.AmoutChipBet
	}
	return 0
}

func (x *BalanceUpdate) GetAmoutChipFee() int64 {
	if x != nil {
		return x.AmoutChipFee
	}
	return 0
}

func (x *BalanceUpdate) GetAmoutChipAddPrefee() int64 {
	if x != nil {
		return x.AmoutChipAddPrefee
	}
	return 0
}

func (x *BalanceUpdate) GetTotalChipInMatch() int64 {
	if x != nil {
		return x.TotalChipInMatch
	}
	return 0
}

type BalanceResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Updates       []*BalanceUpdate       `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	Jackpot       *Jackpot               `protobuf:"bytes,2,opt,name=jackpot,proto3" json:"jackpot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BalanceResult) Reset() {
	*x = BalanceResult{}
	mi := &file_whot_game_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceResult) ProtoMessage() {}

func (x *BalanceResult) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceResult.ProtoReflect.Descriptor instead.
func (*BalanceResult) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{12}
}

func (x *BalanceResult) GetUpdates() []*BalanceUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *BalanceResult) GetJackpot() *Jackpot {
	if x != nil {
		return x.Jackpot
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserName      string                 `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Wallet        string                 `protobuf:"bytes,3,opt,name=wallet,proto3" json:"wallet,omitempty"`
	IsPlaying     bool                   `protobuf:"varint,4,opt,name=is_playing,json=isPlaying,proto3" json:"is_playing,omitempty"`
	Cards         *ListCard              `protobuf:"bytes,5,opt,name=cards,proto3" json:"cards,omitempty"`
	VipLevel      int64                  `protobuf:"varint,6,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
	AvatarId      string                 `protobuf:"bytes,7,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Sid           int64                  `protobuf:"varint,8,opt,name=sid,proto3" json:"sid,omitempty"`
	Order         int32                  `protobuf:"varint,9,opt,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Player) Reset() {
	*x = Player{}
	mi := &file_whot_game_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{13}
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Player) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *Player) GetIsPlaying() bool {
	if x != nil {
		return x.IsPlaying
	}
	return false
}

func (x *Player) GetCards() *ListCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Player) GetVipLevel() int64 {
	if x != nil {
		return x.VipLevel
	}
	return 0
}

func (x *Player) GetAvatarId() string {
	if x != nil {
		return x.AvatarId
	}
	return ""
}

func (x *Player) GetSid() int64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *Player) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type Jackpot struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GameCode       string                 `protobuf:"bytes,3,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	Chips          int64                  `protobuf:"varint,4,opt,name=chips,proto3" json:"chips,omitempty"`
	CreateTimeUnix int64                  `protobuf:"varint,5,opt,name=create_time_unix,json=createTimeUnix,proto3" json:"create_time_unix,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Jackpot) Reset() {
	*x = Jackpot{}
	mi := &file_whot_game_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Jackpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jackpot) ProtoMessage() {}

func (x *Jackpot) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jackpot.ProtoReflect.Descriptor instead.
func (*Jackpot) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{14}
}

func (x *Jackpot) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Jackpot) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Jackpot) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *Jackpot) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *Jackpot) GetCreateTimeUnix() int64 {
	if x != nil {
		return x.CreateTimeUnix
	}
	return 0
}

type HitJackpotHistory struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserName       string                 `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Chips          int64                  `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	CreateTimeUnix int64                  `protobuf:"varint,3,opt,name=create_time_unix,json=createTimeUnix,proto3" json:"create_time_unix,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HitJackpotHistory) Reset() {
	*x = HitJackpotHistory{}
	mi := &file_whot_game_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HitJackpotHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HitJackpotHistory) ProtoMessage() {}

func (x *HitJackpotHistory) ProtoReflect() protoreflect.Message {
	mi := &file_whot_game_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HitJackpotHistory.ProtoReflect.Descriptor instead.
func (*HitJackpotHistory) Descriptor() ([]byte, []int) {
	return file_whot_game_api_proto_rawDescGZIP(), []int{15}
}

func (x *HitJackpotHistory) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *HitJackpotHistory) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *HitJackpotHistory) GetCreateTimeUnix() int64 {
	if x != nil {
		return x.CreateTimeUnix
	}
	return 0
}

var File_whot_game_api_proto protoreflect.FileDescriptor

const file_whot_game_api_proto_rawDesc = "" +
	"\n" +
	"\x13whot_game_api.proto\x12\x04whot\"N\n" +
	"\x04Card\x12\"\n" +
	"\x04rank\x18\x01 \x01(\x0e2\x0e.whot.CardRankR\x04rank\x12\"\n" +
	"\x04suit\x18\x02 \x01(\x0e2\x0e.whot.CardSuitR\x04suit\",\n" +
	"\bListCard\x12 \n" +
	"\x05cards\x18\x01 \x03(\v2\n" +
	".whot.CardR\x05cards\"C\n" +
	"\n" +
	"UpdateTurn\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1c\n" +
	"\tcountdown\x18\x02 \x01(\x03R\tcountdown\"\t\n" +
	"\aNewGame\"\x92\x03\n" +
	"\vUpdateTable\x12&\n" +
	"\aplayers\x18\x01 \x03(\v2\f.whot.PlayerR\aplayers\x125\n" +
	"\x0fplaying_players\x18\x02 \x03(\v2\f.whot.PlayerR\x0eplayingPlayers\x12/\n" +
	"\fjoin_players\x18\x03 \x03(\v2\f.whot.PlayerR\vjoinPlayers\x121\n" +
	"\rleave_players\x18\x04 \x03(\v2\f.whot.PlayerR\fleavePlayers\x12\x10\n" +
	"\x03bet\x18\x05 \x01(\x03R\x03bet\x12\x10\n" +
	"\x03vip\x18\x06 \x01(\x03R\x03vip\x12\x1b\n" +
	"\ttime_play\x18\a \x01(\x03R\btimePlay\x12\x1f\n" +
	"\vremain_time\x18\b \x01(\x03R\n" +
	"remainTime\x12.\n" +
	"\n" +
	"game_state\x18\t \x01(\x0e2\x0f.whot.GameStateR\tgameState\x12.\n" +
	"\vjp_treasure\x18\n" +
	" \x01(\v2\r.whot.JackpotR\n" +
	"jpTreasure\"M\n" +
	"\rPresenceCards\x12\x1a\n" +
	"\bpresence\x18\x01 \x01(\tR\bpresence\x12 \n" +
	"\x05cards\x18\x02 \x03(\v2\n" +
	".whot.CardR\x05cards\"\x99\x02\n" +
	"\n" +
	"UpdateDeal\x128\n" +
	"\rpresence_card\x18\x01 \x01(\v2\x13.whot.PresenceCardsR\fpresenceCard\x12>\n" +
	"\n" +
	"card_event\x18\x02 \x03(\v2\x1f.whot.UpdateDeal.CardEventEntryR\tcardEvent\x12%\n" +
	"\btop_card\x18\x03 \x01(\v2\n" +
	".whot.CardR\atopCard\x12\x1b\n" +
	"\tid_dealer\x18\x04 \x01(\tR\bidDealer\x1aM\n" +
	"\x0eCardEventEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\x0e2\x0f.whot.CardEventR\x05value:\x028\x01\"W\n" +
	"\x0fUpdateGameState\x12%\n" +
	"\x05state\x18\x01 \x01(\x0e2\x0f.whot.GameStateR\x05state\x12\x1d\n" +
	"\n" +
	"count_down\x18\x02 \x01(\x03R\tcountDown\"\xa6\x04\n" +
	"\x0fUpdateCardState\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12%\n" +
	"\x05event\x18\x02 \x01(\x0e2\x0f.whot.CardEventR\x05event\x12+\n" +
	"\vplayed_card\x18\x03 \x01(\v2\n" +
	".whot.CardR\n" +
	"playedCard\x12%\n" +
	"\btop_card\x18\x04 \x01(\v2\n" +
	".whot.CardR\atopCard\x12+\n" +
	"\vcards_after\x18\x05 \x03(\v2\n" +
	".whot.CardR\n" +
	"cardsAfter\x12(\n" +
	"\x06effect\x18\x06 \x01(\x0e2\x10.whot.CardEffectR\x06effect\x12!\n" +
	"\fpick_penalty\x18\a \x01(\x05R\vpickPenalty\x12$\n" +
	"\x0etarget_user_id\x18\b \x01(\tR\ftargetUserId\x12 \n" +
	"\fis_auto_play\x18\t \x01(\bR\n" +
	"isAutoPlay\x12\x1d\n" +
	"\n" +
	"deck_count\x18\n" +
	" \x01(\x05R\tdeckCount\x12Y\n" +
	"\x12player_card_counts\x18\v \x03(\v2+.whot.UpdateCardState.PlayerCardCountsEntryR\x10playerCardCounts\x1aC\n" +
	"\x15PlayerCardCountsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xbf\x01\n" +
	"\x10WhotPlayerResult\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12!\n" +
	"\ftotal_points\x18\x02 \x01(\x03R\vtotalPoints\x12\x1d\n" +
	"\n" +
	"win_factor\x18\x03 \x01(\x01R\twinFactor\x12\x1b\n" +
	"\tis_winner\x18\x04 \x01(\bR\bisWinner\x123\n" +
	"\x0fremaining_cards\x18\x05 \x03(\v2\n" +
	".whot.CardR\x0eremainingCards\"\xd1\x01\n" +
	"\fUpdateFinish\x120\n" +
	"\aresults\x18\x01 \x03(\v2\x16.whot.WhotPlayerResultR\aresults\x126\n" +
	"\n" +
	"end_reason\x18\x02 \x01(\x0e2\x17.whot.WhotEndGameReasonR\tendReason\x12'\n" +
	"\ajackpot\x18\x04 \x01(\v2\r.whot.JackpotR\ajackpot\x12.\n" +
	"\vjp_treasure\x18\x05 \x01(\v2\r.whot.JackpotR\n" +
	"jpTreasure\"\xdc\x02\n" +
	"\rBalanceUpdate\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12,\n" +
	"\x12amount_chip_before\x18\x02 \x01(\x03R\x10amountChipBefore\x12.\n" +
	"\x13amount_chip_current\x18\x03 \x01(\x03R\x11amountChipCurrent\x12&\n" +
	"\x0famount_chip_add\x18\x04 \x01(\x03R\ramountChipAdd\x12$\n" +
	"\x0eamout_chip_bet\x18\x05 \x01(\x03R\famoutChipBet\x12$\n" +
	"\x0eamout_chip_fee\x18\x06 \x01(\x03R\famoutChipFee\x121\n" +
	"\x15amout_chip_add_prefee\x18\a \x01(\x03R\x12amoutChipAddPrefee\x12-\n" +
	"\x13total_chip_in_match\x18\b \x01(\x03R\x10totalChipInMatch\"g\n" +
	"\rBalanceResult\x12-\n" +
	"\aupdates\x18\x01 \x03(\v2\x13.whot.BalanceUpdateR\aupdates\x12'\n" +
	"\ajackpot\x18\x02 \x01(\v2\r.whot.JackpotR\ajackpot\"\xf4\x01\n" +
	"\x06Player\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tuser_name\x18\x02 \x01(\tR\buserName\x12\x16\n" +
	"\x06wallet\x18\x03 \x01(\tR\x06wallet\x12\x1d\n" +
	"\n" +
	"is_playing\x18\x04 \x01(\bR\tisPlaying\x12$\n" +
	"\x05cards\x18\x05 \x01(\v2\x0e.whot.ListCardR\x05cards\x12\x1b\n" +
	"\tvip_level\x18\x06 \x01(\x03R\bvipLevel\x12\x1b\n" +
	"\tavatar_id\x18\a \x01(\tR\bavatarId\x12\x10\n" +
	"\x03sid\x18\b \x01(\x03R\x03sid\x12\x14\n" +
	"\x05order\x18\t \x01(\x05R\x05order\"\x8f\x01\n" +
	"\aJackpot\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x1b\n" +
	"\tgame_code\x18\x03 \x01(\tR\bgameCode\x12\x14\n" +
	"\x05chips\x18\x04 \x01(\x03R\x05chips\x12(\n" +
	"\x10create_time_unix\x18\x05 \x01(\x03R\x0ecreateTimeUnix\"p\n" +
	"\x11HitJackpotHistory\x12\x1b\n" +
	"\tuser_name\x18\x01 \x01(\tR\buserName\x12\x14\n" +
	"\x05chips\x18\x02 \x01(\x03R\x05chips\x12(\n" +
	"\x10create_time_unix\x18\x03 \x01(\x03R\x0ecreateTimeUnix*t\n" +
	"\bCardSuit\x12\x14\n" +
	"\x10SUIT_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vSUIT_CIRCLE\x10\x01\x12\x0e\n" +
	"\n" +
	"SUIT_CROSS\x10\x02\x12\r\n" +
	"\tSUIT_STAR\x10\x03\x12\x0f\n" +
	"\vSUIT_SQUARE\x10\x04\x12\x11\n" +
	"\rSUIT_TRIANGLE\x10\x05*\xc2\x01\n" +
	"\bCardRank\x12\x14\n" +
	"\x10RANK_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06RANK_1\x10\x01\x12\n" +
	"\n" +
	"\x06RANK_2\x10\x02\x12\n" +
	"\n" +
	"\x06RANK_3\x10\x03\x12\n" +
	"\n" +
	"\x06RANK_4\x10\x04\x12\n" +
	"\n" +
	"\x06RANK_5\x10\x05\x12\n" +
	"\n" +
	"\x06RANK_7\x10\a\x12\n" +
	"\n" +
	"\x06RANK_8\x10\b\x12\v\n" +
	"\aRANK_10\x10\n" +
	"\x12\v\n" +
	"\aRANK_11\x10\v\x12\v\n" +
	"\aRANK_12\x10\f\x12\v\n" +
	"\aRANK_13\x10\r\x12\v\n" +
	"\aRANK_14\x10\x0e\x12\v\n" +
	"\aRANK_20\x10\x14*\xdd\x01\n" +
	"\rOpCodeRequest\x12\x16\n" +
	"\x12OPCODE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17OPCODE_REQUEST_NEW_GAME\x10\x01\x12\x1d\n" +
	"\x19OPCODE_REQUEST_LEAVE_GAME\x10\x02\x12\x1c\n" +
	"\x18OPCODE_REQUEST_PLAY_CARD\x10\x03\x12\x1c\n" +
	"\x18OPCODE_REQUEST_DRAW_CARD\x10\x04\x12\x1c\n" +
	"\x18OPCODE_REQUEST_CALL_WHOT\x10\x05\x12\x1e\n" +
	"\x1aOPCODE_USER_INTERACT_CARDS\x10\x06*\xa0\x03\n" +
	"\fOpCodeUpdate\x12\x1d\n" +
	"\x19OPCODE_UPDATE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13OPCODE_UPDATE_TABLE\x10\x01\x12\x16\n" +
	"\x12OPCODE_UPDATE_DEAL\x10\x02\x12\x18\n" +
	"\x14OPCODE_UPDATE_FINISH\x10\x03\x12\x1a\n" +
	"\x16OPCODE_UPDATE_REJECTED\x10\x04\x12\x1c\n" +
	"\x18OPCODE_UPDATE_GAME_STATE\x10\x05\x12\x1d\n" +
	"\x19OPCODE_UPDATE_CARD_PLAYED\x10\x06\x12\x1d\n" +
	"\x19OPCODE_UPDATE_DRAW_RESULT\x10\a\x12\"\n" +
	"\x1eOPCODE_UPDATE_CALL_WHOT_RESULT\x10\b\x12\x16\n" +
	"\x12OPCODE_UPDATE_TURN\x10\t\x12\x1c\n" +
	"\x18OPCODE_UPDATE_CARD_STATE\x10\n" +
	"\x12\x18\n" +
	"\x14OPCODE_UPDATE_WALLET\x10\v\x12\x1d\n" +
	"\x19OPCODE_KICK_OFF_THE_TABLE\x10\f\x12\x1b\n" +
	"\x17OPCODE_UPDATE_USER_INFO\x10\r*\xa0\x01\n" +
	"\tGameState\x12\x14\n" +
	"\x10GameStateUnknown\x10\x00\x12\x11\n" +
	"\rGameStateIdle\x10\x01\x12\x15\n" +
	"\x11GameStateMatching\x10\x02\x12\x16\n" +
	"\x12GameStatePreparing\x10\x03\x12\x11\n" +
	"\rGameStatePlay\x10\x04\x12\x13\n" +
	"\x0fGameStateReward\x10\x05\x12\x13\n" +
	"\x0fGameStateFinish\x10\x06*B\n" +
	"\tCardEvent\x12\b\n" +
	"\x04NONE\x10\x00\x12\b\n" +
	"\x04PLAY\x10\x01\x12\b\n" +
	"\x04DRAW\x10\x02\x12\b\n" +
	"\x04PASS\x10\x03\x12\r\n" +
	"\tAUTO_PLAY\x10\x04*\x8e\x01\n" +
	"\n" +
	"CardEffect\x12\x0f\n" +
	"\vEFFECT_NONE\x10\x00\x12\v\n" +
	"\aHOLD_ON\x10\x01\x12\f\n" +
	"\bPICK_TWO\x10\x02\x12\x0e\n" +
	"\n" +
	"PICK_THREE\x10\x03\x12\x0e\n" +
	"\n" +
	"SUSPENSION\x10\x04\x12\x12\n" +
	"\x0eGENERAL_MARKET\x10\x05\x12\b\n" +
	"\x04WHOT\x10\x06\x12\x16\n" +
	"\x12CHOICE_SHAPE_GHOST\x10\a*A\n" +
	"\x11WhotEndGameReason\x12\x15\n" +
	"\x11REASON_NORMAL_WIN\x10\x00\x12\x15\n" +
	"\x11REASON_DECK_EMPTY\x10\x01B>Z<github.com/nakamaFramework/whot-module/cgp-common/proto/whotb\x06proto3"

var (
	file_whot_game_api_proto_rawDescOnce sync.Once
	file_whot_game_api_proto_rawDescData []byte
)

func file_whot_game_api_proto_rawDescGZIP() []byte {
	file_whot_game_api_proto_rawDescOnce.Do(func() {
		file_whot_game_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_whot_game_api_proto_rawDesc), len(file_whot_game_api_proto_rawDesc)))
	})
	return file_whot_game_api_proto_rawDescData
}

var file_whot_game_api_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_whot_game_api_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_whot_game_api_proto_goTypes = []any{
	(CardSuit)(0),             // 0: whot.CardSuit
	(CardRank)(0),             // 1: whot.CardRank
	(OpCodeRequest)(0),        // 2: whot.OpCodeRequest
	(OpCodeUpdate)(0),         // 3: whot.OpCodeUpdate
	(GameState)(0),            // 4: whot.GameState
	(CardEvent)(0),            // 5: whot.CardEvent
	(CardEffect)(0),           // 6: whot.CardEffect
	(WhotEndGameReason)(0),    // 7: whot.WhotEndGameReason
	(*Card)(nil),              // 8: whot.Card
	(*ListCard)(nil),          // 9: whot.ListCard
	(*UpdateTurn)(nil),        // 10: whot.UpdateTurn
	(*NewGame)(nil),           // 11: whot.NewGame
	(*UpdateTable)(nil),       // 12: whot.UpdateTable
	(*PresenceCards)(nil),     // 13: whot.PresenceCards
	(*UpdateDeal)(nil),        // 14: whot.UpdateDeal
	(*UpdateGameState)(nil),   // 15: whot.UpdateGameState
	(*UpdateCardState)(nil),   // 16: whot.UpdateCardState
	(*WhotPlayerResult)(nil),  // 17: whot.WhotPlayerResult
	(*UpdateFinish)(nil),      // 18: whot.UpdateFinish
	(*BalanceUpdate)(nil),     // 19: whot.BalanceUpdate
	(*BalanceResult)(nil),     // 20: whot.BalanceResult
	(*Player)(nil),            // 21: whot.Player
	(*Jackpot)(nil),           // 22: whot.Jackpot
	(*HitJackpotHistory)(nil), // 23: whot.HitJackpotHistory
	nil,                       // 24: whot.UpdateDeal.CardEventEntry
	nil,                       // 25: whot.UpdateCardState.PlayerCardCountsEntry
}
var file_whot_game_api_proto_depIdxs = []int32{
	1,  // 0: whot.Card.rank:type_name -> whot.CardRank
	0,  // 1: whot.Card.suit:type_name -> whot.CardSuit
	8,  // 2: whot.ListCard.cards:type_name -> whot.Card
	21, // 3: whot.UpdateTable.players:type_name -> whot.Player
	21, // 4: whot.UpdateTable.playing_players:type_name -> whot.Player
	21, // 5: whot.UpdateTable.join_players:type_name -> whot.Player
	21, // 6: whot.UpdateTable.leave_players:type_name -> whot.Player
	4,  // 7: whot.UpdateTable.game_state:type_name -> whot.GameState
	22, // 8: whot.UpdateTable.jp_treasure:type_name -> whot.Jackpot
	8,  // 9: whot.PresenceCards.cards:type_name -> whot.Card
	13, // 10: whot.UpdateDeal.presence_card:type_name -> whot.PresenceCards
	24, // 11: whot.UpdateDeal.card_event:type_name -> whot.UpdateDeal.CardEventEntry
	8,  // 12: whot.UpdateDeal.top_card:type_name -> whot.Card
	4,  // 13: whot.UpdateGameState.state:type_name -> whot.GameState
	5,  // 14: whot.UpdateCardState.event:type_name -> whot.CardEvent
	8,  // 15: whot.UpdateCardState.played_card:type_name -> whot.Card
	8,  // 16: whot.UpdateCardState.top_card:type_name -> whot.Card
	8,  // 17: whot.UpdateCardState.cards_after:type_name -> whot.Card
	6,  // 18: whot.UpdateCardState.effect:type_name -> whot.CardEffect
	25, // 19: whot.UpdateCardState.player_card_counts:type_name -> whot.UpdateCardState.PlayerCardCountsEntry
	8,  // 20: whot.WhotPlayerResult.remaining_cards:type_name -> whot.Card
	17, // 21: whot.UpdateFinish.results:type_name -> whot.WhotPlayerResult
	7,  // 22: whot.UpdateFinish.end_reason:type_name -> whot.WhotEndGameReason
	22, // 23: whot.UpdateFinish.jackpot:type_name -> whot.Jackpot
	22, // 24: whot.UpdateFinish.jp_treasure:type_name -> whot.Jackpot
	19, // 25: whot.BalanceResult.updates:type_name -> whot.BalanceUpdate
	22, // 26: whot.BalanceResult.jackpot:type_name -> whot.Jackpot
	9,  // 27: whot.Player.cards:type_name -> whot.ListCard
	5,  // 28: whot.UpdateDeal.CardEventEntry.value:type_name -> whot.CardEvent
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_whot_game_api_proto_init() }
func file_whot_game_api_proto_init() {
	if File_whot_game_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_whot_game_api_proto_rawDesc), len(file_whot_game_api_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_whot_game_api_proto_goTypes,
		DependencyIndexes: file_whot_game_api_proto_depIdxs,
		EnumInfos:         file_whot_game_api_proto_enumTypes,
		MessageInfos:      file_whot_game_api_proto_msgTypes,
	}.Build()
	File_whot_game_api_proto = out.File
	file_whot_game_api_proto_goTypes = nil
	file_whot_game_api_proto_depIdxs = nil
}
