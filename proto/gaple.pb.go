// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: gaple.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GapleDominoChainPosition int32

const (
	GapleDominoChainPosition_GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_UNSPECIFIED GapleDominoChainPosition = 0
	GapleDominoChainPosition_GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_HEAD        GapleDominoChainPosition = 1
	GapleDominoChainPosition_GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_TAIL        GapleDominoChainPosition = 2
	GapleDominoChainPosition_GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_BOTH        GapleDominoChainPosition = 3 // server->client indicate possible action
)

// Enum value maps for GapleDominoChainPosition.
var (
	GapleDominoChainPosition_name = map[int32]string{
		0: "GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_UNSPECIFIED",
		1: "GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_HEAD",
		2: "GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_TAIL",
		3: "GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_BOTH",
	}
	GapleDominoChainPosition_value = map[string]int32{
		"GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_UNSPECIFIED": 0,
		"GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_HEAD":        1,
		"GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_TAIL":        2,
		"GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_BOTH":        3,
	}
)

func (x GapleDominoChainPosition) Enum() *GapleDominoChainPosition {
	p := new(GapleDominoChainPosition)
	*p = x
	return p
}

func (x GapleDominoChainPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GapleDominoChainPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_gaple_proto_enumTypes[0].Descriptor()
}

func (GapleDominoChainPosition) Type() protoreflect.EnumType {
	return &file_gaple_proto_enumTypes[0]
}

func (x GapleDominoChainPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GapleDominoChainPosition.Descriptor instead.
func (GapleDominoChainPosition) EnumDescriptor() ([]byte, []int) {
	return file_gaple_proto_rawDescGZIP(), []int{0}
}

type GapleDominoFinishGameType int32

const (
	GapleDominoFinishGameType_GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_UNSPECIFIED GapleDominoFinishGameType = 0
	GapleDominoFinishGameType_GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_SINGLE      GapleDominoFinishGameType = 1
	GapleDominoFinishGameType_GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_DOUBLE      GapleDominoFinishGameType = 2
	GapleDominoFinishGameType_GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_TRIPLE      GapleDominoFinishGameType = 3
	GapleDominoFinishGameType_GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_QUARTET     GapleDominoFinishGameType = 4
	GapleDominoFinishGameType_GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_QUINTET     GapleDominoFinishGameType = 5
)

// Enum value maps for GapleDominoFinishGameType.
var (
	GapleDominoFinishGameType_name = map[int32]string{
		0: "GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_UNSPECIFIED",
		1: "GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_SINGLE",
		2: "GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_DOUBLE",
		3: "GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_TRIPLE",
		4: "GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_QUARTET",
		5: "GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_QUINTET",
	}
	GapleDominoFinishGameType_value = map[string]int32{
		"GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_UNSPECIFIED": 0,
		"GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_SINGLE":      1,
		"GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_DOUBLE":      2,
		"GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_TRIPLE":      3,
		"GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_QUARTET":     4,
		"GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_QUINTET":     5,
	}
)

func (x GapleDominoFinishGameType) Enum() *GapleDominoFinishGameType {
	p := new(GapleDominoFinishGameType)
	*p = x
	return p
}

func (x GapleDominoFinishGameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GapleDominoFinishGameType) Descriptor() protoreflect.EnumDescriptor {
	return file_gaple_proto_enumTypes[1].Descriptor()
}

func (GapleDominoFinishGameType) Type() protoreflect.EnumType {
	return &file_gaple_proto_enumTypes[1]
}

func (x GapleDominoFinishGameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GapleDominoFinishGameType.Descriptor instead.
func (GapleDominoFinishGameType) EnumDescriptor() ([]byte, []int) {
	return file_gaple_proto_rawDescGZIP(), []int{1}
}

type GapleDominoAction struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	UserId        string                   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Domino        *Domino                  `protobuf:"bytes,2,opt,name=domino,proto3" json:"domino,omitempty"`
	Position      GapleDominoChainPosition `protobuf:"varint,3,opt,name=position,proto3,enum=proto.GapleDominoChainPosition" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GapleDominoAction) Reset() {
	*x = GapleDominoAction{}
	mi := &file_gaple_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GapleDominoAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GapleDominoAction) ProtoMessage() {}

func (x *GapleDominoAction) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GapleDominoAction.ProtoReflect.Descriptor instead.
func (*GapleDominoAction) Descriptor() ([]byte, []int) {
	return file_gaple_proto_rawDescGZIP(), []int{0}
}

func (x *GapleDominoAction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GapleDominoAction) GetDomino() *Domino {
	if x != nil {
		return x.Domino
	}
	return nil
}

func (x *GapleDominoAction) GetPosition() GapleDominoChainPosition {
	if x != nil {
		return x.Position
	}
	return GapleDominoChainPosition_GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_UNSPECIFIED
}

type GapleDominoPenalty struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	GainPlayer                string                 `protobuf:"bytes,1,opt,name=gain_player,json=gainPlayer,proto3" json:"gain_player,omitempty"`
	LostPlayer                string                 `protobuf:"bytes,2,opt,name=lost_player,json=lostPlayer,proto3" json:"lost_player,omitempty"`
	Chips                     int32                  `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`
	LostPlayerNotHaveFacelets []int32                `protobuf:"varint,4,rep,packed,name=lost_player_not_have_facelets,json=lostPlayerNotHaveFacelets,proto3" json:"lost_player_not_have_facelets,omitempty"`
	GainPlayerWallet          *BalanceUpdate         `protobuf:"bytes,5,opt,name=gain_player_wallet,json=gainPlayerWallet,proto3" json:"gain_player_wallet,omitempty"`
	LostPlayerWallet          *BalanceUpdate         `protobuf:"bytes,6,opt,name=lost_player_wallet,json=lostPlayerWallet,proto3" json:"lost_player_wallet,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GapleDominoPenalty) Reset() {
	*x = GapleDominoPenalty{}
	mi := &file_gaple_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GapleDominoPenalty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GapleDominoPenalty) ProtoMessage() {}

func (x *GapleDominoPenalty) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GapleDominoPenalty.ProtoReflect.Descriptor instead.
func (*GapleDominoPenalty) Descriptor() ([]byte, []int) {
	return file_gaple_proto_rawDescGZIP(), []int{1}
}

func (x *GapleDominoPenalty) GetGainPlayer() string {
	if x != nil {
		return x.GainPlayer
	}
	return ""
}

func (x *GapleDominoPenalty) GetLostPlayer() string {
	if x != nil {
		return x.LostPlayer
	}
	return ""
}

func (x *GapleDominoPenalty) GetChips() int32 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *GapleDominoPenalty) GetLostPlayerNotHaveFacelets() []int32 {
	if x != nil {
		return x.LostPlayerNotHaveFacelets
	}
	return nil
}

func (x *GapleDominoPenalty) GetGainPlayerWallet() *BalanceUpdate {
	if x != nil {
		return x.GainPlayerWallet
	}
	return nil
}

func (x *GapleDominoPenalty) GetLostPlayerWallet() *BalanceUpdate {
	if x != nil {
		return x.LostPlayerWallet
	}
	return nil
}

type GapleDominoChainNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domino        *Domino                `protobuf:"bytes,1,opt,name=domino,proto3" json:"domino,omitempty"`
	TurnNumber    int32                  `protobuf:"varint,2,opt,name=turn_number,json=turnNumber,proto3" json:"turn_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GapleDominoChainNode) Reset() {
	*x = GapleDominoChainNode{}
	mi := &file_gaple_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GapleDominoChainNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GapleDominoChainNode) ProtoMessage() {}

func (x *GapleDominoChainNode) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GapleDominoChainNode.ProtoReflect.Descriptor instead.
func (*GapleDominoChainNode) Descriptor() ([]byte, []int) {
	return file_gaple_proto_rawDescGZIP(), []int{2}
}

func (x *GapleDominoChainNode) GetDomino() *Domino {
	if x != nil {
		return x.Domino
	}
	return nil
}

func (x *GapleDominoChainNode) GetTurnNumber() int32 {
	if x != nil {
		return x.TurnNumber
	}
	return 0
}

// note: when user that was disconnected reenter the table and that game not yet
// ended server will:
//  - send the hand cards to client
//  - send update desk that CONTAINS CHAIN BUT NOT HAVE ACTION like normal would
//  do
type GapleDominoUpdateDesk struct {
	state                   protoimpl.MessageState  `protogen:"open.v1"`
	NPlayers                int32                   `protobuf:"varint,1,opt,name=n_players,json=nPlayers,proto3" json:"n_players,omitempty"`
	IsNewTurn               bool                    `protobuf:"varint,2,opt,name=is_new_turn,json=isNewTurn,proto3" json:"is_new_turn,omitempty"`
	IsUpdateChain           bool                    `protobuf:"varint,3,opt,name=is_update_chain,json=isUpdateChain,proto3" json:"is_update_chain,omitempty"`
	IsAppendDominoToChain   bool                    `protobuf:"varint,4,opt,name=is_append_domino_to_chain,json=isAppendDominoToChain,proto3" json:"is_append_domino_to_chain,omitempty"`
	IsPenaltyOccur          bool                    `protobuf:"varint,5,opt,name=is_penalty_occur,json=isPenaltyOccur,proto3" json:"is_penalty_occur,omitempty"`
	IsUpdateLegalActions    bool                    `protobuf:"varint,6,opt,name=is_update_legal_actions,json=isUpdateLegalActions,proto3" json:"is_update_legal_actions,omitempty"`
	IsUpdateNumRemainedCard bool                    `protobuf:"varint,7,opt,name=is_update_num_remained_card,json=isUpdateNumRemainedCard,proto3" json:"is_update_num_remained_card,omitempty"`
	Chain                   []*GapleDominoChainNode `protobuf:"bytes,8,rep,name=chain,proto3" json:"chain,omitempty"`   // update entire chain on tables
	Action                  *GapleDominoAction      `protobuf:"bytes,9,opt,name=action,proto3" json:"action,omitempty"` //  last piece of domino, adding it to the table
	//  chain in correspond chain's end
	LegalActions          []*GapleDominoAction              `protobuf:"bytes,10,rep,name=legal_actions,json=legalActions,proto3" json:"legal_actions,omitempty"` // for displaying playable cards
	Penalty               *GapleDominoPenalty               `protobuf:"bytes,11,opt,name=penalty,proto3" json:"penalty,omitempty"`
	Remaineds             []*GapleDominoPresenceNumRemained `protobuf:"bytes,12,rep,name=remaineds,proto3" json:"remaineds,omitempty"`
	InTurn                string                            `protobuf:"bytes,13,opt,name=in_turn,json=inTurn,proto3" json:"in_turn,omitempty"`                                                        // uid of player in current turn
	RemainedFaceletsCount []int32                           `protobuf:"varint,14,rep,packed,name=remained_facelets_count,json=remainedFaceletsCount,proto3" json:"remained_facelets_count,omitempty"` // count facelets remained on all players hand
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GapleDominoUpdateDesk) Reset() {
	*x = GapleDominoUpdateDesk{}
	mi := &file_gaple_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GapleDominoUpdateDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GapleDominoUpdateDesk) ProtoMessage() {}

func (x *GapleDominoUpdateDesk) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GapleDominoUpdateDesk.ProtoReflect.Descriptor instead.
func (*GapleDominoUpdateDesk) Descriptor() ([]byte, []int) {
	return file_gaple_proto_rawDescGZIP(), []int{3}
}

func (x *GapleDominoUpdateDesk) GetNPlayers() int32 {
	if x != nil {
		return x.NPlayers
	}
	return 0
}

func (x *GapleDominoUpdateDesk) GetIsNewTurn() bool {
	if x != nil {
		return x.IsNewTurn
	}
	return false
}

func (x *GapleDominoUpdateDesk) GetIsUpdateChain() bool {
	if x != nil {
		return x.IsUpdateChain
	}
	return false
}

func (x *GapleDominoUpdateDesk) GetIsAppendDominoToChain() bool {
	if x != nil {
		return x.IsAppendDominoToChain
	}
	return false
}

func (x *GapleDominoUpdateDesk) GetIsPenaltyOccur() bool {
	if x != nil {
		return x.IsPenaltyOccur
	}
	return false
}

func (x *GapleDominoUpdateDesk) GetIsUpdateLegalActions() bool {
	if x != nil {
		return x.IsUpdateLegalActions
	}
	return false
}

func (x *GapleDominoUpdateDesk) GetIsUpdateNumRemainedCard() bool {
	if x != nil {
		return x.IsUpdateNumRemainedCard
	}
	return false
}

func (x *GapleDominoUpdateDesk) GetChain() []*GapleDominoChainNode {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *GapleDominoUpdateDesk) GetAction() *GapleDominoAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *GapleDominoUpdateDesk) GetLegalActions() []*GapleDominoAction {
	if x != nil {
		return x.LegalActions
	}
	return nil
}

func (x *GapleDominoUpdateDesk) GetPenalty() *GapleDominoPenalty {
	if x != nil {
		return x.Penalty
	}
	return nil
}

func (x *GapleDominoUpdateDesk) GetRemaineds() []*GapleDominoPresenceNumRemained {
	if x != nil {
		return x.Remaineds
	}
	return nil
}

func (x *GapleDominoUpdateDesk) GetInTurn() string {
	if x != nil {
		return x.InTurn
	}
	return ""
}

func (x *GapleDominoUpdateDesk) GetRemainedFaceletsCount() []int32 {
	if x != nil {
		return x.RemainedFaceletsCount
	}
	return nil
}

type GapleDominoPresenceNumRemained struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NumCard       int32                  `protobuf:"varint,2,opt,name=num_card,json=numCard,proto3" json:"num_card,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GapleDominoPresenceNumRemained) Reset() {
	*x = GapleDominoPresenceNumRemained{}
	mi := &file_gaple_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GapleDominoPresenceNumRemained) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GapleDominoPresenceNumRemained) ProtoMessage() {}

func (x *GapleDominoPresenceNumRemained) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GapleDominoPresenceNumRemained.ProtoReflect.Descriptor instead.
func (*GapleDominoPresenceNumRemained) Descriptor() ([]byte, []int) {
	return file_gaple_proto_rawDescGZIP(), []int{4}
}

func (x *GapleDominoPresenceNumRemained) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GapleDominoPresenceNumRemained) GetNumCard() int32 {
	if x != nil {
		return x.NumCard
	}
	return 0
}

type GapleDominoPresenceHand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dominos       []*Domino              `protobuf:"bytes,2,rep,name=dominos,proto3" json:"dominos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GapleDominoPresenceHand) Reset() {
	*x = GapleDominoPresenceHand{}
	mi := &file_gaple_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GapleDominoPresenceHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GapleDominoPresenceHand) ProtoMessage() {}

func (x *GapleDominoPresenceHand) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GapleDominoPresenceHand.ProtoReflect.Descriptor instead.
func (*GapleDominoPresenceHand) Descriptor() ([]byte, []int) {
	return file_gaple_proto_rawDescGZIP(), []int{5}
}

func (x *GapleDominoPresenceHand) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GapleDominoPresenceHand) GetDominos() []*Domino {
	if x != nil {
		return x.Dominos
	}
	return nil
}

// server->client at the beginning of the game, also when a disconnected player
// reenter
type GapleDominoUpdateDeal struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Hand          *GapleDominoPresenceHand `protobuf:"bytes,1,opt,name=hand,proto3" json:"hand,omitempty"`
	Desk          *GapleDominoUpdateDesk   `protobuf:"bytes,2,opt,name=desk,proto3" json:"desk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GapleDominoUpdateDeal) Reset() {
	*x = GapleDominoUpdateDeal{}
	mi := &file_gaple_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GapleDominoUpdateDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GapleDominoUpdateDeal) ProtoMessage() {}

func (x *GapleDominoUpdateDeal) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GapleDominoUpdateDeal.ProtoReflect.Descriptor instead.
func (*GapleDominoUpdateDeal) Descriptor() ([]byte, []int) {
	return file_gaple_proto_rawDescGZIP(), []int{6}
}

func (x *GapleDominoUpdateDeal) GetHand() *GapleDominoPresenceHand {
	if x != nil {
		return x.Hand
	}
	return nil
}

func (x *GapleDominoUpdateDeal) GetDesk() *GapleDominoUpdateDesk {
	if x != nil {
		return x.Desk
	}
	return nil
}

type LewatCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LewatCount) Reset() {
	*x = LewatCount{}
	mi := &file_gaple_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LewatCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LewatCount) ProtoMessage() {}

func (x *LewatCount) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LewatCount.ProtoReflect.Descriptor instead.
func (*LewatCount) Descriptor() ([]byte, []int) {
	return file_gaple_proto_rawDescGZIP(), []int{7}
}

func (x *LewatCount) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LewatCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ResultChip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BalanceChange int64                  `protobuf:"varint,2,opt,name=balance_change,json=balanceChange,proto3" json:"balance_change,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultChip) Reset() {
	*x = ResultChip{}
	mi := &file_gaple_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultChip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultChip) ProtoMessage() {}

func (x *ResultChip) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultChip.ProtoReflect.Descriptor instead.
func (*ResultChip) Descriptor() ([]byte, []int) {
	return file_gaple_proto_rawDescGZIP(), []int{8}
}

func (x *ResultChip) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ResultChip) GetBalanceChange() int64 {
	if x != nil {
		return x.BalanceChange
	}
	return 0
}

type GapleDoninoUpdateFinish struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Type          GapleDominoFinishGameType  `protobuf:"varint,1,opt,name=type,proto3,enum=proto.GapleDominoFinishGameType" json:"type,omitempty"`
	Winner        string                     `protobuf:"bytes,2,opt,name=winner,proto3" json:"winner,omitempty"`
	Hands         []*GapleDominoPresenceHand `protobuf:"bytes,3,rep,name=hands,proto3" json:"hands,omitempty"`
	Lewats        []*LewatCount              `protobuf:"bytes,4,rep,name=lewats,proto3" json:"lewats,omitempty"`
	Result        []*ResultChip              `protobuf:"bytes,5,rep,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GapleDoninoUpdateFinish) Reset() {
	*x = GapleDoninoUpdateFinish{}
	mi := &file_gaple_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GapleDoninoUpdateFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GapleDoninoUpdateFinish) ProtoMessage() {}

func (x *GapleDoninoUpdateFinish) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GapleDoninoUpdateFinish.ProtoReflect.Descriptor instead.
func (*GapleDoninoUpdateFinish) Descriptor() ([]byte, []int) {
	return file_gaple_proto_rawDescGZIP(), []int{9}
}

func (x *GapleDoninoUpdateFinish) GetType() GapleDominoFinishGameType {
	if x != nil {
		return x.Type
	}
	return GapleDominoFinishGameType_GAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_UNSPECIFIED
}

func (x *GapleDoninoUpdateFinish) GetWinner() string {
	if x != nil {
		return x.Winner
	}
	return ""
}

func (x *GapleDoninoUpdateFinish) GetHands() []*GapleDominoPresenceHand {
	if x != nil {
		return x.Hands
	}
	return nil
}

func (x *GapleDoninoUpdateFinish) GetLewats() []*LewatCount {
	if x != nil {
		return x.Lewats
	}
	return nil
}

func (x *GapleDoninoUpdateFinish) GetResult() []*ResultChip {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_gaple_proto protoreflect.FileDescriptor

const file_gaple_proto_rawDesc = "" +
	"\n" +
	"\vgaple.proto\x12\x05proto\x1a\x0ebandarqq.proto\x1a\x11game_common.proto\"\x90\x01\n" +
	"\x11GapleDominoAction\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12%\n" +
	"\x06domino\x18\x02 \x01(\v2\r.proto.DominoR\x06domino\x12;\n" +
	"\bposition\x18\x03 \x01(\x0e2\x1f.proto.GapleDominoChainPositionR\bposition\"\xb6\x02\n" +
	"\x12GapleDominoPenalty\x12\x1f\n" +
	"\vgain_player\x18\x01 \x01(\tR\n" +
	"gainPlayer\x12\x1f\n" +
	"\vlost_player\x18\x02 \x01(\tR\n" +
	"lostPlayer\x12\x14\n" +
	"\x05chips\x18\x03 \x01(\x05R\x05chips\x12@\n" +
	"\x1dlost_player_not_have_facelets\x18\x04 \x03(\x05R\x19lostPlayerNotHaveFacelets\x12B\n" +
	"\x12gain_player_wallet\x18\x05 \x01(\v2\x14.proto.BalanceUpdateR\x10gainPlayerWallet\x12B\n" +
	"\x12lost_player_wallet\x18\x06 \x01(\v2\x14.proto.BalanceUpdateR\x10lostPlayerWallet\"^\n" +
	"\x14GapleDominoChainNode\x12%\n" +
	"\x06domino\x18\x01 \x01(\v2\r.proto.DominoR\x06domino\x12\x1f\n" +
	"\vturn_number\x18\x02 \x01(\x05R\n" +
	"turnNumber\"\xc4\x05\n" +
	"\x15GapleDominoUpdateDesk\x12\x1b\n" +
	"\tn_players\x18\x01 \x01(\x05R\bnPlayers\x12\x1e\n" +
	"\vis_new_turn\x18\x02 \x01(\bR\tisNewTurn\x12&\n" +
	"\x0fis_update_chain\x18\x03 \x01(\bR\risUpdateChain\x128\n" +
	"\x19is_append_domino_to_chain\x18\x04 \x01(\bR\x15isAppendDominoToChain\x12(\n" +
	"\x10is_penalty_occur\x18\x05 \x01(\bR\x0eisPenaltyOccur\x125\n" +
	"\x17is_update_legal_actions\x18\x06 \x01(\bR\x14isUpdateLegalActions\x12<\n" +
	"\x1bis_update_num_remained_card\x18\a \x01(\bR\x17isUpdateNumRemainedCard\x121\n" +
	"\x05chain\x18\b \x03(\v2\x1b.proto.GapleDominoChainNodeR\x05chain\x120\n" +
	"\x06action\x18\t \x01(\v2\x18.proto.GapleDominoActionR\x06action\x12=\n" +
	"\rlegal_actions\x18\n" +
	" \x03(\v2\x18.proto.GapleDominoActionR\flegalActions\x123\n" +
	"\apenalty\x18\v \x01(\v2\x19.proto.GapleDominoPenaltyR\apenalty\x12C\n" +
	"\tremaineds\x18\f \x03(\v2%.proto.GapleDominoPresenceNumRemainedR\tremaineds\x12\x17\n" +
	"\ain_turn\x18\r \x01(\tR\x06inTurn\x126\n" +
	"\x17remained_facelets_count\x18\x0e \x03(\x05R\x15remainedFaceletsCount\"T\n" +
	"\x1eGapleDominoPresenceNumRemained\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x19\n" +
	"\bnum_card\x18\x02 \x01(\x05R\anumCard\"[\n" +
	"\x17GapleDominoPresenceHand\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12'\n" +
	"\adominos\x18\x02 \x03(\v2\r.proto.DominoR\adominos\"}\n" +
	"\x15GapleDominoUpdateDeal\x122\n" +
	"\x04hand\x18\x01 \x01(\v2\x1e.proto.GapleDominoPresenceHandR\x04hand\x120\n" +
	"\x04desk\x18\x02 \x01(\v2\x1c.proto.GapleDominoUpdateDeskR\x04desk\";\n" +
	"\n" +
	"LewatCount\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\"L\n" +
	"\n" +
	"ResultChip\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12%\n" +
	"\x0ebalance_change\x18\x02 \x01(\x03R\rbalanceChange\"\xf3\x01\n" +
	"\x17GapleDoninoUpdateFinish\x124\n" +
	"\x04type\x18\x01 \x01(\x0e2 .proto.GapleDominoFinishGameTypeR\x04type\x12\x16\n" +
	"\x06winner\x18\x02 \x01(\tR\x06winner\x124\n" +
	"\x05hands\x18\x03 \x03(\v2\x1e.proto.GapleDominoPresenceHandR\x05hands\x12)\n" +
	"\x06lewats\x18\x04 \x03(\v2\x11.proto.LewatCountR\x06lewats\x12)\n" +
	"\x06result\x18\x05 \x03(\v2\x11.proto.ResultChipR\x06result*\x85\x02\n" +
	"\x18GapleDominoChainPosition\x12>\n" +
	":GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_UNSPECIFIED\x10\x00\x127\n" +
	"3GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_HEAD\x10\x01\x127\n" +
	"3GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_TAIL\x10\x02\x127\n" +
	"3GAPLE_DOMINO_CHAIN_POSITION_GAPLE_DOMINO_CHAIN_BOTH\x10\x03*\xcc\x03\n" +
	"\x19GapleDominoFinishGameType\x12J\n" +
	"FGAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_UNSPECIFIED\x10\x00\x12E\n" +
	"AGAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_SINGLE\x10\x01\x12E\n" +
	"AGAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_DOUBLE\x10\x02\x12E\n" +
	"AGAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_TRIPLE\x10\x03\x12F\n" +
	"BGAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_QUARTET\x10\x04\x12F\n" +
	"BGAPLE_DOMINO_FINISH_GAME_TYPE_GAPLE_DOMINO_FINISHGAME_TYPE_QUINTET\x10\x05B(Z&github.com/nk-nigeria/cgp-common/protob\x06proto3"

var (
	file_gaple_proto_rawDescOnce sync.Once
	file_gaple_proto_rawDescData []byte
)

func file_gaple_proto_rawDescGZIP() []byte {
	file_gaple_proto_rawDescOnce.Do(func() {
		file_gaple_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gaple_proto_rawDesc), len(file_gaple_proto_rawDesc)))
	})
	return file_gaple_proto_rawDescData
}

var file_gaple_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gaple_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_gaple_proto_goTypes = []any{
	(GapleDominoChainPosition)(0),          // 0: proto.GapleDominoChainPosition
	(GapleDominoFinishGameType)(0),         // 1: proto.GapleDominoFinishGameType
	(*GapleDominoAction)(nil),              // 2: proto.GapleDominoAction
	(*GapleDominoPenalty)(nil),             // 3: proto.GapleDominoPenalty
	(*GapleDominoChainNode)(nil),           // 4: proto.GapleDominoChainNode
	(*GapleDominoUpdateDesk)(nil),          // 5: proto.GapleDominoUpdateDesk
	(*GapleDominoPresenceNumRemained)(nil), // 6: proto.GapleDominoPresenceNumRemained
	(*GapleDominoPresenceHand)(nil),        // 7: proto.GapleDominoPresenceHand
	(*GapleDominoUpdateDeal)(nil),          // 8: proto.GapleDominoUpdateDeal
	(*LewatCount)(nil),                     // 9: proto.LewatCount
	(*ResultChip)(nil),                     // 10: proto.ResultChip
	(*GapleDoninoUpdateFinish)(nil),        // 11: proto.GapleDoninoUpdateFinish
	(*Domino)(nil),                         // 12: proto.Domino
	(*BalanceUpdate)(nil),                  // 13: proto.BalanceUpdate
}
var file_gaple_proto_depIdxs = []int32{
	12, // 0: proto.GapleDominoAction.domino:type_name -> proto.Domino
	0,  // 1: proto.GapleDominoAction.position:type_name -> proto.GapleDominoChainPosition
	13, // 2: proto.GapleDominoPenalty.gain_player_wallet:type_name -> proto.BalanceUpdate
	13, // 3: proto.GapleDominoPenalty.lost_player_wallet:type_name -> proto.BalanceUpdate
	12, // 4: proto.GapleDominoChainNode.domino:type_name -> proto.Domino
	4,  // 5: proto.GapleDominoUpdateDesk.chain:type_name -> proto.GapleDominoChainNode
	2,  // 6: proto.GapleDominoUpdateDesk.action:type_name -> proto.GapleDominoAction
	2,  // 7: proto.GapleDominoUpdateDesk.legal_actions:type_name -> proto.GapleDominoAction
	3,  // 8: proto.GapleDominoUpdateDesk.penalty:type_name -> proto.GapleDominoPenalty
	6,  // 9: proto.GapleDominoUpdateDesk.remaineds:type_name -> proto.GapleDominoPresenceNumRemained
	12, // 10: proto.GapleDominoPresenceHand.dominos:type_name -> proto.Domino
	7,  // 11: proto.GapleDominoUpdateDeal.hand:type_name -> proto.GapleDominoPresenceHand
	5,  // 12: proto.GapleDominoUpdateDeal.desk:type_name -> proto.GapleDominoUpdateDesk
	1,  // 13: proto.GapleDoninoUpdateFinish.type:type_name -> proto.GapleDominoFinishGameType
	7,  // 14: proto.GapleDoninoUpdateFinish.hands:type_name -> proto.GapleDominoPresenceHand
	9,  // 15: proto.GapleDoninoUpdateFinish.lewats:type_name -> proto.LewatCount
	10, // 16: proto.GapleDoninoUpdateFinish.result:type_name -> proto.ResultChip
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_gaple_proto_init() }
func file_gaple_proto_init() {
	if File_gaple_proto != nil {
		return
	}
	file_bandarqq_proto_init()
	file_game_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gaple_proto_rawDesc), len(file_gaple_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gaple_proto_goTypes,
		DependencyIndexes: file_gaple_proto_depIdxs,
		EnumInfos:         file_gaple_proto_enumTypes,
		MessageInfos:      file_gaple_proto_msgTypes,
	}.Build()
	File_gaple_proto = out.File
	file_gaple_proto_goTypes = nil
	file_gaple_proto_depIdxs = nil
}
