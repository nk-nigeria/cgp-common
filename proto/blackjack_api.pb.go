// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: blackjack_api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// status for each hand, user can have maximum 2 hand ( by spliting )
type BlackjackHandStatus int32

const (
	BlackjackHandStatus_BLACKJACK_HAND_STATUS_UNSPECIFIED BlackjackHandStatus = 0
	BlackjackHandStatus_BLACKJACK_HAND_STATUS_BUSTED      BlackjackHandStatus = 1
	BlackjackHandStatus_BLACKJACK_HAND_STATUS_NORMAL      BlackjackHandStatus = 2
	BlackjackHandStatus_BLACKJACK_HAND_STATUS_21P         BlackjackHandStatus = 3
	BlackjackHandStatus_BLACKJACK_HAND_STATUS_BLACKJACK   BlackjackHandStatus = 4
)

// Enum value maps for BlackjackHandStatus.
var (
	BlackjackHandStatus_name = map[int32]string{
		0: "BLACKJACK_HAND_STATUS_UNSPECIFIED",
		1: "BLACKJACK_HAND_STATUS_BUSTED",
		2: "BLACKJACK_HAND_STATUS_NORMAL",
		3: "BLACKJACK_HAND_STATUS_21P",
		4: "BLACKJACK_HAND_STATUS_BLACKJACK",
	}
	BlackjackHandStatus_value = map[string]int32{
		"BLACKJACK_HAND_STATUS_UNSPECIFIED": 0,
		"BLACKJACK_HAND_STATUS_BUSTED":      1,
		"BLACKJACK_HAND_STATUS_NORMAL":      2,
		"BLACKJACK_HAND_STATUS_21P":         3,
		"BLACKJACK_HAND_STATUS_BLACKJACK":   4,
	}
)

func (x BlackjackHandStatus) Enum() *BlackjackHandStatus {
	p := new(BlackjackHandStatus)
	*p = x
	return p
}

func (x BlackjackHandStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlackjackHandStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_api_proto_enumTypes[0].Descriptor()
}

func (BlackjackHandStatus) Type() protoreflect.EnumType {
	return &file_blackjack_api_proto_enumTypes[0]
}

func (x BlackjackHandStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlackjackHandStatus.Descriptor instead.
func (BlackjackHandStatus) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{0}
}

type BlackjackActionCode int32

const (
	BlackjackActionCode_BLACKJACK_ACTION_UNSPECIFIED BlackjackActionCode = 0
	BlackjackActionCode_BLACKJACK_ACTION_STAY        BlackjackActionCode = 1
	BlackjackActionCode_BLACKJACK_ACTION_HIT         BlackjackActionCode = 2
	BlackjackActionCode_BLACKJACK_ACTION_DOUBLE      BlackjackActionCode = 3
	BlackjackActionCode_BLACKJACK_ACTION_SPLIT       BlackjackActionCode = 4
	BlackjackActionCode_BLACKJACK_ACTION_INSURANCE   BlackjackActionCode = 5
)

// Enum value maps for BlackjackActionCode.
var (
	BlackjackActionCode_name = map[int32]string{
		0: "BLACKJACK_ACTION_UNSPECIFIED",
		1: "BLACKJACK_ACTION_STAY",
		2: "BLACKJACK_ACTION_HIT",
		3: "BLACKJACK_ACTION_DOUBLE",
		4: "BLACKJACK_ACTION_SPLIT",
		5: "BLACKJACK_ACTION_INSURANCE",
	}
	BlackjackActionCode_value = map[string]int32{
		"BLACKJACK_ACTION_UNSPECIFIED": 0,
		"BLACKJACK_ACTION_STAY":        1,
		"BLACKJACK_ACTION_HIT":         2,
		"BLACKJACK_ACTION_DOUBLE":      3,
		"BLACKJACK_ACTION_SPLIT":       4,
		"BLACKJACK_ACTION_INSURANCE":   5,
	}
)

func (x BlackjackActionCode) Enum() *BlackjackActionCode {
	p := new(BlackjackActionCode)
	*p = x
	return p
}

func (x BlackjackActionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlackjackActionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_api_proto_enumTypes[1].Descriptor()
}

func (BlackjackActionCode) Type() protoreflect.EnumType {
	return &file_blackjack_api_proto_enumTypes[1]
}

func (x BlackjackActionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlackjackActionCode.Descriptor instead.
func (BlackjackActionCode) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{1}
}

type BlackjackPlayerType int32

const (
	BlackjackPlayerType_BLACKJACK_PLAYER BlackjackPlayerType = 0
	BlackjackPlayerType_BLACKJACK_BANKER BlackjackPlayerType = 1
)

// Enum value maps for BlackjackPlayerType.
var (
	BlackjackPlayerType_name = map[int32]string{
		0: "BLACKJACK_PLAYER",
		1: "BLACKJACK_BANKER",
	}
	BlackjackPlayerType_value = map[string]int32{
		"BLACKJACK_PLAYER": 0,
		"BLACKJACK_BANKER": 1,
	}
)

func (x BlackjackPlayerType) Enum() *BlackjackPlayerType {
	p := new(BlackjackPlayerType)
	*p = x
	return p
}

func (x BlackjackPlayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlackjackPlayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_api_proto_enumTypes[2].Descriptor()
}

func (BlackjackPlayerType) Type() protoreflect.EnumType {
	return &file_blackjack_api_proto_enumTypes[2]
}

func (x BlackjackPlayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlackjackPlayerType.Descriptor instead.
func (BlackjackPlayerType) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{2}
}

type BlackjackHandN0 int32

const (
	BlackjackHandN0_BLACKJACK_HAND_UNSPECIFIED BlackjackHandN0 = 0
	BlackjackHandN0_BLACKJACK_HAND_1ST         BlackjackHandN0 = 1
	BlackjackHandN0_BLACKJACK_HAND_2ND         BlackjackHandN0 = 2
)

// Enum value maps for BlackjackHandN0.
var (
	BlackjackHandN0_name = map[int32]string{
		0: "BLACKJACK_HAND_UNSPECIFIED",
		1: "BLACKJACK_HAND_1ST",
		2: "BLACKJACK_HAND_2ND",
	}
	BlackjackHandN0_value = map[string]int32{
		"BLACKJACK_HAND_UNSPECIFIED": 0,
		"BLACKJACK_HAND_1ST":         1,
		"BLACKJACK_HAND_2ND":         2,
	}
)

func (x BlackjackHandN0) Enum() *BlackjackHandN0 {
	p := new(BlackjackHandN0)
	*p = x
	return p
}

func (x BlackjackHandN0) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlackjackHandN0) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_api_proto_enumTypes[3].Descriptor()
}

func (BlackjackHandN0) Type() protoreflect.EnumType {
	return &file_blackjack_api_proto_enumTypes[3]
}

func (x BlackjackHandN0) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlackjackHandN0.Descriptor instead.
func (BlackjackHandN0) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{3}
}

type BlackjackAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string              `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Code   BlackjackActionCode `protobuf:"varint,2,opt,name=code,proto3,enum=api.BlackjackActionCode" json:"code,omitempty"`
}

func (x *BlackjackAction) Reset() {
	*x = BlackjackAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackjackAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackAction) ProtoMessage() {}

func (x *BlackjackAction) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackAction.ProtoReflect.Descriptor instead.
func (*BlackjackAction) Descriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{0}
}

func (x *BlackjackAction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackAction) GetCode() BlackjackActionCode {
	if x != nil {
		return x.Code
	}
	return BlackjackActionCode_BLACKJACK_ACTION_UNSPECIFIED
}

type BlackjackBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chips int64 `protobuf:"varint,1,opt,name=chips,proto3" json:"chips,omitempty"`
}

func (x *BlackjackBet) Reset() {
	*x = BlackjackBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackjackBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackBet) ProtoMessage() {}

func (x *BlackjackBet) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackBet.ProtoReflect.Descriptor instead.
func (*BlackjackBet) Descriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{1}
}

func (x *BlackjackBet) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

type BlackjackBetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetAmount int64 `protobuf:"varint,1,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`
	WinAmount int64 `protobuf:"varint,2,opt,name=win_amount,json=winAmount,proto3" json:"win_amount,omitempty"`
	Total     int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	IsWin     bool  `protobuf:"varint,4,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
}

func (x *BlackjackBetResult) Reset() {
	*x = BlackjackBetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackjackBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackBetResult) ProtoMessage() {}

func (x *BlackjackBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackBetResult.ProtoReflect.Descriptor instead.
func (*BlackjackBetResult) Descriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{2}
}

func (x *BlackjackBetResult) GetBetAmount() int64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *BlackjackBetResult) GetWinAmount() int64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

func (x *BlackjackBetResult) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BlackjackBetResult) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

type BlackjackPlayerBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Insurance int64  `protobuf:"varint,2,opt,name=insurance,proto3" json:"insurance,omitempty"`
	First     int64  `protobuf:"varint,3,opt,name=first,proto3" json:"first,omitempty"`
	Second    int64  `protobuf:"varint,4,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *BlackjackPlayerBet) Reset() {
	*x = BlackjackPlayerBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackjackPlayerBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackPlayerBet) ProtoMessage() {}

func (x *BlackjackPlayerBet) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackPlayerBet.ProtoReflect.Descriptor instead.
func (*BlackjackPlayerBet) Descriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{3}
}

func (x *BlackjackPlayerBet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackPlayerBet) GetInsurance() int64 {
	if x != nil {
		return x.Insurance
	}
	return 0
}

func (x *BlackjackPlayerBet) GetFirst() int64 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *BlackjackPlayerBet) GetSecond() int64 {
	if x != nil {
		return x.Second
	}
	return 0
}

type BlackjackPLayerBetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string              `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Insurance *BlackjackBetResult `protobuf:"bytes,2,opt,name=insurance,proto3" json:"insurance,omitempty"`
	First     *BlackjackBetResult `protobuf:"bytes,3,opt,name=first,proto3" json:"first,omitempty"`
	Second    *BlackjackBetResult `protobuf:"bytes,4,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *BlackjackPLayerBetResult) Reset() {
	*x = BlackjackPLayerBetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackjackPLayerBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackPLayerBetResult) ProtoMessage() {}

func (x *BlackjackPLayerBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackPLayerBetResult.ProtoReflect.Descriptor instead.
func (*BlackjackPLayerBetResult) Descriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{4}
}

func (x *BlackjackPLayerBetResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackPLayerBetResult) GetInsurance() *BlackjackBetResult {
	if x != nil {
		return x.Insurance
	}
	return nil
}

func (x *BlackjackPLayerBetResult) GetFirst() *BlackjackBetResult {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *BlackjackPLayerBetResult) GetSecond() *BlackjackBetResult {
	if x != nil {
		return x.Second
	}
	return nil
}

// when is_banker=true, no user_id is send along
// if is_reveal_banker_hidden_card, only all_cards is send along
type BlackjackUpdateDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBanker                 bool            `protobuf:"varint,1,opt,name=is_banker,json=isBanker,proto3" json:"is_banker,omitempty"`
	IsRevealBankerHiddenCard bool            `protobuf:"varint,2,opt,name=is_reveal_banker_hidden_card,json=isRevealBankerHiddenCard,proto3" json:"is_reveal_banker_hidden_card,omitempty"`
	UserId                   string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	HandN0                   BlackjackHandN0 `protobuf:"varint,4,opt,name=hand_n0,json=handN0,proto3,enum=api.BlackjackHandN0" json:"hand_n0,omitempty"`
	NewCards                 []*Card         `protobuf:"bytes,5,rep,name=new_cards,json=newCards,proto3" json:"new_cards,omitempty"`
	AllCards                 []*Card         `protobuf:"bytes,6,rep,name=all_cards,json=allCards,proto3" json:"all_cards,omitempty"`
}

func (x *BlackjackUpdateDeal) Reset() {
	*x = BlackjackUpdateDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackjackUpdateDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackUpdateDeal) ProtoMessage() {}

func (x *BlackjackUpdateDeal) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackUpdateDeal.ProtoReflect.Descriptor instead.
func (*BlackjackUpdateDeal) Descriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{5}
}

func (x *BlackjackUpdateDeal) GetIsBanker() bool {
	if x != nil {
		return x.IsBanker
	}
	return false
}

func (x *BlackjackUpdateDeal) GetIsRevealBankerHiddenCard() bool {
	if x != nil {
		return x.IsRevealBankerHiddenCard
	}
	return false
}

func (x *BlackjackUpdateDeal) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackUpdateDeal) GetHandN0() BlackjackHandN0 {
	if x != nil {
		return x.HandN0
	}
	return BlackjackHandN0_BLACKJACK_HAND_UNSPECIFIED
}

func (x *BlackjackUpdateDeal) GetNewCards() []*Card {
	if x != nil {
		return x.NewCards
	}
	return nil
}

func (x *BlackjackUpdateDeal) GetAllCards() []*Card {
	if x != nil {
		return x.AllCards
	}
	return nil
}

type BlackjackLegalActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Actions []BlackjackActionCode `protobuf:"varint,2,rep,packed,name=actions,proto3,enum=api.BlackjackActionCode" json:"actions,omitempty"`
}

func (x *BlackjackLegalActions) Reset() {
	*x = BlackjackLegalActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackjackLegalActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackLegalActions) ProtoMessage() {}

func (x *BlackjackLegalActions) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackLegalActions.ProtoReflect.Descriptor instead.
func (*BlackjackLegalActions) Descriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{6}
}

func (x *BlackjackLegalActions) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackLegalActions) GetActions() []BlackjackActionCode {
	if x != nil {
		return x.Actions
	}
	return nil
}

type BlackjackHand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*Card `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *BlackjackHand) Reset() {
	*x = BlackjackHand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackjackHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackHand) ProtoMessage() {}

func (x *BlackjackHand) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackHand.ProtoReflect.Descriptor instead.
func (*BlackjackHand) Descriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{7}
}

func (x *BlackjackHand) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type BlackjackPlayerHand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string         `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	First  *BlackjackHand `protobuf:"bytes,2,opt,name=first,proto3" json:"first,omitempty"`
	Second *BlackjackHand `protobuf:"bytes,3,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *BlackjackPlayerHand) Reset() {
	*x = BlackjackPlayerHand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackjackPlayerHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackPlayerHand) ProtoMessage() {}

func (x *BlackjackPlayerHand) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackPlayerHand.ProtoReflect.Descriptor instead.
func (*BlackjackPlayerHand) Descriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{8}
}

func (x *BlackjackPlayerHand) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackPlayerHand) GetFirst() *BlackjackHand {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *BlackjackPlayerHand) GetSecond() *BlackjackHand {
	if x != nil {
		return x.Second
	}
	return nil
}

// case player have 2 hands then hand <- 0|1 else 0
type BlackjackPlayerTurn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPlayer string          `protobuf:"bytes,1,opt,name=is_player,json=isPlayer,proto3" json:"is_player,omitempty"`
	UserId   string          `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	HandN0   BlackjackHandN0 `protobuf:"varint,3,opt,name=hand_n0,json=handN0,proto3,enum=api.BlackjackHandN0" json:"hand_n0,omitempty"`
}

func (x *BlackjackPlayerTurn) Reset() {
	*x = BlackjackPlayerTurn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackjackPlayerTurn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackPlayerTurn) ProtoMessage() {}

func (x *BlackjackPlayerTurn) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackPlayerTurn.ProtoReflect.Descriptor instead.
func (*BlackjackPlayerTurn) Descriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{9}
}

func (x *BlackjackPlayerTurn) GetIsPlayer() string {
	if x != nil {
		return x.IsPlayer
	}
	return ""
}

func (x *BlackjackPlayerTurn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackPlayerTurn) GetHandN0() BlackjackHandN0 {
	if x != nil {
		return x.HandN0
	}
	return BlackjackHandN0_BLACKJACK_HAND_UNSPECIFIED
}

type BlackjackUpdateDesk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInsuranceTurn     bool                   `protobuf:"varint,1,opt,name=is_insurance_turn,json=isInsuranceTurn,proto3" json:"is_insurance_turn,omitempty"`
	IsNewTurn           bool                   `protobuf:"varint,2,opt,name=is_new_turn,json=isNewTurn,proto3" json:"is_new_turn,omitempty"`
	InTurn              string                 `protobuf:"bytes,3,opt,name=in_turn,json=inTurn,proto3" json:"in_turn,omitempty"`
	IsUpdateBet         bool                   `protobuf:"varint,4,opt,name=is_update_bet,json=isUpdateBet,proto3" json:"is_update_bet,omitempty"`
	Bet                 *BlackjackPlayerBet    `protobuf:"bytes,5,opt,name=bet,proto3" json:"bet,omitempty"`
	IsUpdateLegalAction bool                   `protobuf:"varint,6,opt,name=is_update_legal_action,json=isUpdateLegalAction,proto3" json:"is_update_legal_action,omitempty"`
	Actions             *BlackjackLegalActions `protobuf:"bytes,7,opt,name=actions,proto3" json:"actions,omitempty"`
	IsSplitHand         bool                   `protobuf:"varint,8,opt,name=is_split_hand,json=isSplitHand,proto3" json:"is_split_hand,omitempty"`
	Hand                *BlackjackPlayerHand   `protobuf:"bytes,9,opt,name=hand,proto3" json:"hand,omitempty"`
}

func (x *BlackjackUpdateDesk) Reset() {
	*x = BlackjackUpdateDesk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackjackUpdateDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackUpdateDesk) ProtoMessage() {}

func (x *BlackjackUpdateDesk) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackUpdateDesk.ProtoReflect.Descriptor instead.
func (*BlackjackUpdateDesk) Descriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{10}
}

func (x *BlackjackUpdateDesk) GetIsInsuranceTurn() bool {
	if x != nil {
		return x.IsInsuranceTurn
	}
	return false
}

func (x *BlackjackUpdateDesk) GetIsNewTurn() bool {
	if x != nil {
		return x.IsNewTurn
	}
	return false
}

func (x *BlackjackUpdateDesk) GetInTurn() string {
	if x != nil {
		return x.InTurn
	}
	return ""
}

func (x *BlackjackUpdateDesk) GetIsUpdateBet() bool {
	if x != nil {
		return x.IsUpdateBet
	}
	return false
}

func (x *BlackjackUpdateDesk) GetBet() *BlackjackPlayerBet {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *BlackjackUpdateDesk) GetIsUpdateLegalAction() bool {
	if x != nil {
		return x.IsUpdateLegalAction
	}
	return false
}

func (x *BlackjackUpdateDesk) GetActions() *BlackjackLegalActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *BlackjackUpdateDesk) GetIsSplitHand() bool {
	if x != nil {
		return x.IsSplitHand
	}
	return false
}

func (x *BlackjackUpdateDesk) GetHand() *BlackjackPlayerHand {
	if x != nil {
		return x.Hand
	}
	return nil
}

type BlackjackUpdateFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetResults []*BlackjackPLayerBetResult `protobuf:"bytes,1,rep,name=bet_results,json=betResults,proto3" json:"bet_results,omitempty"`
}

func (x *BlackjackUpdateFinish) Reset() {
	*x = BlackjackUpdateFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackjackUpdateFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackUpdateFinish) ProtoMessage() {}

func (x *BlackjackUpdateFinish) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackUpdateFinish.ProtoReflect.Descriptor instead.
func (*BlackjackUpdateFinish) Descriptor() ([]byte, []int) {
	return file_blackjack_api_proto_rawDescGZIP(), []int{11}
}

func (x *BlackjackUpdateFinish) GetBetResults() []*BlackjackPLayerBetResult {
	if x != nil {
		return x.BetResults
	}
	return nil
}

var File_blackjack_api_proto protoreflect.FileDescriptor

var file_blackjack_api_proto_rawDesc = []byte{
	0x0a, 0x13, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x0f, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61,
	0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x42,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x22, 0x7f, 0x0a, 0x12, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x22, 0x79, 0x0a, 0x12, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x18, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61,
	0x63, 0x6b, 0x50, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b,
	0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b,
	0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x22, 0x8a, 0x02, 0x0a, 0x13, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76,
	0x65, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73,
	0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b,
	0x48, 0x61, 0x6e, 0x64, 0x4e, 0x30, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x4e, 0x30, 0x12, 0x26,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x64,
	0x0a, 0x15, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x30, 0x0a, 0x0d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63,
	0x6b, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x6a, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63,
	0x6b, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x7a, 0x0a,
	0x13, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x75, 0x72, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x68, 0x61,
	0x6e, 0x64, 0x5f, 0x6e, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x4e,
	0x30, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x4e, 0x30, 0x22, 0x86, 0x03, 0x0a, 0x13, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73,
	0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x1e, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6e, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x62, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x52, 0x03, 0x62, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61,
	0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x04, 0x68, 0x61,
	0x6e, 0x64, 0x22, 0x57, 0x0a, 0x15, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0b, 0x62,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b,
	0x50, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0a, 0x62, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2a, 0xc4, 0x01, 0x0a, 0x13,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b,
	0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x4c,
	0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x42, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x48, 0x41, 0x4e, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x32, 0x31, 0x50, 0x10, 0x03, 0x12, 0x23, 0x0a,
	0x1f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b,
	0x10, 0x04, 0x2a, 0xc5, 0x01, 0x0a, 0x13, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x4c,
	0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c, 0x41, 0x43, 0x4b,
	0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x54, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x4c,
	0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x2a, 0x41, 0x0a, 0x13, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4c, 0x41, 0x43, 0x4b,
	0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x61, 0x0a,
	0x0f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x4e, 0x30,
	0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x48, 0x41,
	0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x48, 0x41,
	0x4e, 0x44, 0x5f, 0x31, 0x53, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x4a, 0x41, 0x43, 0x4b, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x32, 0x4e, 0x44, 0x10, 0x02,
	0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x69, 0x61, 0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x67, 0x70, 0x2d, 0x62, 0x69, 0x6e, 0x67, 0x2d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_blackjack_api_proto_rawDescOnce sync.Once
	file_blackjack_api_proto_rawDescData = file_blackjack_api_proto_rawDesc
)

func file_blackjack_api_proto_rawDescGZIP() []byte {
	file_blackjack_api_proto_rawDescOnce.Do(func() {
		file_blackjack_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_blackjack_api_proto_rawDescData)
	})
	return file_blackjack_api_proto_rawDescData
}

var file_blackjack_api_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_blackjack_api_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_blackjack_api_proto_goTypes = []interface{}{
	(BlackjackHandStatus)(0),         // 0: api.BlackjackHandStatus
	(BlackjackActionCode)(0),         // 1: api.BlackjackActionCode
	(BlackjackPlayerType)(0),         // 2: api.BlackjackPlayerType
	(BlackjackHandN0)(0),             // 3: api.BlackjackHandN0
	(*BlackjackAction)(nil),          // 4: api.BlackjackAction
	(*BlackjackBet)(nil),             // 5: api.BlackjackBet
	(*BlackjackBetResult)(nil),       // 6: api.BlackjackBetResult
	(*BlackjackPlayerBet)(nil),       // 7: api.BlackjackPlayerBet
	(*BlackjackPLayerBetResult)(nil), // 8: api.BlackjackPLayerBetResult
	(*BlackjackUpdateDeal)(nil),      // 9: api.BlackjackUpdateDeal
	(*BlackjackLegalActions)(nil),    // 10: api.BlackjackLegalActions
	(*BlackjackHand)(nil),            // 11: api.BlackjackHand
	(*BlackjackPlayerHand)(nil),      // 12: api.BlackjackPlayerHand
	(*BlackjackPlayerTurn)(nil),      // 13: api.BlackjackPlayerTurn
	(*BlackjackUpdateDesk)(nil),      // 14: api.BlackjackUpdateDesk
	(*BlackjackUpdateFinish)(nil),    // 15: api.BlackjackUpdateFinish
	(*Card)(nil),                     // 16: api.Card
}
var file_blackjack_api_proto_depIdxs = []int32{
	1,  // 0: api.BlackjackAction.code:type_name -> api.BlackjackActionCode
	6,  // 1: api.BlackjackPLayerBetResult.insurance:type_name -> api.BlackjackBetResult
	6,  // 2: api.BlackjackPLayerBetResult.first:type_name -> api.BlackjackBetResult
	6,  // 3: api.BlackjackPLayerBetResult.second:type_name -> api.BlackjackBetResult
	3,  // 4: api.BlackjackUpdateDeal.hand_n0:type_name -> api.BlackjackHandN0
	16, // 5: api.BlackjackUpdateDeal.new_cards:type_name -> api.Card
	16, // 6: api.BlackjackUpdateDeal.all_cards:type_name -> api.Card
	1,  // 7: api.BlackjackLegalActions.actions:type_name -> api.BlackjackActionCode
	16, // 8: api.BlackjackHand.cards:type_name -> api.Card
	11, // 9: api.BlackjackPlayerHand.first:type_name -> api.BlackjackHand
	11, // 10: api.BlackjackPlayerHand.second:type_name -> api.BlackjackHand
	3,  // 11: api.BlackjackPlayerTurn.hand_n0:type_name -> api.BlackjackHandN0
	7,  // 12: api.BlackjackUpdateDesk.bet:type_name -> api.BlackjackPlayerBet
	10, // 13: api.BlackjackUpdateDesk.actions:type_name -> api.BlackjackLegalActions
	12, // 14: api.BlackjackUpdateDesk.hand:type_name -> api.BlackjackPlayerHand
	8,  // 15: api.BlackjackUpdateFinish.bet_results:type_name -> api.BlackjackPLayerBetResult
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_blackjack_api_proto_init() }
func file_blackjack_api_proto_init() {
	if File_blackjack_api_proto != nil {
		return
	}
	file_chinese_poker_game_api_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_blackjack_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackjackAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackjackBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackjackBetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackjackPlayerBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackjackPLayerBetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackjackUpdateDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackjackLegalActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackjackHand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackjackPlayerHand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackjackPlayerTurn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackjackUpdateDesk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackjackUpdateFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blackjack_api_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blackjack_api_proto_goTypes,
		DependencyIndexes: file_blackjack_api_proto_depIdxs,
		EnumInfos:         file_blackjack_api_proto_enumTypes,
		MessageInfos:      file_blackjack_api_proto_msgTypes,
	}.Build()
	File_blackjack_api_proto = out.File
	file_blackjack_api_proto_rawDesc = nil
	file_blackjack_api_proto_goTypes = nil
	file_blackjack_api_proto_depIdxs = nil
}
