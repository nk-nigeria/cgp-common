// Copyright 2020 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: chinese_poker_game_api.proto

// The realtime protocol for the template match engine.

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardStatus int32

const (
	CardStatus_STATUS_HOLD   CardStatus = 0
	CardStatus_STATUS_UNHOLD CardStatus = 1
)

// Enum value maps for CardStatus.
var (
	CardStatus_name = map[int32]string{
		0: "STATUS_HOLD",
		1: "STATUS_UNHOLD",
	}
	CardStatus_value = map[string]int32{
		"STATUS_HOLD":   0,
		"STATUS_UNHOLD": 1,
	}
)

func (x CardStatus) Enum() *CardStatus {
	p := new(CardStatus)
	*p = x
	return p
}

func (x CardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[0].Descriptor()
}

func (CardStatus) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[0]
}

func (x CardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardStatus.Descriptor instead.
func (CardStatus) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{0}
}

type CardSuit int32

const (
	CardSuit_SUIT_UNSPECIFIED CardSuit = 0
	CardSuit_SUIT_HEARTS      CardSuit = 1
	CardSuit_SUIT_DIAMONDS    CardSuit = 2
	CardSuit_SUIT_CLUBS       CardSuit = 3
	CardSuit_SUIT_SPADES      CardSuit = 4
)

// Enum value maps for CardSuit.
var (
	CardSuit_name = map[int32]string{
		0: "SUIT_UNSPECIFIED",
		1: "SUIT_HEARTS",
		2: "SUIT_DIAMONDS",
		3: "SUIT_CLUBS",
		4: "SUIT_SPADES",
	}
	CardSuit_value = map[string]int32{
		"SUIT_UNSPECIFIED": 0,
		"SUIT_HEARTS":      1,
		"SUIT_DIAMONDS":    2,
		"SUIT_CLUBS":       3,
		"SUIT_SPADES":      4,
	}
)

func (x CardSuit) Enum() *CardSuit {
	p := new(CardSuit)
	*p = x
	return p
}

func (x CardSuit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardSuit) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[1].Descriptor()
}

func (CardSuit) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[1]
}

func (x CardSuit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardSuit.Descriptor instead.
func (CardSuit) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{1}
}

type CardRank int32

const (
	CardRank_RANK_UNSPECIFIED CardRank = 0
	CardRank_RANK_A           CardRank = 1
	CardRank_RANK_2           CardRank = 2
	CardRank_RANK_3           CardRank = 3
	CardRank_RANK_4           CardRank = 4
	CardRank_RANK_5           CardRank = 5
	CardRank_RANK_6           CardRank = 6
	CardRank_RANK_7           CardRank = 7
	CardRank_RANK_8           CardRank = 8
	CardRank_RANK_9           CardRank = 9
	CardRank_RANK_10          CardRank = 10
	CardRank_RANK_J           CardRank = 11
	CardRank_RANK_Q           CardRank = 12
	CardRank_RANK_K           CardRank = 13
)

// Enum value maps for CardRank.
var (
	CardRank_name = map[int32]string{
		0:  "RANK_UNSPECIFIED",
		1:  "RANK_A",
		2:  "RANK_2",
		3:  "RANK_3",
		4:  "RANK_4",
		5:  "RANK_5",
		6:  "RANK_6",
		7:  "RANK_7",
		8:  "RANK_8",
		9:  "RANK_9",
		10: "RANK_10",
		11: "RANK_J",
		12: "RANK_Q",
		13: "RANK_K",
	}
	CardRank_value = map[string]int32{
		"RANK_UNSPECIFIED": 0,
		"RANK_A":           1,
		"RANK_2":           2,
		"RANK_3":           3,
		"RANK_4":           4,
		"RANK_5":           5,
		"RANK_6":           6,
		"RANK_7":           7,
		"RANK_8":           8,
		"RANK_9":           9,
		"RANK_10":          10,
		"RANK_J":           11,
		"RANK_Q":           12,
		"RANK_K":           13,
	}
)

func (x CardRank) Enum() *CardRank {
	p := new(CardRank)
	*p = x
	return p
}

func (x CardRank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardRank) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[2].Descriptor()
}

func (CardRank) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[2]
}

func (x CardRank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardRank.Descriptor instead.
func (CardRank) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{2}
}

type ChoiceCode int32

const (
	// No choice specified. Unused.
	ChoiceCode_CHOICE_UNSPECIFIED ChoiceCode = 0
	ChoiceCode_CHOICE_STAND       ChoiceCode = 1
	ChoiceCode_CHOICE_HIT         ChoiceCode = 2
)

// Enum value maps for ChoiceCode.
var (
	ChoiceCode_name = map[int32]string{
		0: "CHOICE_UNSPECIFIED",
		1: "CHOICE_STAND",
		2: "CHOICE_HIT",
	}
	ChoiceCode_value = map[string]int32{
		"CHOICE_UNSPECIFIED": 0,
		"CHOICE_STAND":       1,
		"CHOICE_HIT":         2,
	}
)

func (x ChoiceCode) Enum() *ChoiceCode {
	p := new(ChoiceCode)
	*p = x
	return p
}

func (x ChoiceCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChoiceCode) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[3].Descriptor()
}

func (ChoiceCode) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[3]
}

func (x ChoiceCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChoiceCode.Descriptor instead.
func (ChoiceCode) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{3}
}

// The complete set of opcodes used for communication between clients and
// server.
type OpCodeRequest int32

const (
	// No opcode specified. Unused.
	OpCodeRequest_OPCODE_UNSPECIFIED OpCodeRequest = 0
	// New game round starting.
	OpCodeRequest_OPCODE_REQUEST_NEW_GAME OpCodeRequest = 1 // message NewGame
	// Request leave game
	OpCodeRequest_OPCODE_REQUEST_LEAVE_GAME      OpCodeRequest = 3
	OpCodeRequest_OPCODE_REQUEST_COMBINE_CARDS   OpCodeRequest = 4
	OpCodeRequest_OPCODE_REQUEST_SHOW_CARDS      OpCodeRequest = 5 // message Organize
	OpCodeRequest_OPCODE_REQUEST_DECLARE_CARDS   OpCodeRequest = 6 // message Organize
	OpCodeRequest_OPCODE_USER_INTERACT_CARDS     OpCodeRequest = 7 // message noti user move card
	OpCodeRequest_OPCODE_REQUEST_BET             OpCodeRequest = 8
	OpCodeRequest_OPCODE_REQUEST_USER_IN_TABLE   OpCodeRequest = 9  // get table info
	OpCodeRequest_OPCODE_REQUEST_INFO_TABLE      OpCodeRequest = 10 //
	OpCodeRequest_OPCODE_REQUEST_HISTORY_RESULT  OpCodeRequest = 11 //
	OpCodeRequest_OPCODE_REQUEST_SPIN            OpCodeRequest = 12
	OpCodeRequest_OPCODE_REQUEST_BUY_SIXIANG_GEM OpCodeRequest = 13
	OpCodeRequest_OPCODE_REQUEST_TIP_INGAME      OpCodeRequest = 14
	OpCodeRequest_OPCODE_REQUEST_SYNC_TABLE      OpCodeRequest = 15
)

// Enum value maps for OpCodeRequest.
var (
	OpCodeRequest_name = map[int32]string{
		0:  "OPCODE_UNSPECIFIED",
		1:  "OPCODE_REQUEST_NEW_GAME",
		3:  "OPCODE_REQUEST_LEAVE_GAME",
		4:  "OPCODE_REQUEST_COMBINE_CARDS",
		5:  "OPCODE_REQUEST_SHOW_CARDS",
		6:  "OPCODE_REQUEST_DECLARE_CARDS",
		7:  "OPCODE_USER_INTERACT_CARDS",
		8:  "OPCODE_REQUEST_BET",
		9:  "OPCODE_REQUEST_USER_IN_TABLE",
		10: "OPCODE_REQUEST_INFO_TABLE",
		11: "OPCODE_REQUEST_HISTORY_RESULT",
		12: "OPCODE_REQUEST_SPIN",
		13: "OPCODE_REQUEST_BUY_SIXIANG_GEM",
		14: "OPCODE_REQUEST_TIP_INGAME",
		15: "OPCODE_REQUEST_SYNC_TABLE",
	}
	OpCodeRequest_value = map[string]int32{
		"OPCODE_UNSPECIFIED":             0,
		"OPCODE_REQUEST_NEW_GAME":        1,
		"OPCODE_REQUEST_LEAVE_GAME":      3,
		"OPCODE_REQUEST_COMBINE_CARDS":   4,
		"OPCODE_REQUEST_SHOW_CARDS":      5,
		"OPCODE_REQUEST_DECLARE_CARDS":   6,
		"OPCODE_USER_INTERACT_CARDS":     7,
		"OPCODE_REQUEST_BET":             8,
		"OPCODE_REQUEST_USER_IN_TABLE":   9,
		"OPCODE_REQUEST_INFO_TABLE":      10,
		"OPCODE_REQUEST_HISTORY_RESULT":  11,
		"OPCODE_REQUEST_SPIN":            12,
		"OPCODE_REQUEST_BUY_SIXIANG_GEM": 13,
		"OPCODE_REQUEST_TIP_INGAME":      14,
		"OPCODE_REQUEST_SYNC_TABLE":      15,
	}
)

func (x OpCodeRequest) Enum() *OpCodeRequest {
	p := new(OpCodeRequest)
	*p = x
	return p
}

func (x OpCodeRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpCodeRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[4].Descriptor()
}

func (OpCodeRequest) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[4]
}

func (x OpCodeRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpCodeRequest.Descriptor instead.
func (OpCodeRequest) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{4}
}

// The complete set of opcodes used for communication between clients and
// server.
type OpCodeUpdate int32

const (
	OpCodeUpdate_OPCODE_UPDATE_UNSPECIFIED OpCodeUpdate = 0
	OpCodeUpdate_OPCODE_UPDATE_TABLE       OpCodeUpdate = 1 // message UpdateTable
	OpCodeUpdate_OPCODE_UPDATE_DEAL        OpCodeUpdate = 2 // message UpdateDeal
	OpCodeUpdate_OPCODE_UPDATE_FINISH      OpCodeUpdate = 3 // message UpdateFinish
	// Request was rejected.
	OpCodeUpdate_OPCODE_UPDATE_REJECTED OpCodeUpdate = 4
	// Update game state
	OpCodeUpdate_OPCODE_UPDATE_GAME_STATE OpCodeUpdate = 5
	// update card state/combine, show, declare
	OpCodeUpdate_OPCODE_UPDATE_CARD_STATE   OpCodeUpdate = 6
	OpCodeUpdate_OPCODE_UPDATE_WALLET       OpCodeUpdate = 7
	OpCodeUpdate_OPCODE_KICK_OFF_THE_TABLE  OpCodeUpdate = 8
	OpCodeUpdate_OPCODE_UPDATE_USER_INFO    OpCodeUpdate = 9
	OpCodeUpdate_OPCODE_USER_IN_TABLE_INFO  OpCodeUpdate = 10
	OpCodeUpdate_OPCODE_ERROR               OpCodeUpdate = 11
	OpCodeUpdate_OPCODE_BUY_SIXIANG_GEM     OpCodeUpdate = 13
	OpCodeUpdate_OPCODE_PLAYER_CHANGE       OpCodeUpdate = 14
	OpCodeUpdate_OPCODE_RESPONSE_TIP_INGAME OpCodeUpdate = 15
	OpCodeUpdate_OPCODE_RESPONSE_SYNC_TABLE OpCodeUpdate = 16
)

// Enum value maps for OpCodeUpdate.
var (
	OpCodeUpdate_name = map[int32]string{
		0:  "OPCODE_UPDATE_UNSPECIFIED",
		1:  "OPCODE_UPDATE_TABLE",
		2:  "OPCODE_UPDATE_DEAL",
		3:  "OPCODE_UPDATE_FINISH",
		4:  "OPCODE_UPDATE_REJECTED",
		5:  "OPCODE_UPDATE_GAME_STATE",
		6:  "OPCODE_UPDATE_CARD_STATE",
		7:  "OPCODE_UPDATE_WALLET",
		8:  "OPCODE_KICK_OFF_THE_TABLE",
		9:  "OPCODE_UPDATE_USER_INFO",
		10: "OPCODE_USER_IN_TABLE_INFO",
		11: "OPCODE_ERROR",
		13: "OPCODE_BUY_SIXIANG_GEM",
		14: "OPCODE_PLAYER_CHANGE",
		15: "OPCODE_RESPONSE_TIP_INGAME",
		16: "OPCODE_RESPONSE_SYNC_TABLE",
	}
	OpCodeUpdate_value = map[string]int32{
		"OPCODE_UPDATE_UNSPECIFIED":  0,
		"OPCODE_UPDATE_TABLE":        1,
		"OPCODE_UPDATE_DEAL":         2,
		"OPCODE_UPDATE_FINISH":       3,
		"OPCODE_UPDATE_REJECTED":     4,
		"OPCODE_UPDATE_GAME_STATE":   5,
		"OPCODE_UPDATE_CARD_STATE":   6,
		"OPCODE_UPDATE_WALLET":       7,
		"OPCODE_KICK_OFF_THE_TABLE":  8,
		"OPCODE_UPDATE_USER_INFO":    9,
		"OPCODE_USER_IN_TABLE_INFO":  10,
		"OPCODE_ERROR":               11,
		"OPCODE_BUY_SIXIANG_GEM":     13,
		"OPCODE_PLAYER_CHANGE":       14,
		"OPCODE_RESPONSE_TIP_INGAME": 15,
		"OPCODE_RESPONSE_SYNC_TABLE": 16,
	}
)

func (x OpCodeUpdate) Enum() *OpCodeUpdate {
	p := new(OpCodeUpdate)
	*p = x
	return p
}

func (x OpCodeUpdate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpCodeUpdate) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[5].Descriptor()
}

func (OpCodeUpdate) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[5]
}

func (x OpCodeUpdate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpCodeUpdate.Descriptor instead.
func (OpCodeUpdate) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{5}
}

type GameState int32

const (
	GameState_GameStateUnknown   GameState = 0
	GameState_GameStateIdle      GameState = 1
	GameState_GameStateMatching  GameState = 2
	GameState_GameStatePreparing GameState = 3
	GameState_GameStatePlay      GameState = 4
	GameState_GameStateReward    GameState = 5
	GameState_GameStateFinish    GameState = 6
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0: "GameStateUnknown",
		1: "GameStateIdle",
		2: "GameStateMatching",
		3: "GameStatePreparing",
		4: "GameStatePlay",
		5: "GameStateReward",
		6: "GameStateFinish",
	}
	GameState_value = map[string]int32{
		"GameStateUnknown":   0,
		"GameStateIdle":      1,
		"GameStateMatching":  2,
		"GameStatePreparing": 3,
		"GameStatePlay":      4,
		"GameStateReward":    5,
		"GameStateFinish":    6,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[6].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[6]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{6}
}

type CardEvent int32

const (
	CardEvent_COMBINE CardEvent = 0
	CardEvent_SHOW    CardEvent = 1
	CardEvent_DECLARE CardEvent = 2
	CardEvent_MOVE    CardEvent = 4
)

// Enum value maps for CardEvent.
var (
	CardEvent_name = map[int32]string{
		0: "COMBINE",
		1: "SHOW",
		2: "DECLARE",
		4: "MOVE",
	}
	CardEvent_value = map[string]int32{
		"COMBINE": 0,
		"SHOW":    1,
		"DECLARE": 2,
		"MOVE":    4,
	}
)

func (x CardEvent) Enum() *CardEvent {
	p := new(CardEvent)
	*p = x
	return p
}

func (x CardEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[7].Descriptor()
}

func (CardEvent) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[7]
}

func (x CardEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardEvent.Descriptor instead.
func (CardEvent) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{7}
}

type HandRanking int32

const (
	HandRanking_StraightFlush         HandRanking = 0
	HandRanking_FourOfAKind           HandRanking = 1
	HandRanking_FullHouse             HandRanking = 2
	HandRanking_Flush                 HandRanking = 3
	HandRanking_Straight              HandRanking = 4
	HandRanking_ThreeOfAKind          HandRanking = 5
	HandRanking_TwoPairs              HandRanking = 6
	HandRanking_Pair                  HandRanking = 7
	HandRanking_HighCard              HandRanking = 8
	HandRanking_NaturalThreeStraights HandRanking = 101
	HandRanking_NaturalThreeOfFlushes HandRanking = 102
	HandRanking_NaturalSixPairs       HandRanking = 103
	HandRanking_NaturalFullColors     HandRanking = 104
	HandRanking_NaturalDragon         HandRanking = 105
	HandRanking_NaturalCleanDragon    HandRanking = 106
)

// Enum value maps for HandRanking.
var (
	HandRanking_name = map[int32]string{
		0:   "StraightFlush",
		1:   "FourOfAKind",
		2:   "FullHouse",
		3:   "Flush",
		4:   "Straight",
		5:   "ThreeOfAKind",
		6:   "TwoPairs",
		7:   "Pair",
		8:   "HighCard",
		101: "NaturalThreeStraights",
		102: "NaturalThreeOfFlushes",
		103: "NaturalSixPairs",
		104: "NaturalFullColors",
		105: "NaturalDragon",
		106: "NaturalCleanDragon",
	}
	HandRanking_value = map[string]int32{
		"StraightFlush":         0,
		"FourOfAKind":           1,
		"FullHouse":             2,
		"Flush":                 3,
		"Straight":              4,
		"ThreeOfAKind":          5,
		"TwoPairs":              6,
		"Pair":                  7,
		"HighCard":              8,
		"NaturalThreeStraights": 101,
		"NaturalThreeOfFlushes": 102,
		"NaturalSixPairs":       103,
		"NaturalFullColors":     104,
		"NaturalDragon":         105,
		"NaturalCleanDragon":    106,
	}
)

func (x HandRanking) Enum() *HandRanking {
	p := new(HandRanking)
	*p = x
	return p
}

func (x HandRanking) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandRanking) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[8].Descriptor()
}

func (HandRanking) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[8]
}

func (x HandRanking) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandRanking.Descriptor instead.
func (HandRanking) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{8}
}

type HandBonusType int32

const (
	HandBonusType_None                       HandBonusType = 0
	HandBonusType_MisSet                     HandBonusType = 1
	HandBonusType_Scoop                      HandBonusType = 2
	HandBonusType_ScoopAll                   HandBonusType = 3
	HandBonusType_BonusFullHouseMidHand      HandBonusType = 101
	HandBonusType_BonusThreeOfAKindFrontHand HandBonusType = 102
	HandBonusType_BonusFourOfAKindBackHand   HandBonusType = 103
	HandBonusType_BonusStraightFlushBackHand HandBonusType = 104
	HandBonusType_BonusFourOfAKindMidHand    HandBonusType = 105
	HandBonusType_BonusStraightFlushMidHand  HandBonusType = 106
	HandBonusType_BonusNaturalThreeStraights HandBonusType = 201
	HandBonusType_BonusNaturalThreeOfFlushes HandBonusType = 202
	HandBonusType_BonusNaturalSixPairs       HandBonusType = 203
	HandBonusType_BonusNaturalFullColors     HandBonusType = 204
	HandBonusType_BonusNaturalDragon         HandBonusType = 205
	HandBonusType_BonusNaturalCleanDragon    HandBonusType = 206
)

// Enum value maps for HandBonusType.
var (
	HandBonusType_name = map[int32]string{
		0:   "None",
		1:   "MisSet",
		2:   "Scoop",
		3:   "ScoopAll",
		101: "BonusFullHouseMidHand",
		102: "BonusThreeOfAKindFrontHand",
		103: "BonusFourOfAKindBackHand",
		104: "BonusStraightFlushBackHand",
		105: "BonusFourOfAKindMidHand",
		106: "BonusStraightFlushMidHand",
		201: "BonusNaturalThreeStraights",
		202: "BonusNaturalThreeOfFlushes",
		203: "BonusNaturalSixPairs",
		204: "BonusNaturalFullColors",
		205: "BonusNaturalDragon",
		206: "BonusNaturalCleanDragon",
	}
	HandBonusType_value = map[string]int32{
		"None":                       0,
		"MisSet":                     1,
		"Scoop":                      2,
		"ScoopAll":                   3,
		"BonusFullHouseMidHand":      101,
		"BonusThreeOfAKindFrontHand": 102,
		"BonusFourOfAKindBackHand":   103,
		"BonusStraightFlushBackHand": 104,
		"BonusFourOfAKindMidHand":    105,
		"BonusStraightFlushMidHand":  106,
		"BonusNaturalThreeStraights": 201,
		"BonusNaturalThreeOfFlushes": 202,
		"BonusNaturalSixPairs":       203,
		"BonusNaturalFullColors":     204,
		"BonusNaturalDragon":         205,
		"BonusNaturalCleanDragon":    206,
	}
)

func (x HandBonusType) Enum() *HandBonusType {
	p := new(HandBonusType)
	*p = x
	return p
}

func (x HandBonusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandBonusType) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[9].Descriptor()
}

func (HandBonusType) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[9]
}

func (x HandBonusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandBonusType.Descriptor instead.
func (HandBonusType) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{9}
}

type PointType int32

const (
	PointType_Point_Normal  PointType = 0
	PointType_Point_Mis_Set PointType = -1
	PointType_Point_Natural PointType = 1
)

// Enum value maps for PointType.
var (
	PointType_name = map[int32]string{
		0:  "Point_Normal",
		-1: "Point_Mis_Set",
		1:  "Point_Natural",
	}
	PointType_value = map[string]int32{
		"Point_Normal":  0,
		"Point_Mis_Set": -1,
		"Point_Natural": 1,
	}
)

func (x PointType) Enum() *PointType {
	p := new(PointType)
	*p = x
	return p
}

func (x PointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointType) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[10].Descriptor()
}

func (PointType) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[10]
}

func (x PointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointType.Descriptor instead.
func (PointType) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{10}
}

// The card
type Card struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rank          CardRank               `protobuf:"varint,1,opt,name=rank,proto3,enum=api.CardRank" json:"rank,omitempty"`
	Suit          CardSuit               `protobuf:"varint,2,opt,name=suit,proto3,enum=api.CardSuit" json:"suit,omitempty"`
	Status        CardStatus             `protobuf:"varint,3,opt,name=status,proto3,enum=api.CardStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Card) Reset() {
	*x = Card{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetRank() CardRank {
	if x != nil {
		return x.Rank
	}
	return CardRank_RANK_UNSPECIFIED
}

func (x *Card) GetSuit() CardSuit {
	if x != nil {
		return x.Suit
	}
	return CardSuit_SUIT_UNSPECIFIED
}

func (x *Card) GetStatus() CardStatus {
	if x != nil {
		return x.Status
	}
	return CardStatus_STATUS_HOLD
}

type ListCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cards         []*Card                `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCard) Reset() {
	*x = ListCard{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCard) ProtoMessage() {}

func (x *ListCard) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCard.ProtoReflect.Descriptor instead.
func (*ListCard) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{1}
}

func (x *ListCard) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

// Message data sent by client to server representing the cards was organize.
type NewGame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewGame) Reset() {
	*x = NewGame{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewGame) ProtoMessage() {}

func (x *NewGame) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewGame.ProtoReflect.Descriptor instead.
func (*NewGame) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{2}
}

// Message data sent by client to server representing the cards was organize.
type Organize struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The current state of the cards.
	Cards         *ListCard `protobuf:"bytes,1,opt,name=cards,proto3" json:"cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Organize) Reset() {
	*x = Organize{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Organize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organize) ProtoMessage() {}

func (x *Organize) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organize.ProtoReflect.Descriptor instead.
func (*Organize) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{3}
}

func (x *Organize) GetCards() *ListCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

// Message data sent by server to clients representing the joining or leaving of
// presence
type UpdateTable struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Players        []*Player              `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	PlayingPlayers []*Player              `protobuf:"bytes,2,rep,name=playing_players,json=playingPlayers,proto3" json:"playing_players,omitempty"`
	JoinPlayers    []*Player              `protobuf:"bytes,3,rep,name=join_players,json=joinPlayers,proto3" json:"join_players,omitempty"`
	LeavePlayers   []*Player              `protobuf:"bytes,4,rep,name=leave_players,json=leavePlayers,proto3" json:"leave_players,omitempty"`
	Bet            int64                  `protobuf:"varint,5,opt,name=bet,proto3" json:"bet,omitempty"`                                 // chip bet info
	Vip            int64                  `protobuf:"varint,6,opt,name=vip,proto3" json:"vip,omitempty"`                                 // min level vip require join room
	TimePlay       int64                  `protobuf:"varint,7,opt,name=time_play,json=timePlay,proto3" json:"time_play,omitempty"`       // timestamp play game
	RemainTime     int64                  `protobuf:"varint,8,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"` // remain time to end game
	GameState      GameState              `protobuf:"varint,9,opt,name=game_state,json=gameState,proto3,enum=api.GameState" json:"game_state,omitempty"`
	JpTreasure     *Jackpot               `protobuf:"bytes,10,opt,name=jp_treasure,json=jpTreasure,proto3" json:"jp_treasure,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateTable) Reset() {
	*x = UpdateTable{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTable) ProtoMessage() {}

func (x *UpdateTable) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTable.ProtoReflect.Descriptor instead.
func (*UpdateTable) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateTable) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *UpdateTable) GetPlayingPlayers() []*Player {
	if x != nil {
		return x.PlayingPlayers
	}
	return nil
}

func (x *UpdateTable) GetJoinPlayers() []*Player {
	if x != nil {
		return x.JoinPlayers
	}
	return nil
}

func (x *UpdateTable) GetLeavePlayers() []*Player {
	if x != nil {
		return x.LeavePlayers
	}
	return nil
}

func (x *UpdateTable) GetBet() int64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *UpdateTable) GetVip() int64 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *UpdateTable) GetTimePlay() int64 {
	if x != nil {
		return x.TimePlay
	}
	return 0
}

func (x *UpdateTable) GetRemainTime() int64 {
	if x != nil {
		return x.RemainTime
	}
	return 0
}

func (x *UpdateTable) GetGameState() GameState {
	if x != nil {
		return x.GameState
	}
	return GameState_GameStateUnknown
}

func (x *UpdateTable) GetJpTreasure() *Jackpot {
	if x != nil {
		return x.JpTreasure
	}
	return nil
}

type PresenceCards struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Presence      string                 `protobuf:"bytes,1,opt,name=presence,proto3" json:"presence,omitempty"`
	Cards         []*Card                `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PresenceCards) Reset() {
	*x = PresenceCards{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PresenceCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceCards) ProtoMessage() {}

func (x *PresenceCards) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceCards.ProtoReflect.Descriptor instead.
func (*PresenceCards) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{5}
}

func (x *PresenceCards) GetPresence() string {
	if x != nil {
		return x.Presence
	}
	return ""
}

func (x *PresenceCards) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

// Complete game round with winner announcement.
type UpdateDeal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PresenceCard  *PresenceCards         `protobuf:"bytes,1,opt,name=presence_card,json=presenceCard,proto3" json:"presence_card,omitempty"`
	CardEvent     map[string]CardEvent   `protobuf:"bytes,2,rep,name=card_event,json=cardEvent,proto3" json:"card_event,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=api.CardEvent"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDeal) Reset() {
	*x = UpdateDeal{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeal) ProtoMessage() {}

func (x *UpdateDeal) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeal.ProtoReflect.Descriptor instead.
func (*UpdateDeal) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateDeal) GetPresenceCard() *PresenceCards {
	if x != nil {
		return x.PresenceCard
	}
	return nil
}

func (x *UpdateDeal) GetCardEvent() map[string]CardEvent {
	if x != nil {
		return x.CardEvent
	}
	return nil
}

type UpdateGameState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         GameState              `protobuf:"varint,1,opt,name=state,proto3,enum=api.GameState" json:"state,omitempty"`
	CountDown     int64                  `protobuf:"varint,2,opt,name=count_down,json=countDown,proto3" json:"count_down,omitempty"`
	ArrangeCard   *ArrangeCard           `protobuf:"bytes,3,opt,name=arrange_card,json=arrangeCard,proto3" json:"arrange_card,omitempty"`
	PresenceCards []*PresenceCards       `protobuf:"bytes,4,rep,name=presenceCards,proto3" json:"presenceCards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateGameState) Reset() {
	*x = UpdateGameState{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameState) ProtoMessage() {}

func (x *UpdateGameState) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameState.ProtoReflect.Descriptor instead.
func (*UpdateGameState) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateGameState) GetState() GameState {
	if x != nil {
		return x.State
	}
	return GameState_GameStateUnknown
}

func (x *UpdateGameState) GetCountDown() int64 {
	if x != nil {
		return x.CountDown
	}
	return 0
}

func (x *UpdateGameState) GetArrangeCard() *ArrangeCard {
	if x != nil {
		return x.ArrangeCard
	}
	return nil
}

func (x *UpdateGameState) GetPresenceCards() []*PresenceCards {
	if x != nil {
		return x.PresenceCards
	}
	return nil
}

type ArrangeCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Presence      string                 `protobuf:"bytes,1,opt,name=Presence,proto3" json:"Presence,omitempty"`
	CardEvent     CardEvent              `protobuf:"varint,2,opt,name=card_event,json=cardEvent,proto3,enum=api.CardEvent" json:"card_event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArrangeCard) Reset() {
	*x = ArrangeCard{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrangeCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrangeCard) ProtoMessage() {}

func (x *ArrangeCard) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrangeCard.ProtoReflect.Descriptor instead.
func (*ArrangeCard) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{8}
}

func (x *ArrangeCard) GetPresence() string {
	if x != nil {
		return x.Presence
	}
	return ""
}

func (x *ArrangeCard) GetCardEvent() CardEvent {
	if x != nil {
		return x.CardEvent
	}
	return CardEvent_COMBINE
}

type HandBonus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Win           string                 `protobuf:"bytes,1,opt,name=win,proto3" json:"win,omitempty"`
	Lose          string                 `protobuf:"bytes,2,opt,name=lose,proto3" json:"lose,omitempty"`
	Type          HandBonusType          `protobuf:"varint,3,opt,name=type,proto3,enum=api.HandBonusType" json:"type,omitempty"`
	Factor        int64                  `protobuf:"varint,4,opt,name=factor,proto3" json:"factor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandBonus) Reset() {
	*x = HandBonus{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandBonus) ProtoMessage() {}

func (x *HandBonus) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandBonus.ProtoReflect.Descriptor instead.
func (*HandBonus) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{9}
}

func (x *HandBonus) GetWin() string {
	if x != nil {
		return x.Win
	}
	return ""
}

func (x *HandBonus) GetLose() string {
	if x != nil {
		return x.Lose
	}
	return ""
}

func (x *HandBonus) GetType() HandBonusType {
	if x != nil {
		return x.Type
	}
	return HandBonusType_None
}

func (x *HandBonus) GetFactor() int64 {
	if x != nil {
		return x.Factor
	}
	return 0
}

type HandResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ranking       HandRanking            `protobuf:"varint,1,opt,name=ranking,proto3,enum=api.HandRanking" json:"ranking,omitempty"`
	Point         uint64                 `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	Lpoint        uint64                 `protobuf:"varint,3,opt,name=lpoint,proto3" json:"lpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandResult) Reset() {
	*x = HandResult{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandResult) ProtoMessage() {}

func (x *HandResult) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandResult.ProtoReflect.Descriptor instead.
func (*HandResult) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{10}
}

func (x *HandResult) GetRanking() HandRanking {
	if x != nil {
		return x.Ranking
	}
	return HandRanking_StraightFlush
}

func (x *HandResult) GetPoint() uint64 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *HandResult) GetLpoint() uint64 {
	if x != nil {
		return x.Lpoint
	}
	return 0
}

type PointResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Front         *HandResult            `protobuf:"bytes,1,opt,name=front,proto3" json:"front,omitempty"`
	Middle        *HandResult            `protobuf:"bytes,2,opt,name=middle,proto3" json:"middle,omitempty"`
	Back          *HandResult            `protobuf:"bytes,3,opt,name=back,proto3" json:"back,omitempty"`
	Natural       *HandResult            `protobuf:"bytes,4,opt,name=natural,proto3" json:"natural,omitempty"`
	Type          PointType              `protobuf:"varint,5,opt,name=type,proto3,enum=api.PointType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PointResult) Reset() {
	*x = PointResult{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PointResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointResult) ProtoMessage() {}

func (x *PointResult) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointResult.ProtoReflect.Descriptor instead.
func (*PointResult) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{11}
}

func (x *PointResult) GetFront() *HandResult {
	if x != nil {
		return x.Front
	}
	return nil
}

func (x *PointResult) GetMiddle() *HandResult {
	if x != nil {
		return x.Middle
	}
	return nil
}

func (x *PointResult) GetBack() *HandResult {
	if x != nil {
		return x.Back
	}
	return nil
}

func (x *PointResult) GetNatural() *HandResult {
	if x != nil {
		return x.Natural
	}
	return nil
}

func (x *PointResult) GetType() PointType {
	if x != nil {
		return x.Type
	}
	return PointType_Point_Normal
}

type ScoreResult struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	FrontFactor       int64                  `protobuf:"varint,1,opt,name=front_factor,json=frontFactor,proto3" json:"front_factor,omitempty"`
	MiddleFactor      int64                  `protobuf:"varint,2,opt,name=middle_factor,json=middleFactor,proto3" json:"middle_factor,omitempty"`
	BackFactor        int64                  `protobuf:"varint,3,opt,name=back_factor,json=backFactor,proto3" json:"back_factor,omitempty"`
	FrontBonusFactor  int64                  `protobuf:"varint,4,opt,name=front_bonus_factor,json=frontBonusFactor,proto3" json:"front_bonus_factor,omitempty"`
	MiddleBonusFactor int64                  `protobuf:"varint,5,opt,name=middle_bonus_factor,json=middleBonusFactor,proto3" json:"middle_bonus_factor,omitempty"`
	BackBonusFactor   int64                  `protobuf:"varint,6,opt,name=back_bonus_factor,json=backBonusFactor,proto3" json:"back_bonus_factor,omitempty"`
	NaturalFactor     int64                  `protobuf:"varint,7,opt,name=natural_factor,json=naturalFactor,proto3" json:"natural_factor,omitempty"`
	BonusFactor       int64                  `protobuf:"varint,8,opt,name=bonus_factor,json=bonusFactor,proto3" json:"bonus_factor,omitempty"` // mis set, scoop, scoop all
	Scoop             int64                  `protobuf:"varint,9,opt,name=scoop,proto3" json:"scoop,omitempty"`
	NumHandWin        int32                  `protobuf:"varint,10,opt,name=num_hand_win,json=numHandWin,proto3" json:"num_hand_win,omitempty"`
	TotalFactor       int64                  `protobuf:"varint,11,opt,name=total_factor,json=totalFactor,proto3" json:"total_factor,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ScoreResult) Reset() {
	*x = ScoreResult{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreResult) ProtoMessage() {}

func (x *ScoreResult) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreResult.ProtoReflect.Descriptor instead.
func (*ScoreResult) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{12}
}

func (x *ScoreResult) GetFrontFactor() int64 {
	if x != nil {
		return x.FrontFactor
	}
	return 0
}

func (x *ScoreResult) GetMiddleFactor() int64 {
	if x != nil {
		return x.MiddleFactor
	}
	return 0
}

func (x *ScoreResult) GetBackFactor() int64 {
	if x != nil {
		return x.BackFactor
	}
	return 0
}

func (x *ScoreResult) GetFrontBonusFactor() int64 {
	if x != nil {
		return x.FrontBonusFactor
	}
	return 0
}

func (x *ScoreResult) GetMiddleBonusFactor() int64 {
	if x != nil {
		return x.MiddleBonusFactor
	}
	return 0
}

func (x *ScoreResult) GetBackBonusFactor() int64 {
	if x != nil {
		return x.BackBonusFactor
	}
	return 0
}

func (x *ScoreResult) GetNaturalFactor() int64 {
	if x != nil {
		return x.NaturalFactor
	}
	return 0
}

func (x *ScoreResult) GetBonusFactor() int64 {
	if x != nil {
		return x.BonusFactor
	}
	return 0
}

func (x *ScoreResult) GetScoop() int64 {
	if x != nil {
		return x.Scoop
	}
	return 0
}

func (x *ScoreResult) GetNumHandWin() int32 {
	if x != nil {
		return x.NumHandWin
	}
	return 0
}

func (x *ScoreResult) GetTotalFactor() int64 {
	if x != nil {
		return x.TotalFactor
	}
	return 0
}

type ComparisonResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ScoreResult   *ScoreResult           `protobuf:"bytes,2,opt,name=score_result,json=scoreResult,proto3" json:"score_result,omitempty"`
	PointResult   *PointResult           `protobuf:"bytes,3,opt,name=point_result,json=pointResult,proto3" json:"point_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComparisonResult) Reset() {
	*x = ComparisonResult{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComparisonResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonResult) ProtoMessage() {}

func (x *ComparisonResult) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonResult.ProtoReflect.Descriptor instead.
func (*ComparisonResult) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{13}
}

func (x *ComparisonResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ComparisonResult) GetScoreResult() *ScoreResult {
	if x != nil {
		return x.ScoreResult
	}
	return nil
}

func (x *ComparisonResult) GetPointResult() *PointResult {
	if x != nil {
		return x.PointResult
	}
	return nil
}

type UpdateFinish struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*ComparisonResult    `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Bonuses       []*HandBonus           `protobuf:"bytes,2,rep,name=bonuses,proto3" json:"bonuses,omitempty"`
	Jackpot       *Jackpot               `protobuf:"bytes,3,opt,name=jackpot,proto3" json:"jackpot,omitempty"`
	JpTreasure    *Jackpot               `protobuf:"bytes,4,opt,name=jp_treasure,json=jpTreasure,proto3" json:"jp_treasure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFinish) Reset() {
	*x = UpdateFinish{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFinish) ProtoMessage() {}

func (x *UpdateFinish) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFinish.ProtoReflect.Descriptor instead.
func (*UpdateFinish) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateFinish) GetResults() []*ComparisonResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UpdateFinish) GetBonuses() []*HandBonus {
	if x != nil {
		return x.Bonuses
	}
	return nil
}

func (x *UpdateFinish) GetJackpot() *Jackpot {
	if x != nil {
		return x.Jackpot
	}
	return nil
}

func (x *UpdateFinish) GetJpTreasure() *Jackpot {
	if x != nil {
		return x.JpTreasure
	}
	return nil
}

type BalanceUpdate struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UserId             string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AmountChipBefore   int64                  `protobuf:"varint,2,opt,name=amount_chip_before,json=amountChipBefore,proto3" json:"amount_chip_before,omitempty"`
	AmountChipCurrent  int64                  `protobuf:"varint,3,opt,name=amount_chip_current,json=amountChipCurrent,proto3" json:"amount_chip_current,omitempty"`
	AmountChipAdd      int64                  `protobuf:"varint,4,opt,name=amount_chip_add,json=amountChipAdd,proto3" json:"amount_chip_add,omitempty"`
	AmoutChipBet       int64                  `protobuf:"varint,5,opt,name=amout_chip_bet,json=amoutChipBet,proto3" json:"amout_chip_bet,omitempty"`
	AmoutChipFee       int64                  `protobuf:"varint,6,opt,name=amout_chip_fee,json=amoutChipFee,proto3" json:"amout_chip_fee,omitempty"`
	AmoutChipAddPrefee int64                  `protobuf:"varint,7,opt,name=amout_chip_add_prefee,json=amoutChipAddPrefee,proto3" json:"amout_chip_add_prefee,omitempty"`
	TotalChipInMatch   int64                  `protobuf:"varint,8,opt,name=total_chip_in_match,json=totalChipInMatch,proto3" json:"total_chip_in_match,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BalanceUpdate) Reset() {
	*x = BalanceUpdate{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceUpdate) ProtoMessage() {}

func (x *BalanceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceUpdate.ProtoReflect.Descriptor instead.
func (*BalanceUpdate) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{15}
}

func (x *BalanceUpdate) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BalanceUpdate) GetAmountChipBefore() int64 {
	if x != nil {
		return x.AmountChipBefore
	}
	return 0
}

func (x *BalanceUpdate) GetAmountChipCurrent() int64 {
	if x != nil {
		return x.AmountChipCurrent
	}
	return 0
}

func (x *BalanceUpdate) GetAmountChipAdd() int64 {
	if x != nil {
		return x.AmountChipAdd
	}
	return 0
}

func (x *BalanceUpdate) GetAmoutChipBet() int64 {
	if x != nil {
		return x.AmoutChipBet
	}
	return 0
}

func (x *BalanceUpdate) GetAmoutChipFee() int64 {
	if x != nil {
		return x.AmoutChipFee
	}
	return 0
}

func (x *BalanceUpdate) GetAmoutChipAddPrefee() int64 {
	if x != nil {
		return x.AmoutChipAddPrefee
	}
	return 0
}

func (x *BalanceUpdate) GetTotalChipInMatch() int64 {
	if x != nil {
		return x.TotalChipInMatch
	}
	return 0
}

type BalanceResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Updates       []*BalanceUpdate       `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	Jackpot       *Jackpot               `protobuf:"bytes,2,opt,name=jackpot,proto3" json:"jackpot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BalanceResult) Reset() {
	*x = BalanceResult{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceResult) ProtoMessage() {}

func (x *BalanceResult) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceResult.ProtoReflect.Descriptor instead.
func (*BalanceResult) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{16}
}

func (x *BalanceResult) GetUpdates() []*BalanceUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *BalanceResult) GetJackpot() *Jackpot {
	if x != nil {
		return x.Jackpot
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserName      string                 `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Wallet        string                 `protobuf:"bytes,3,opt,name=wallet,proto3" json:"wallet,omitempty"`
	IsPlaying     bool                   `protobuf:"varint,4,opt,name=is_playing,json=isPlaying,proto3" json:"is_playing,omitempty"`
	CardStatus    CardStatus             `protobuf:"varint,5,opt,name=card_status,json=cardStatus,proto3,enum=api.CardStatus" json:"card_status,omitempty"`
	Cards         *ListCard              `protobuf:"bytes,6,opt,name=cards,proto3" json:"cards,omitempty"`
	VipLevel      int64                  `protobuf:"varint,7,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
	AvatarId      string                 `protobuf:"bytes,13,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Sid           int64                  `protobuf:"varint,14,opt,name=sid,proto3" json:"sid,omitempty"`
	Order         int32                  `protobuf:"varint,15,opt,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Player) Reset() {
	*x = Player{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{17}
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Player) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *Player) GetIsPlaying() bool {
	if x != nil {
		return x.IsPlaying
	}
	return false
}

func (x *Player) GetCardStatus() CardStatus {
	if x != nil {
		return x.CardStatus
	}
	return CardStatus_STATUS_HOLD
}

func (x *Player) GetCards() *ListCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Player) GetVipLevel() int64 {
	if x != nil {
		return x.VipLevel
	}
	return 0
}

func (x *Player) GetAvatarId() string {
	if x != nil {
		return x.AvatarId
	}
	return ""
}

func (x *Player) GetSid() int64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *Player) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type Jackpot struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GameCode       string                 `protobuf:"bytes,3,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	Chips          int64                  `protobuf:"varint,4,opt,name=chips,proto3" json:"chips,omitempty"`
	CreateTimeUnix int64                  `protobuf:"varint,5,opt,name=create_time_unix,json=createTimeUnix,proto3" json:"create_time_unix,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Jackpot) Reset() {
	*x = Jackpot{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Jackpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jackpot) ProtoMessage() {}

func (x *Jackpot) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jackpot.ProtoReflect.Descriptor instead.
func (*Jackpot) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{18}
}

func (x *Jackpot) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Jackpot) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Jackpot) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *Jackpot) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *Jackpot) GetCreateTimeUnix() int64 {
	if x != nil {
		return x.CreateTimeUnix
	}
	return 0
}

type HitJackpotHistory struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserName       string                 `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Chips          int64                  `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	CreateTimeUnix int64                  `protobuf:"varint,3,opt,name=create_time_unix,json=createTimeUnix,proto3" json:"create_time_unix,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HitJackpotHistory) Reset() {
	*x = HitJackpotHistory{}
	mi := &file_chinese_poker_game_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HitJackpotHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HitJackpotHistory) ProtoMessage() {}

func (x *HitJackpotHistory) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HitJackpotHistory.ProtoReflect.Descriptor instead.
func (*HitJackpotHistory) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{19}
}

func (x *HitJackpotHistory) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *HitJackpotHistory) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *HitJackpotHistory) GetCreateTimeUnix() int64 {
	if x != nil {
		return x.CreateTimeUnix
	}
	return 0
}

var File_chinese_poker_game_api_proto protoreflect.FileDescriptor

const file_chinese_poker_game_api_proto_rawDesc = "" +
	"\n" +
	"\x1cchinese_poker_game_api.proto\x12\x03api\"u\n" +
	"\x04Card\x12!\n" +
	"\x04rank\x18\x01 \x01(\x0e2\r.api.CardRankR\x04rank\x12!\n" +
	"\x04suit\x18\x02 \x01(\x0e2\r.api.CardSuitR\x04suit\x12'\n" +
	"\x06status\x18\x03 \x01(\x0e2\x0f.api.CardStatusR\x06status\"+\n" +
	"\bListCard\x12\x1f\n" +
	"\x05cards\x18\x01 \x03(\v2\t.api.CardR\x05cards\"\t\n" +
	"\aNewGame\"/\n" +
	"\bOrganize\x12#\n" +
	"\x05cards\x18\x01 \x01(\v2\r.api.ListCardR\x05cards\"\x8c\x03\n" +
	"\vUpdateTable\x12%\n" +
	"\aplayers\x18\x01 \x03(\v2\v.api.PlayerR\aplayers\x124\n" +
	"\x0fplaying_players\x18\x02 \x03(\v2\v.api.PlayerR\x0eplayingPlayers\x12.\n" +
	"\fjoin_players\x18\x03 \x03(\v2\v.api.PlayerR\vjoinPlayers\x120\n" +
	"\rleave_players\x18\x04 \x03(\v2\v.api.PlayerR\fleavePlayers\x12\x10\n" +
	"\x03bet\x18\x05 \x01(\x03R\x03bet\x12\x10\n" +
	"\x03vip\x18\x06 \x01(\x03R\x03vip\x12\x1b\n" +
	"\ttime_play\x18\a \x01(\x03R\btimePlay\x12\x1f\n" +
	"\vremain_time\x18\b \x01(\x03R\n" +
	"remainTime\x12-\n" +
	"\n" +
	"game_state\x18\t \x01(\x0e2\x0e.api.GameStateR\tgameState\x12-\n" +
	"\vjp_treasure\x18\n" +
	" \x01(\v2\f.api.JackpotR\n" +
	"jpTreasure\"L\n" +
	"\rPresenceCards\x12\x1a\n" +
	"\bpresence\x18\x01 \x01(\tR\bpresence\x12\x1f\n" +
	"\x05cards\x18\x02 \x03(\v2\t.api.CardR\x05cards\"\xd2\x01\n" +
	"\n" +
	"UpdateDeal\x127\n" +
	"\rpresence_card\x18\x01 \x01(\v2\x12.api.PresenceCardsR\fpresenceCard\x12=\n" +
	"\n" +
	"card_event\x18\x02 \x03(\v2\x1e.api.UpdateDeal.CardEventEntryR\tcardEvent\x1aL\n" +
	"\x0eCardEventEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\x0e2\x0e.api.CardEventR\x05value:\x028\x01\"\xc5\x01\n" +
	"\x0fUpdateGameState\x12$\n" +
	"\x05state\x18\x01 \x01(\x0e2\x0e.api.GameStateR\x05state\x12\x1d\n" +
	"\n" +
	"count_down\x18\x02 \x01(\x03R\tcountDown\x123\n" +
	"\farrange_card\x18\x03 \x01(\v2\x10.api.ArrangeCardR\varrangeCard\x128\n" +
	"\rpresenceCards\x18\x04 \x03(\v2\x12.api.PresenceCardsR\rpresenceCards\"X\n" +
	"\vArrangeCard\x12\x1a\n" +
	"\bPresence\x18\x01 \x01(\tR\bPresence\x12-\n" +
	"\n" +
	"card_event\x18\x02 \x01(\x0e2\x0e.api.CardEventR\tcardEvent\"q\n" +
	"\tHandBonus\x12\x10\n" +
	"\x03win\x18\x01 \x01(\tR\x03win\x12\x12\n" +
	"\x04lose\x18\x02 \x01(\tR\x04lose\x12&\n" +
	"\x04type\x18\x03 \x01(\x0e2\x12.api.HandBonusTypeR\x04type\x12\x16\n" +
	"\x06factor\x18\x04 \x01(\x03R\x06factor\"f\n" +
	"\n" +
	"HandResult\x12*\n" +
	"\aranking\x18\x01 \x01(\x0e2\x10.api.HandRankingR\aranking\x12\x14\n" +
	"\x05point\x18\x02 \x01(\x04R\x05point\x12\x16\n" +
	"\x06lpoint\x18\x03 \x01(\x04R\x06lpoint\"\xd1\x01\n" +
	"\vPointResult\x12%\n" +
	"\x05front\x18\x01 \x01(\v2\x0f.api.HandResultR\x05front\x12'\n" +
	"\x06middle\x18\x02 \x01(\v2\x0f.api.HandResultR\x06middle\x12#\n" +
	"\x04back\x18\x03 \x01(\v2\x0f.api.HandResultR\x04back\x12)\n" +
	"\anatural\x18\x04 \x01(\v2\x0f.api.HandResultR\anatural\x12\"\n" +
	"\x04type\x18\x05 \x01(\x0e2\x0e.api.PointTypeR\x04type\"\xa5\x03\n" +
	"\vScoreResult\x12!\n" +
	"\ffront_factor\x18\x01 \x01(\x03R\vfrontFactor\x12#\n" +
	"\rmiddle_factor\x18\x02 \x01(\x03R\fmiddleFactor\x12\x1f\n" +
	"\vback_factor\x18\x03 \x01(\x03R\n" +
	"backFactor\x12,\n" +
	"\x12front_bonus_factor\x18\x04 \x01(\x03R\x10frontBonusFactor\x12.\n" +
	"\x13middle_bonus_factor\x18\x05 \x01(\x03R\x11middleBonusFactor\x12*\n" +
	"\x11back_bonus_factor\x18\x06 \x01(\x03R\x0fbackBonusFactor\x12%\n" +
	"\x0enatural_factor\x18\a \x01(\x03R\rnaturalFactor\x12!\n" +
	"\fbonus_factor\x18\b \x01(\x03R\vbonusFactor\x12\x14\n" +
	"\x05scoop\x18\t \x01(\x03R\x05scoop\x12 \n" +
	"\fnum_hand_win\x18\n" +
	" \x01(\x05R\n" +
	"numHandWin\x12!\n" +
	"\ftotal_factor\x18\v \x01(\x03R\vtotalFactor\"\x95\x01\n" +
	"\x10ComparisonResult\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x123\n" +
	"\fscore_result\x18\x02 \x01(\v2\x10.api.ScoreResultR\vscoreResult\x123\n" +
	"\fpoint_result\x18\x03 \x01(\v2\x10.api.PointResultR\vpointResult\"\xc0\x01\n" +
	"\fUpdateFinish\x12/\n" +
	"\aresults\x18\x01 \x03(\v2\x15.api.ComparisonResultR\aresults\x12(\n" +
	"\abonuses\x18\x02 \x03(\v2\x0e.api.HandBonusR\abonuses\x12&\n" +
	"\ajackpot\x18\x03 \x01(\v2\f.api.JackpotR\ajackpot\x12-\n" +
	"\vjp_treasure\x18\x04 \x01(\v2\f.api.JackpotR\n" +
	"jpTreasure\"\xdc\x02\n" +
	"\rBalanceUpdate\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12,\n" +
	"\x12amount_chip_before\x18\x02 \x01(\x03R\x10amountChipBefore\x12.\n" +
	"\x13amount_chip_current\x18\x03 \x01(\x03R\x11amountChipCurrent\x12&\n" +
	"\x0famount_chip_add\x18\x04 \x01(\x03R\ramountChipAdd\x12$\n" +
	"\x0eamout_chip_bet\x18\x05 \x01(\x03R\famoutChipBet\x12$\n" +
	"\x0eamout_chip_fee\x18\x06 \x01(\x03R\famoutChipFee\x121\n" +
	"\x15amout_chip_add_prefee\x18\a \x01(\x03R\x12amoutChipAddPrefee\x12-\n" +
	"\x13total_chip_in_match\x18\b \x01(\x03R\x10totalChipInMatch\"e\n" +
	"\rBalanceResult\x12,\n" +
	"\aupdates\x18\x01 \x03(\v2\x12.api.BalanceUpdateR\aupdates\x12&\n" +
	"\ajackpot\x18\x02 \x01(\v2\f.api.JackpotR\ajackpot\"\xa5\x02\n" +
	"\x06Player\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tuser_name\x18\x02 \x01(\tR\buserName\x12\x16\n" +
	"\x06wallet\x18\x03 \x01(\tR\x06wallet\x12\x1d\n" +
	"\n" +
	"is_playing\x18\x04 \x01(\bR\tisPlaying\x120\n" +
	"\vcard_status\x18\x05 \x01(\x0e2\x0f.api.CardStatusR\n" +
	"cardStatus\x12#\n" +
	"\x05cards\x18\x06 \x01(\v2\r.api.ListCardR\x05cards\x12\x1b\n" +
	"\tvip_level\x18\a \x01(\x03R\bvipLevel\x12\x1b\n" +
	"\tavatar_id\x18\r \x01(\tR\bavatarId\x12\x10\n" +
	"\x03sid\x18\x0e \x01(\x03R\x03sid\x12\x14\n" +
	"\x05order\x18\x0f \x01(\x05R\x05order\"\x8f\x01\n" +
	"\aJackpot\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x1b\n" +
	"\tgame_code\x18\x03 \x01(\tR\bgameCode\x12\x14\n" +
	"\x05chips\x18\x04 \x01(\x03R\x05chips\x12(\n" +
	"\x10create_time_unix\x18\x05 \x01(\x03R\x0ecreateTimeUnix\"p\n" +
	"\x11HitJackpotHistory\x12\x1b\n" +
	"\tuser_name\x18\x01 \x01(\tR\buserName\x12\x14\n" +
	"\x05chips\x18\x02 \x01(\x03R\x05chips\x12(\n" +
	"\x10create_time_unix\x18\x03 \x01(\x03R\x0ecreateTimeUnix*0\n" +
	"\n" +
	"CardStatus\x12\x0f\n" +
	"\vSTATUS_HOLD\x10\x00\x12\x11\n" +
	"\rSTATUS_UNHOLD\x10\x01*e\n" +
	"\bCardSuit\x12\x14\n" +
	"\x10SUIT_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vSUIT_HEARTS\x10\x01\x12\x11\n" +
	"\rSUIT_DIAMONDS\x10\x02\x12\x0e\n" +
	"\n" +
	"SUIT_CLUBS\x10\x03\x12\x0f\n" +
	"\vSUIT_SPADES\x10\x04*\xbd\x01\n" +
	"\bCardRank\x12\x14\n" +
	"\x10RANK_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06RANK_A\x10\x01\x12\n" +
	"\n" +
	"\x06RANK_2\x10\x02\x12\n" +
	"\n" +
	"\x06RANK_3\x10\x03\x12\n" +
	"\n" +
	"\x06RANK_4\x10\x04\x12\n" +
	"\n" +
	"\x06RANK_5\x10\x05\x12\n" +
	"\n" +
	"\x06RANK_6\x10\x06\x12\n" +
	"\n" +
	"\x06RANK_7\x10\a\x12\n" +
	"\n" +
	"\x06RANK_8\x10\b\x12\n" +
	"\n" +
	"\x06RANK_9\x10\t\x12\v\n" +
	"\aRANK_10\x10\n" +
	"\x12\n" +
	"\n" +
	"\x06RANK_J\x10\v\x12\n" +
	"\n" +
	"\x06RANK_Q\x10\f\x12\n" +
	"\n" +
	"\x06RANK_K\x10\r*F\n" +
	"\n" +
	"ChoiceCode\x12\x16\n" +
	"\x12CHOICE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fCHOICE_STAND\x10\x01\x12\x0e\n" +
	"\n" +
	"CHOICE_HIT\x10\x02*\xdd\x03\n" +
	"\rOpCodeRequest\x12\x16\n" +
	"\x12OPCODE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17OPCODE_REQUEST_NEW_GAME\x10\x01\x12\x1d\n" +
	"\x19OPCODE_REQUEST_LEAVE_GAME\x10\x03\x12 \n" +
	"\x1cOPCODE_REQUEST_COMBINE_CARDS\x10\x04\x12\x1d\n" +
	"\x19OPCODE_REQUEST_SHOW_CARDS\x10\x05\x12 \n" +
	"\x1cOPCODE_REQUEST_DECLARE_CARDS\x10\x06\x12\x1e\n" +
	"\x1aOPCODE_USER_INTERACT_CARDS\x10\a\x12\x16\n" +
	"\x12OPCODE_REQUEST_BET\x10\b\x12 \n" +
	"\x1cOPCODE_REQUEST_USER_IN_TABLE\x10\t\x12\x1d\n" +
	"\x19OPCODE_REQUEST_INFO_TABLE\x10\n" +
	"\x12!\n" +
	"\x1dOPCODE_REQUEST_HISTORY_RESULT\x10\v\x12\x17\n" +
	"\x13OPCODE_REQUEST_SPIN\x10\f\x12\"\n" +
	"\x1eOPCODE_REQUEST_BUY_SIXIANG_GEM\x10\r\x12\x1d\n" +
	"\x19OPCODE_REQUEST_TIP_INGAME\x10\x0e\x12\x1d\n" +
	"\x19OPCODE_REQUEST_SYNC_TABLE\x10\x0f*\xcd\x03\n" +
	"\fOpCodeUpdate\x12\x1d\n" +
	"\x19OPCODE_UPDATE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13OPCODE_UPDATE_TABLE\x10\x01\x12\x16\n" +
	"\x12OPCODE_UPDATE_DEAL\x10\x02\x12\x18\n" +
	"\x14OPCODE_UPDATE_FINISH\x10\x03\x12\x1a\n" +
	"\x16OPCODE_UPDATE_REJECTED\x10\x04\x12\x1c\n" +
	"\x18OPCODE_UPDATE_GAME_STATE\x10\x05\x12\x1c\n" +
	"\x18OPCODE_UPDATE_CARD_STATE\x10\x06\x12\x18\n" +
	"\x14OPCODE_UPDATE_WALLET\x10\a\x12\x1d\n" +
	"\x19OPCODE_KICK_OFF_THE_TABLE\x10\b\x12\x1b\n" +
	"\x17OPCODE_UPDATE_USER_INFO\x10\t\x12\x1d\n" +
	"\x19OPCODE_USER_IN_TABLE_INFO\x10\n" +
	"\x12\x10\n" +
	"\fOPCODE_ERROR\x10\v\x12\x1a\n" +
	"\x16OPCODE_BUY_SIXIANG_GEM\x10\r\x12\x18\n" +
	"\x14OPCODE_PLAYER_CHANGE\x10\x0e\x12\x1e\n" +
	"\x1aOPCODE_RESPONSE_TIP_INGAME\x10\x0f\x12\x1e\n" +
	"\x1aOPCODE_RESPONSE_SYNC_TABLE\x10\x10*\xa0\x01\n" +
	"\tGameState\x12\x14\n" +
	"\x10GameStateUnknown\x10\x00\x12\x11\n" +
	"\rGameStateIdle\x10\x01\x12\x15\n" +
	"\x11GameStateMatching\x10\x02\x12\x16\n" +
	"\x12GameStatePreparing\x10\x03\x12\x11\n" +
	"\rGameStatePlay\x10\x04\x12\x13\n" +
	"\x0fGameStateReward\x10\x05\x12\x13\n" +
	"\x0fGameStateFinish\x10\x06*9\n" +
	"\tCardEvent\x12\v\n" +
	"\aCOMBINE\x10\x00\x12\b\n" +
	"\x04SHOW\x10\x01\x12\v\n" +
	"\aDECLARE\x10\x02\x12\b\n" +
	"\x04MOVE\x10\x04*\x9e\x02\n" +
	"\vHandRanking\x12\x11\n" +
	"\rStraightFlush\x10\x00\x12\x0f\n" +
	"\vFourOfAKind\x10\x01\x12\r\n" +
	"\tFullHouse\x10\x02\x12\t\n" +
	"\x05Flush\x10\x03\x12\f\n" +
	"\bStraight\x10\x04\x12\x10\n" +
	"\fThreeOfAKind\x10\x05\x12\f\n" +
	"\bTwoPairs\x10\x06\x12\b\n" +
	"\x04Pair\x10\a\x12\f\n" +
	"\bHighCard\x10\b\x12\x19\n" +
	"\x15NaturalThreeStraights\x10e\x12\x19\n" +
	"\x15NaturalThreeOfFlushes\x10f\x12\x13\n" +
	"\x0fNaturalSixPairs\x10g\x12\x15\n" +
	"\x11NaturalFullColors\x10h\x12\x11\n" +
	"\rNaturalDragon\x10i\x12\x16\n" +
	"\x12NaturalCleanDragon\x10j*\xa4\x03\n" +
	"\rHandBonusType\x12\b\n" +
	"\x04None\x10\x00\x12\n" +
	"\n" +
	"\x06MisSet\x10\x01\x12\t\n" +
	"\x05Scoop\x10\x02\x12\f\n" +
	"\bScoopAll\x10\x03\x12\x19\n" +
	"\x15BonusFullHouseMidHand\x10e\x12\x1e\n" +
	"\x1aBonusThreeOfAKindFrontHand\x10f\x12\x1c\n" +
	"\x18BonusFourOfAKindBackHand\x10g\x12\x1e\n" +
	"\x1aBonusStraightFlushBackHand\x10h\x12\x1b\n" +
	"\x17BonusFourOfAKindMidHand\x10i\x12\x1d\n" +
	"\x19BonusStraightFlushMidHand\x10j\x12\x1f\n" +
	"\x1aBonusNaturalThreeStraights\x10\xc9\x01\x12\x1f\n" +
	"\x1aBonusNaturalThreeOfFlushes\x10\xca\x01\x12\x19\n" +
	"\x14BonusNaturalSixPairs\x10\xcb\x01\x12\x1b\n" +
	"\x16BonusNaturalFullColors\x10\xcc\x01\x12\x17\n" +
	"\x12BonusNaturalDragon\x10\xcd\x01\x12\x1c\n" +
	"\x17BonusNaturalCleanDragon\x10\xce\x01*L\n" +
	"\tPointType\x12\x10\n" +
	"\fPoint_Normal\x10\x00\x12\x1a\n" +
	"\rPoint_Mis_Set\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12\x11\n" +
	"\rPoint_Natural\x10\x01B0Z.github.com/nakamaFramework/cgp-bing-module/apib\x06proto3"

var (
	file_chinese_poker_game_api_proto_rawDescOnce sync.Once
	file_chinese_poker_game_api_proto_rawDescData []byte
)

func file_chinese_poker_game_api_proto_rawDescGZIP() []byte {
	file_chinese_poker_game_api_proto_rawDescOnce.Do(func() {
		file_chinese_poker_game_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chinese_poker_game_api_proto_rawDesc), len(file_chinese_poker_game_api_proto_rawDesc)))
	})
	return file_chinese_poker_game_api_proto_rawDescData
}

var file_chinese_poker_game_api_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_chinese_poker_game_api_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_chinese_poker_game_api_proto_goTypes = []any{
	(CardStatus)(0),           // 0: api.CardStatus
	(CardSuit)(0),             // 1: api.CardSuit
	(CardRank)(0),             // 2: api.CardRank
	(ChoiceCode)(0),           // 3: api.ChoiceCode
	(OpCodeRequest)(0),        // 4: api.OpCodeRequest
	(OpCodeUpdate)(0),         // 5: api.OpCodeUpdate
	(GameState)(0),            // 6: api.GameState
	(CardEvent)(0),            // 7: api.CardEvent
	(HandRanking)(0),          // 8: api.HandRanking
	(HandBonusType)(0),        // 9: api.HandBonusType
	(PointType)(0),            // 10: api.PointType
	(*Card)(nil),              // 11: api.Card
	(*ListCard)(nil),          // 12: api.ListCard
	(*NewGame)(nil),           // 13: api.NewGame
	(*Organize)(nil),          // 14: api.Organize
	(*UpdateTable)(nil),       // 15: api.UpdateTable
	(*PresenceCards)(nil),     // 16: api.PresenceCards
	(*UpdateDeal)(nil),        // 17: api.UpdateDeal
	(*UpdateGameState)(nil),   // 18: api.UpdateGameState
	(*ArrangeCard)(nil),       // 19: api.ArrangeCard
	(*HandBonus)(nil),         // 20: api.HandBonus
	(*HandResult)(nil),        // 21: api.HandResult
	(*PointResult)(nil),       // 22: api.PointResult
	(*ScoreResult)(nil),       // 23: api.ScoreResult
	(*ComparisonResult)(nil),  // 24: api.ComparisonResult
	(*UpdateFinish)(nil),      // 25: api.UpdateFinish
	(*BalanceUpdate)(nil),     // 26: api.BalanceUpdate
	(*BalanceResult)(nil),     // 27: api.BalanceResult
	(*Player)(nil),            // 28: api.Player
	(*Jackpot)(nil),           // 29: api.Jackpot
	(*HitJackpotHistory)(nil), // 30: api.HitJackpotHistory
	nil,                       // 31: api.UpdateDeal.CardEventEntry
}
var file_chinese_poker_game_api_proto_depIdxs = []int32{
	2,  // 0: api.Card.rank:type_name -> api.CardRank
	1,  // 1: api.Card.suit:type_name -> api.CardSuit
	0,  // 2: api.Card.status:type_name -> api.CardStatus
	11, // 3: api.ListCard.cards:type_name -> api.Card
	12, // 4: api.Organize.cards:type_name -> api.ListCard
	28, // 5: api.UpdateTable.players:type_name -> api.Player
	28, // 6: api.UpdateTable.playing_players:type_name -> api.Player
	28, // 7: api.UpdateTable.join_players:type_name -> api.Player
	28, // 8: api.UpdateTable.leave_players:type_name -> api.Player
	6,  // 9: api.UpdateTable.game_state:type_name -> api.GameState
	29, // 10: api.UpdateTable.jp_treasure:type_name -> api.Jackpot
	11, // 11: api.PresenceCards.cards:type_name -> api.Card
	16, // 12: api.UpdateDeal.presence_card:type_name -> api.PresenceCards
	31, // 13: api.UpdateDeal.card_event:type_name -> api.UpdateDeal.CardEventEntry
	6,  // 14: api.UpdateGameState.state:type_name -> api.GameState
	19, // 15: api.UpdateGameState.arrange_card:type_name -> api.ArrangeCard
	16, // 16: api.UpdateGameState.presenceCards:type_name -> api.PresenceCards
	7,  // 17: api.ArrangeCard.card_event:type_name -> api.CardEvent
	9,  // 18: api.HandBonus.type:type_name -> api.HandBonusType
	8,  // 19: api.HandResult.ranking:type_name -> api.HandRanking
	21, // 20: api.PointResult.front:type_name -> api.HandResult
	21, // 21: api.PointResult.middle:type_name -> api.HandResult
	21, // 22: api.PointResult.back:type_name -> api.HandResult
	21, // 23: api.PointResult.natural:type_name -> api.HandResult
	10, // 24: api.PointResult.type:type_name -> api.PointType
	23, // 25: api.ComparisonResult.score_result:type_name -> api.ScoreResult
	22, // 26: api.ComparisonResult.point_result:type_name -> api.PointResult
	24, // 27: api.UpdateFinish.results:type_name -> api.ComparisonResult
	20, // 28: api.UpdateFinish.bonuses:type_name -> api.HandBonus
	29, // 29: api.UpdateFinish.jackpot:type_name -> api.Jackpot
	29, // 30: api.UpdateFinish.jp_treasure:type_name -> api.Jackpot
	26, // 31: api.BalanceResult.updates:type_name -> api.BalanceUpdate
	29, // 32: api.BalanceResult.jackpot:type_name -> api.Jackpot
	0,  // 33: api.Player.card_status:type_name -> api.CardStatus
	12, // 34: api.Player.cards:type_name -> api.ListCard
	7,  // 35: api.UpdateDeal.CardEventEntry.value:type_name -> api.CardEvent
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_chinese_poker_game_api_proto_init() }
func file_chinese_poker_game_api_proto_init() {
	if File_chinese_poker_game_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chinese_poker_game_api_proto_rawDesc), len(file_chinese_poker_game_api_proto_rawDesc)),
			NumEnums:      11,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chinese_poker_game_api_proto_goTypes,
		DependencyIndexes: file_chinese_poker_game_api_proto_depIdxs,
		EnumInfos:         file_chinese_poker_game_api_proto_enumTypes,
		MessageInfos:      file_chinese_poker_game_api_proto_msgTypes,
	}.Build()
	File_chinese_poker_game_api_proto = out.File
	file_chinese_poker_game_api_proto_goTypes = nil
	file_chinese_poker_game_api_proto_depIdxs = nil
}
