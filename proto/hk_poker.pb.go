// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: hk_poker.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Player action in betting
type HKPokerAction int32

const (
	HKPokerAction_HK_ACTION_NONE   HKPokerAction = 0
	HKPokerAction_HK_ACTION_FOLD   HKPokerAction = 1
	HKPokerAction_HK_ACTION_CHECK  HKPokerAction = 2
	HKPokerAction_HK_ACTION_CALL   HKPokerAction = 3
	HKPokerAction_HK_ACTION_RAISE  HKPokerAction = 4
	HKPokerAction_HK_ACTION_BET    HKPokerAction = 5
	HKPokerAction_HK_ACTION_ALL_IN HKPokerAction = 6
)

// Enum value maps for HKPokerAction.
var (
	HKPokerAction_name = map[int32]string{
		0: "HK_ACTION_NONE",
		1: "HK_ACTION_FOLD",
		2: "HK_ACTION_CHECK",
		3: "HK_ACTION_CALL",
		4: "HK_ACTION_RAISE",
		5: "HK_ACTION_BET",
		6: "HK_ACTION_ALL_IN",
	}
	HKPokerAction_value = map[string]int32{
		"HK_ACTION_NONE":   0,
		"HK_ACTION_FOLD":   1,
		"HK_ACTION_CHECK":  2,
		"HK_ACTION_CALL":   3,
		"HK_ACTION_RAISE":  4,
		"HK_ACTION_BET":    5,
		"HK_ACTION_ALL_IN": 6,
	}
)

func (x HKPokerAction) Enum() *HKPokerAction {
	p := new(HKPokerAction)
	*p = x
	return p
}

func (x HKPokerAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HKPokerAction) Descriptor() protoreflect.EnumDescriptor {
	return file_hk_poker_proto_enumTypes[0].Descriptor()
}

func (HKPokerAction) Type() protoreflect.EnumType {
	return &file_hk_poker_proto_enumTypes[0]
}

func (x HKPokerAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HKPokerAction.Descriptor instead.
func (HKPokerAction) EnumDescriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{0}
}

// Betting round
type HKPokerRound int32

const (
	HKPokerRound_HK_ROUND_PRE_FLOP HKPokerRound = 0 // 2 cards (1 face down, 1 face up)
	HKPokerRound_HK_ROUND_3_CARD   HKPokerRound = 1 // 3 cards
	HKPokerRound_HK_ROUND_4_CARD   HKPokerRound = 2 // 4 cards (with card swap option)
	HKPokerRound_HK_ROUND_5_CARD   HKPokerRound = 3 // 5 cards (final betting)
	HKPokerRound_HK_ROUND_SHOWDOWN HKPokerRound = 4 // Show cards and determine winner
)

// Enum value maps for HKPokerRound.
var (
	HKPokerRound_name = map[int32]string{
		0: "HK_ROUND_PRE_FLOP",
		1: "HK_ROUND_3_CARD",
		2: "HK_ROUND_4_CARD",
		3: "HK_ROUND_5_CARD",
		4: "HK_ROUND_SHOWDOWN",
	}
	HKPokerRound_value = map[string]int32{
		"HK_ROUND_PRE_FLOP": 0,
		"HK_ROUND_3_CARD":   1,
		"HK_ROUND_4_CARD":   2,
		"HK_ROUND_5_CARD":   3,
		"HK_ROUND_SHOWDOWN": 4,
	}
)

func (x HKPokerRound) Enum() *HKPokerRound {
	p := new(HKPokerRound)
	*p = x
	return p
}

func (x HKPokerRound) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HKPokerRound) Descriptor() protoreflect.EnumDescriptor {
	return file_hk_poker_proto_enumTypes[1].Descriptor()
}

func (HKPokerRound) Type() protoreflect.EnumType {
	return &file_hk_poker_proto_enumTypes[1]
}

func (x HKPokerRound) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HKPokerRound.Descriptor instead.
func (HKPokerRound) EnumDescriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{1}
}

// Hand ranking for HK Poker
type HKPokerHandRank int32

const (
	HKPokerHandRank_HK_HIGH_CARD       HKPokerHandRank = 0 // Mậu thầu
	HKPokerHandRank_HK_ONE_PAIR        HKPokerHandRank = 1 // Đôi
	HKPokerHandRank_HK_TWO_PAIR        HKPokerHandRank = 2 // Thú
	HKPokerHandRank_HK_THREE_OF_A_KIND HKPokerHandRank = 3 // Sám
	HKPokerHandRank_HK_STRAIGHT        HKPokerHandRank = 4 // Sảnh
	HKPokerHandRank_HK_FLUSH           HKPokerHandRank = 5 // Thùng
	HKPokerHandRank_HK_FULL_HOUSE      HKPokerHandRank = 6 // Cù lũ
	HKPokerHandRank_HK_FOUR_OF_A_KIND  HKPokerHandRank = 7 // Tứ quý
	HKPokerHandRank_HK_STRAIGHT_FLUSH  HKPokerHandRank = 8 // Thùng phá sảnh (TPS)
)

// Enum value maps for HKPokerHandRank.
var (
	HKPokerHandRank_name = map[int32]string{
		0: "HK_HIGH_CARD",
		1: "HK_ONE_PAIR",
		2: "HK_TWO_PAIR",
		3: "HK_THREE_OF_A_KIND",
		4: "HK_STRAIGHT",
		5: "HK_FLUSH",
		6: "HK_FULL_HOUSE",
		7: "HK_FOUR_OF_A_KIND",
		8: "HK_STRAIGHT_FLUSH",
	}
	HKPokerHandRank_value = map[string]int32{
		"HK_HIGH_CARD":       0,
		"HK_ONE_PAIR":        1,
		"HK_TWO_PAIR":        2,
		"HK_THREE_OF_A_KIND": 3,
		"HK_STRAIGHT":        4,
		"HK_FLUSH":           5,
		"HK_FULL_HOUSE":      6,
		"HK_FOUR_OF_A_KIND":  7,
		"HK_STRAIGHT_FLUSH":  8,
	}
)

func (x HKPokerHandRank) Enum() *HKPokerHandRank {
	p := new(HKPokerHandRank)
	*p = x
	return p
}

func (x HKPokerHandRank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HKPokerHandRank) Descriptor() protoreflect.EnumDescriptor {
	return file_hk_poker_proto_enumTypes[2].Descriptor()
}

func (HKPokerHandRank) Type() protoreflect.EnumType {
	return &file_hk_poker_proto_enumTypes[2]
}

func (x HKPokerHandRank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HKPokerHandRank.Descriptor instead.
func (HKPokerHandRank) EnumDescriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{2}
}

// Player betting state
type HKPlayerBettingState struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UserId          string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TotalBet        int64                  `protobuf:"varint,2,opt,name=total_bet,json=totalBet,proto3" json:"total_bet,omitempty"`                        // Total amount bet in this hand
	CurrentRoundBet int64                  `protobuf:"varint,3,opt,name=current_round_bet,json=currentRoundBet,proto3" json:"current_round_bet,omitempty"` // Amount bet in current round
	Stack           int64                  `protobuf:"varint,4,opt,name=stack,proto3" json:"stack,omitempty"`                                              // Remaining chips
	Action          HKPokerAction          `protobuf:"varint,5,opt,name=action,proto3,enum=proto.HKPokerAction" json:"action,omitempty"`                   // Last action taken
	HasActed        bool                   `protobuf:"varint,6,opt,name=has_acted,json=hasActed,proto3" json:"has_acted,omitempty"`                        // Whether player has acted in current round
	IsFolded        bool                   `protobuf:"varint,7,opt,name=is_folded,json=isFolded,proto3" json:"is_folded,omitempty"`                        // Whether player has folded
	IsAllIn         bool                   `protobuf:"varint,8,opt,name=is_all_in,json=isAllIn,proto3" json:"is_all_in,omitempty"`                         // Whether player is all-in
	CanSwap         bool                   `protobuf:"varint,9,opt,name=can_swap,json=canSwap,proto3" json:"can_swap,omitempty"`                           // Whether player can swap card (Round 4 only)
	HasSwapped      bool                   `protobuf:"varint,10,opt,name=has_swapped,json=hasSwapped,proto3" json:"has_swapped,omitempty"`                 // Whether player has swapped card
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HKPlayerBettingState) Reset() {
	*x = HKPlayerBettingState{}
	mi := &file_hk_poker_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKPlayerBettingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKPlayerBettingState) ProtoMessage() {}

func (x *HKPlayerBettingState) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKPlayerBettingState.ProtoReflect.Descriptor instead.
func (*HKPlayerBettingState) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{0}
}

func (x *HKPlayerBettingState) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HKPlayerBettingState) GetTotalBet() int64 {
	if x != nil {
		return x.TotalBet
	}
	return 0
}

func (x *HKPlayerBettingState) GetCurrentRoundBet() int64 {
	if x != nil {
		return x.CurrentRoundBet
	}
	return 0
}

func (x *HKPlayerBettingState) GetStack() int64 {
	if x != nil {
		return x.Stack
	}
	return 0
}

func (x *HKPlayerBettingState) GetAction() HKPokerAction {
	if x != nil {
		return x.Action
	}
	return HKPokerAction_HK_ACTION_NONE
}

func (x *HKPlayerBettingState) GetHasActed() bool {
	if x != nil {
		return x.HasActed
	}
	return false
}

func (x *HKPlayerBettingState) GetIsFolded() bool {
	if x != nil {
		return x.IsFolded
	}
	return false
}

func (x *HKPlayerBettingState) GetIsAllIn() bool {
	if x != nil {
		return x.IsAllIn
	}
	return false
}

func (x *HKPlayerBettingState) GetCanSwap() bool {
	if x != nil {
		return x.CanSwap
	}
	return false
}

func (x *HKPlayerBettingState) GetHasSwapped() bool {
	if x != nil {
		return x.HasSwapped
	}
	return false
}

// Betting state for the table
type HKBettingState struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	Round           HKPokerRound            `protobuf:"varint,1,opt,name=round,proto3,enum=proto.HKPokerRound" json:"round,omitempty"`
	CurrentBet      int64                   `protobuf:"varint,2,opt,name=current_bet,json=currentBet,proto3" json:"current_bet,omitempty"`             // Current bet to call
	MinRaise        int64                   `protobuf:"varint,3,opt,name=min_raise,json=minRaise,proto3" json:"min_raise,omitempty"`                   // Minimum raise amount
	CurrentPlayer   string                  `protobuf:"bytes,4,opt,name=current_player,json=currentPlayer,proto3" json:"current_player,omitempty"`     // UserId of player whose turn it is
	DealerPosition  int32                   `protobuf:"varint,5,opt,name=dealer_position,json=dealerPosition,proto3" json:"dealer_position,omitempty"` // Position of dealer button
	FirstBettor     string                  `protobuf:"bytes,6,opt,name=first_bettor,json=firstBettor,proto3" json:"first_bettor,omitempty"`           // First player to act in this round
	PlayerStates    []*HKPlayerBettingState `protobuf:"bytes,7,rep,name=player_states,json=playerStates,proto3" json:"player_states,omitempty"`
	AllPlayersActed bool                    `protobuf:"varint,8,opt,name=all_players_acted,json=allPlayersActed,proto3" json:"all_players_acted,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HKBettingState) Reset() {
	*x = HKBettingState{}
	mi := &file_hk_poker_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKBettingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKBettingState) ProtoMessage() {}

func (x *HKBettingState) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKBettingState.ProtoReflect.Descriptor instead.
func (*HKBettingState) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{1}
}

func (x *HKBettingState) GetRound() HKPokerRound {
	if x != nil {
		return x.Round
	}
	return HKPokerRound_HK_ROUND_PRE_FLOP
}

func (x *HKBettingState) GetCurrentBet() int64 {
	if x != nil {
		return x.CurrentBet
	}
	return 0
}

func (x *HKBettingState) GetMinRaise() int64 {
	if x != nil {
		return x.MinRaise
	}
	return 0
}

func (x *HKBettingState) GetCurrentPlayer() string {
	if x != nil {
		return x.CurrentPlayer
	}
	return ""
}

func (x *HKBettingState) GetDealerPosition() int32 {
	if x != nil {
		return x.DealerPosition
	}
	return 0
}

func (x *HKBettingState) GetFirstBettor() string {
	if x != nil {
		return x.FirstBettor
	}
	return ""
}

func (x *HKBettingState) GetPlayerStates() []*HKPlayerBettingState {
	if x != nil {
		return x.PlayerStates
	}
	return nil
}

func (x *HKBettingState) GetAllPlayersActed() bool {
	if x != nil {
		return x.AllPlayersActed
	}
	return false
}

// Pot information
type HKPot struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Amount          int64                  `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	EligiblePlayers []string               `protobuf:"bytes,2,rep,name=eligible_players,json=eligiblePlayers,proto3" json:"eligible_players,omitempty"`
	CapAmount       int64                  `protobuf:"varint,3,opt,name=cap_amount,json=capAmount,proto3" json:"cap_amount,omitempty"` // Cap amount for side pots
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HKPot) Reset() {
	*x = HKPot{}
	mi := &file_hk_poker_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKPot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKPot) ProtoMessage() {}

func (x *HKPot) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKPot.ProtoReflect.Descriptor instead.
func (*HKPot) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{2}
}

func (x *HKPot) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HKPot) GetEligiblePlayers() []string {
	if x != nil {
		return x.EligiblePlayers
	}
	return nil
}

func (x *HKPot) GetCapAmount() int64 {
	if x != nil {
		return x.CapAmount
	}
	return 0
}

// Pot manager state
type HKPotInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pots          []*HKPot               `protobuf:"bytes,1,rep,name=pots,proto3" json:"pots,omitempty"`
	TotalPot      int64                  `protobuf:"varint,2,opt,name=total_pot,json=totalPot,proto3" json:"total_pot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HKPotInfo) Reset() {
	*x = HKPotInfo{}
	mi := &file_hk_poker_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKPotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKPotInfo) ProtoMessage() {}

func (x *HKPotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKPotInfo.ProtoReflect.Descriptor instead.
func (*HKPotInfo) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{3}
}

func (x *HKPotInfo) GetPots() []*HKPot {
	if x != nil {
		return x.Pots
	}
	return nil
}

func (x *HKPotInfo) GetTotalPot() int64 {
	if x != nil {
		return x.TotalPot
	}
	return 0
}

// Request to perform action
type HKPlayerActionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Action        HKPokerAction          `protobuf:"varint,1,opt,name=action,proto3,enum=proto.HKPokerAction" json:"action,omitempty"`
	Amount        int64                  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"` // Amount for bet/raise
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HKPlayerActionRequest) Reset() {
	*x = HKPlayerActionRequest{}
	mi := &file_hk_poker_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKPlayerActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKPlayerActionRequest) ProtoMessage() {}

func (x *HKPlayerActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKPlayerActionRequest.ProtoReflect.Descriptor instead.
func (*HKPlayerActionRequest) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{4}
}

func (x *HKPlayerActionRequest) GetAction() HKPokerAction {
	if x != nil {
		return x.Action
	}
	return HKPokerAction_HK_ACTION_NONE
}

func (x *HKPlayerActionRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Request to swap card in Round 4
type HKCardSwapRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SwapCard      bool                   `protobuf:"varint,1,opt,name=swap_card,json=swapCard,proto3" json:"swap_card,omitempty"` // True to swap face-down card with 4th card
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HKCardSwapRequest) Reset() {
	*x = HKCardSwapRequest{}
	mi := &file_hk_poker_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKCardSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKCardSwapRequest) ProtoMessage() {}

func (x *HKCardSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKCardSwapRequest.ProtoReflect.Descriptor instead.
func (*HKCardSwapRequest) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{5}
}

func (x *HKCardSwapRequest) GetSwapCard() bool {
	if x != nil {
		return x.SwapCard
	}
	return false
}

// Update for player action
type HKUpdatePlayerAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Action        HKPokerAction          `protobuf:"varint,2,opt,name=action,proto3,enum=proto.HKPokerAction" json:"action,omitempty"`
	Amount        int64                  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	NewPot        int64                  `protobuf:"varint,4,opt,name=new_pot,json=newPot,proto3" json:"new_pot,omitempty"`
	BettingState  *HKBettingState        `protobuf:"bytes,5,opt,name=betting_state,json=bettingState,proto3" json:"betting_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HKUpdatePlayerAction) Reset() {
	*x = HKUpdatePlayerAction{}
	mi := &file_hk_poker_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKUpdatePlayerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKUpdatePlayerAction) ProtoMessage() {}

func (x *HKUpdatePlayerAction) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKUpdatePlayerAction.ProtoReflect.Descriptor instead.
func (*HKUpdatePlayerAction) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{6}
}

func (x *HKUpdatePlayerAction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HKUpdatePlayerAction) GetAction() HKPokerAction {
	if x != nil {
		return x.Action
	}
	return HKPokerAction_HK_ACTION_NONE
}

func (x *HKUpdatePlayerAction) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HKUpdatePlayerAction) GetNewPot() int64 {
	if x != nil {
		return x.NewPot
	}
	return 0
}

func (x *HKUpdatePlayerAction) GetBettingState() *HKBettingState {
	if x != nil {
		return x.BettingState
	}
	return nil
}

// Update for dealing cards in HK Poker
type HKUpdateDeal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerCards   []*HKPlayerCards       `protobuf:"bytes,1,rep,name=player_cards,json=playerCards,proto3" json:"player_cards,omitempty"`
	FirstBettor   string                 `protobuf:"bytes,2,opt,name=first_bettor,json=firstBettor,proto3" json:"first_bettor,omitempty"`
	Round         HKPokerRound           `protobuf:"varint,3,opt,name=round,proto3,enum=proto.HKPokerRound" json:"round,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HKUpdateDeal) Reset() {
	*x = HKUpdateDeal{}
	mi := &file_hk_poker_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKUpdateDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKUpdateDeal) ProtoMessage() {}

func (x *HKUpdateDeal) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKUpdateDeal.ProtoReflect.Descriptor instead.
func (*HKUpdateDeal) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{7}
}

func (x *HKUpdateDeal) GetPlayerCards() []*HKPlayerCards {
	if x != nil {
		return x.PlayerCards
	}
	return nil
}

func (x *HKUpdateDeal) GetFirstBettor() string {
	if x != nil {
		return x.FirstBettor
	}
	return ""
}

func (x *HKUpdateDeal) GetRound() HKPokerRound {
	if x != nil {
		return x.Round
	}
	return HKPokerRound_HK_ROUND_PRE_FLOP
}

// Player cards (face up and face down)
type HKPlayerCards struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FaceUpCards   []*Card                `protobuf:"bytes,2,rep,name=face_up_cards,json=faceUpCards,proto3" json:"face_up_cards,omitempty"`       // Visible cards
	FaceDownCards []*Card                `protobuf:"bytes,3,rep,name=face_down_cards,json=faceDownCards,proto3" json:"face_down_cards,omitempty"` // Hidden cards (only sent to owner)
	AllCards      []*Card                `protobuf:"bytes,4,rep,name=all_cards,json=allCards,proto3" json:"all_cards,omitempty"`                  // All 5 cards (for showdown)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HKPlayerCards) Reset() {
	*x = HKPlayerCards{}
	mi := &file_hk_poker_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKPlayerCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKPlayerCards) ProtoMessage() {}

func (x *HKPlayerCards) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKPlayerCards.ProtoReflect.Descriptor instead.
func (*HKPlayerCards) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{8}
}

func (x *HKPlayerCards) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HKPlayerCards) GetFaceUpCards() []*Card {
	if x != nil {
		return x.FaceUpCards
	}
	return nil
}

func (x *HKPlayerCards) GetFaceDownCards() []*Card {
	if x != nil {
		return x.FaceDownCards
	}
	return nil
}

func (x *HKPlayerCards) GetAllCards() []*Card {
	if x != nil {
		return x.AllCards
	}
	return nil
}

// Update for card swap
type HKUpdateCardSwap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Swapped       bool                   `protobuf:"varint,2,opt,name=swapped,proto3" json:"swapped,omitempty"`
	NewFaceUpCard *Card                  `protobuf:"bytes,3,opt,name=new_face_up_card,json=newFaceUpCard,proto3" json:"new_face_up_card,omitempty"` // The card that became face up after swap
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HKUpdateCardSwap) Reset() {
	*x = HKUpdateCardSwap{}
	mi := &file_hk_poker_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKUpdateCardSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKUpdateCardSwap) ProtoMessage() {}

func (x *HKUpdateCardSwap) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKUpdateCardSwap.ProtoReflect.Descriptor instead.
func (*HKUpdateCardSwap) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{9}
}

func (x *HKUpdateCardSwap) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HKUpdateCardSwap) GetSwapped() bool {
	if x != nil {
		return x.Swapped
	}
	return false
}

func (x *HKUpdateCardSwap) GetNewFaceUpCard() *Card {
	if x != nil {
		return x.NewFaceUpCard
	}
	return nil
}

// Update for new betting round
type HKUpdateNewRound struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Round         HKPokerRound           `protobuf:"varint,1,opt,name=round,proto3,enum=proto.HKPokerRound" json:"round,omitempty"`
	PlayerCards   []*HKPlayerCards       `protobuf:"bytes,2,rep,name=player_cards,json=playerCards,proto3" json:"player_cards,omitempty"`
	FirstBettor   string                 `protobuf:"bytes,3,opt,name=first_bettor,json=firstBettor,proto3" json:"first_bettor,omitempty"`
	BettingState  *HKBettingState        `protobuf:"bytes,4,opt,name=betting_state,json=bettingState,proto3" json:"betting_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HKUpdateNewRound) Reset() {
	*x = HKUpdateNewRound{}
	mi := &file_hk_poker_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKUpdateNewRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKUpdateNewRound) ProtoMessage() {}

func (x *HKUpdateNewRound) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKUpdateNewRound.ProtoReflect.Descriptor instead.
func (*HKUpdateNewRound) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{10}
}

func (x *HKUpdateNewRound) GetRound() HKPokerRound {
	if x != nil {
		return x.Round
	}
	return HKPokerRound_HK_ROUND_PRE_FLOP
}

func (x *HKUpdateNewRound) GetPlayerCards() []*HKPlayerCards {
	if x != nil {
		return x.PlayerCards
	}
	return nil
}

func (x *HKUpdateNewRound) GetFirstBettor() string {
	if x != nil {
		return x.FirstBettor
	}
	return ""
}

func (x *HKUpdateNewRound) GetBettingState() *HKBettingState {
	if x != nil {
		return x.BettingState
	}
	return nil
}

// Hand result for HK Poker
type HKHandResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	HandRank      HKPokerHandRank        `protobuf:"varint,2,opt,name=hand_rank,json=handRank,proto3,enum=proto.HKPokerHandRank" json:"hand_rank,omitempty"`
	HandName      string                 `protobuf:"bytes,3,opt,name=hand_name,json=handName,proto3" json:"hand_name,omitempty"`
	Cards         []*Card                `protobuf:"bytes,4,rep,name=cards,proto3" json:"cards,omitempty"`
	Winnings      int64                  `protobuf:"varint,5,opt,name=winnings,proto3" json:"winnings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HKHandResult) Reset() {
	*x = HKHandResult{}
	mi := &file_hk_poker_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKHandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKHandResult) ProtoMessage() {}

func (x *HKHandResult) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKHandResult.ProtoReflect.Descriptor instead.
func (*HKHandResult) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{11}
}

func (x *HKHandResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HKHandResult) GetHandRank() HKPokerHandRank {
	if x != nil {
		return x.HandRank
	}
	return HKPokerHandRank_HK_HIGH_CARD
}

func (x *HKHandResult) GetHandName() string {
	if x != nil {
		return x.HandName
	}
	return ""
}

func (x *HKHandResult) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *HKHandResult) GetWinnings() int64 {
	if x != nil {
		return x.Winnings
	}
	return 0
}

// Update for showdown
type HKUpdateShowdown struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HandResults   []*HKHandResult        `protobuf:"bytes,1,rep,name=hand_results,json=handResults,proto3" json:"hand_results,omitempty"`
	PotInfo       *HKPotInfo             `protobuf:"bytes,2,opt,name=pot_info,json=potInfo,proto3" json:"pot_info,omitempty"`
	Winners       []string               `protobuf:"bytes,3,rep,name=winners,proto3" json:"winners,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HKUpdateShowdown) Reset() {
	*x = HKUpdateShowdown{}
	mi := &file_hk_poker_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKUpdateShowdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKUpdateShowdown) ProtoMessage() {}

func (x *HKUpdateShowdown) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKUpdateShowdown.ProtoReflect.Descriptor instead.
func (*HKUpdateShowdown) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{12}
}

func (x *HKUpdateShowdown) GetHandResults() []*HKHandResult {
	if x != nil {
		return x.HandResults
	}
	return nil
}

func (x *HKUpdateShowdown) GetPotInfo() *HKPotInfo {
	if x != nil {
		return x.PotInfo
	}
	return nil
}

func (x *HKUpdateShowdown) GetWinners() []string {
	if x != nil {
		return x.Winners
	}
	return nil
}

// Update for game state (extends UpdateGameState)
type HKUpdateGameState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         GameState              `protobuf:"varint,1,opt,name=state,proto3,enum=proto.GameState" json:"state,omitempty"`
	CountDown     int64                  `protobuf:"varint,2,opt,name=count_down,json=countDown,proto3" json:"count_down,omitempty"`
	BettingState  *HKBettingState        `protobuf:"bytes,3,opt,name=betting_state,json=bettingState,proto3" json:"betting_state,omitempty"`
	PotInfo       *HKPotInfo             `protobuf:"bytes,4,opt,name=pot_info,json=potInfo,proto3" json:"pot_info,omitempty"`
	PlayerCards   []*HKPlayerCards       `protobuf:"bytes,5,rep,name=player_cards,json=playerCards,proto3" json:"player_cards,omitempty"`
	CurrentPlayer string                 `protobuf:"bytes,6,opt,name=current_player,json=currentPlayer,proto3" json:"current_player,omitempty"`
	Round         HKPokerRound           `protobuf:"varint,7,opt,name=round,proto3,enum=proto.HKPokerRound" json:"round,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HKUpdateGameState) Reset() {
	*x = HKUpdateGameState{}
	mi := &file_hk_poker_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKUpdateGameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKUpdateGameState) ProtoMessage() {}

func (x *HKUpdateGameState) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKUpdateGameState.ProtoReflect.Descriptor instead.
func (*HKUpdateGameState) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{13}
}

func (x *HKUpdateGameState) GetState() GameState {
	if x != nil {
		return x.State
	}
	return GameState_GAME_STATE_UNKNOWN
}

func (x *HKUpdateGameState) GetCountDown() int64 {
	if x != nil {
		return x.CountDown
	}
	return 0
}

func (x *HKUpdateGameState) GetBettingState() *HKBettingState {
	if x != nil {
		return x.BettingState
	}
	return nil
}

func (x *HKUpdateGameState) GetPotInfo() *HKPotInfo {
	if x != nil {
		return x.PotInfo
	}
	return nil
}

func (x *HKUpdateGameState) GetPlayerCards() []*HKPlayerCards {
	if x != nil {
		return x.PlayerCards
	}
	return nil
}

func (x *HKUpdateGameState) GetCurrentPlayer() string {
	if x != nil {
		return x.CurrentPlayer
	}
	return ""
}

func (x *HKUpdateGameState) GetRound() HKPokerRound {
	if x != nil {
		return x.Round
	}
	return HKPokerRound_HK_ROUND_PRE_FLOP
}

// Finish result for HK Poker
type HKUpdateFinish struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*HKHandResult        `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	PotInfo       *HKPotInfo             `protobuf:"bytes,2,opt,name=pot_info,json=potInfo,proto3" json:"pot_info,omitempty"`
	Jackpot       *Jackpot               `protobuf:"bytes,3,opt,name=jackpot,proto3" json:"jackpot,omitempty"`
	JpTreasure    *Jackpot               `protobuf:"bytes,4,opt,name=jp_treasure,json=jpTreasure,proto3" json:"jp_treasure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HKUpdateFinish) Reset() {
	*x = HKUpdateFinish{}
	mi := &file_hk_poker_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HKUpdateFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HKUpdateFinish) ProtoMessage() {}

func (x *HKUpdateFinish) ProtoReflect() protoreflect.Message {
	mi := &file_hk_poker_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HKUpdateFinish.ProtoReflect.Descriptor instead.
func (*HKUpdateFinish) Descriptor() ([]byte, []int) {
	return file_hk_poker_proto_rawDescGZIP(), []int{14}
}

func (x *HKUpdateFinish) GetResults() []*HKHandResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *HKUpdateFinish) GetPotInfo() *HKPotInfo {
	if x != nil {
		return x.PotInfo
	}
	return nil
}

func (x *HKUpdateFinish) GetJackpot() *Jackpot {
	if x != nil {
		return x.Jackpot
	}
	return nil
}

func (x *HKUpdateFinish) GetJpTreasure() *Jackpot {
	if x != nil {
		return x.JpTreasure
	}
	return nil
}

var File_hk_poker_proto protoreflect.FileDescriptor

const file_hk_poker_proto_rawDesc = "" +
	"\n" +
	"\x0ehk_poker.proto\x12\x05proto\x1a\x11game_common.proto\x1a\x13chinese_poker.proto\"\xce\x02\n" +
	"\x14HKPlayerBettingState\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1b\n" +
	"\ttotal_bet\x18\x02 \x01(\x03R\btotalBet\x12*\n" +
	"\x11current_round_bet\x18\x03 \x01(\x03R\x0fcurrentRoundBet\x12\x14\n" +
	"\x05stack\x18\x04 \x01(\x03R\x05stack\x12,\n" +
	"\x06action\x18\x05 \x01(\x0e2\x14.proto.HKPokerActionR\x06action\x12\x1b\n" +
	"\thas_acted\x18\x06 \x01(\bR\bhasActed\x12\x1b\n" +
	"\tis_folded\x18\a \x01(\bR\bisFolded\x12\x1a\n" +
	"\tis_all_in\x18\b \x01(\bR\aisAllIn\x12\x19\n" +
	"\bcan_swap\x18\t \x01(\bR\acanSwap\x12\x1f\n" +
	"\vhas_swapped\x18\n" +
	" \x01(\bR\n" +
	"hasSwapped\"\xda\x02\n" +
	"\x0eHKBettingState\x12)\n" +
	"\x05round\x18\x01 \x01(\x0e2\x13.proto.HKPokerRoundR\x05round\x12\x1f\n" +
	"\vcurrent_bet\x18\x02 \x01(\x03R\n" +
	"currentBet\x12\x1b\n" +
	"\tmin_raise\x18\x03 \x01(\x03R\bminRaise\x12%\n" +
	"\x0ecurrent_player\x18\x04 \x01(\tR\rcurrentPlayer\x12'\n" +
	"\x0fdealer_position\x18\x05 \x01(\x05R\x0edealerPosition\x12!\n" +
	"\ffirst_bettor\x18\x06 \x01(\tR\vfirstBettor\x12@\n" +
	"\rplayer_states\x18\a \x03(\v2\x1b.proto.HKPlayerBettingStateR\fplayerStates\x12*\n" +
	"\x11all_players_acted\x18\b \x01(\bR\x0fallPlayersActed\"i\n" +
	"\x05HKPot\x12\x16\n" +
	"\x06amount\x18\x01 \x01(\x03R\x06amount\x12)\n" +
	"\x10eligible_players\x18\x02 \x03(\tR\x0feligiblePlayers\x12\x1d\n" +
	"\n" +
	"cap_amount\x18\x03 \x01(\x03R\tcapAmount\"J\n" +
	"\tHKPotInfo\x12 \n" +
	"\x04pots\x18\x01 \x03(\v2\f.proto.HKPotR\x04pots\x12\x1b\n" +
	"\ttotal_pot\x18\x02 \x01(\x03R\btotalPot\"]\n" +
	"\x15HKPlayerActionRequest\x12,\n" +
	"\x06action\x18\x01 \x01(\x0e2\x14.proto.HKPokerActionR\x06action\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x03R\x06amount\"0\n" +
	"\x11HKCardSwapRequest\x12\x1b\n" +
	"\tswap_card\x18\x01 \x01(\bR\bswapCard\"\xca\x01\n" +
	"\x14HKUpdatePlayerAction\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12,\n" +
	"\x06action\x18\x02 \x01(\x0e2\x14.proto.HKPokerActionR\x06action\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x03R\x06amount\x12\x17\n" +
	"\anew_pot\x18\x04 \x01(\x03R\x06newPot\x12:\n" +
	"\rbetting_state\x18\x05 \x01(\v2\x15.proto.HKBettingStateR\fbettingState\"\x95\x01\n" +
	"\fHKUpdateDeal\x127\n" +
	"\fplayer_cards\x18\x01 \x03(\v2\x14.proto.HKPlayerCardsR\vplayerCards\x12!\n" +
	"\ffirst_bettor\x18\x02 \x01(\tR\vfirstBettor\x12)\n" +
	"\x05round\x18\x03 \x01(\x0e2\x13.proto.HKPokerRoundR\x05round\"\xb8\x01\n" +
	"\rHKPlayerCards\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12/\n" +
	"\rface_up_cards\x18\x02 \x03(\v2\v.proto.CardR\vfaceUpCards\x123\n" +
	"\x0fface_down_cards\x18\x03 \x03(\v2\v.proto.CardR\rfaceDownCards\x12(\n" +
	"\tall_cards\x18\x04 \x03(\v2\v.proto.CardR\ballCards\"{\n" +
	"\x10HKUpdateCardSwap\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x18\n" +
	"\aswapped\x18\x02 \x01(\bR\aswapped\x124\n" +
	"\x10new_face_up_card\x18\x03 \x01(\v2\v.proto.CardR\rnewFaceUpCard\"\xd5\x01\n" +
	"\x10HKUpdateNewRound\x12)\n" +
	"\x05round\x18\x01 \x01(\x0e2\x13.proto.HKPokerRoundR\x05round\x127\n" +
	"\fplayer_cards\x18\x02 \x03(\v2\x14.proto.HKPlayerCardsR\vplayerCards\x12!\n" +
	"\ffirst_bettor\x18\x03 \x01(\tR\vfirstBettor\x12:\n" +
	"\rbetting_state\x18\x04 \x01(\v2\x15.proto.HKBettingStateR\fbettingState\"\xb8\x01\n" +
	"\fHKHandResult\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x123\n" +
	"\thand_rank\x18\x02 \x01(\x0e2\x16.proto.HKPokerHandRankR\bhandRank\x12\x1b\n" +
	"\thand_name\x18\x03 \x01(\tR\bhandName\x12!\n" +
	"\x05cards\x18\x04 \x03(\v2\v.proto.CardR\x05cards\x12\x1a\n" +
	"\bwinnings\x18\x05 \x01(\x03R\bwinnings\"\x91\x01\n" +
	"\x10HKUpdateShowdown\x126\n" +
	"\fhand_results\x18\x01 \x03(\v2\x13.proto.HKHandResultR\vhandResults\x12+\n" +
	"\bpot_info\x18\x02 \x01(\v2\x10.proto.HKPotInfoR\apotInfo\x12\x18\n" +
	"\awinners\x18\x03 \x03(\tR\awinners\"\xce\x02\n" +
	"\x11HKUpdateGameState\x12&\n" +
	"\x05state\x18\x01 \x01(\x0e2\x10.proto.GameStateR\x05state\x12\x1d\n" +
	"\n" +
	"count_down\x18\x02 \x01(\x03R\tcountDown\x12:\n" +
	"\rbetting_state\x18\x03 \x01(\v2\x15.proto.HKBettingStateR\fbettingState\x12+\n" +
	"\bpot_info\x18\x04 \x01(\v2\x10.proto.HKPotInfoR\apotInfo\x127\n" +
	"\fplayer_cards\x18\x05 \x03(\v2\x14.proto.HKPlayerCardsR\vplayerCards\x12%\n" +
	"\x0ecurrent_player\x18\x06 \x01(\tR\rcurrentPlayer\x12)\n" +
	"\x05round\x18\a \x01(\x0e2\x13.proto.HKPokerRoundR\x05round\"\xc7\x01\n" +
	"\x0eHKUpdateFinish\x12-\n" +
	"\aresults\x18\x01 \x03(\v2\x13.proto.HKHandResultR\aresults\x12+\n" +
	"\bpot_info\x18\x02 \x01(\v2\x10.proto.HKPotInfoR\apotInfo\x12(\n" +
	"\ajackpot\x18\x03 \x01(\v2\x0e.proto.JackpotR\ajackpot\x12/\n" +
	"\vjp_treasure\x18\x04 \x01(\v2\x0e.proto.JackpotR\n" +
	"jpTreasure*\x9e\x01\n" +
	"\rHKPokerAction\x12\x12\n" +
	"\x0eHK_ACTION_NONE\x10\x00\x12\x12\n" +
	"\x0eHK_ACTION_FOLD\x10\x01\x12\x13\n" +
	"\x0fHK_ACTION_CHECK\x10\x02\x12\x12\n" +
	"\x0eHK_ACTION_CALL\x10\x03\x12\x13\n" +
	"\x0fHK_ACTION_RAISE\x10\x04\x12\x11\n" +
	"\rHK_ACTION_BET\x10\x05\x12\x14\n" +
	"\x10HK_ACTION_ALL_IN\x10\x06*{\n" +
	"\fHKPokerRound\x12\x15\n" +
	"\x11HK_ROUND_PRE_FLOP\x10\x00\x12\x13\n" +
	"\x0fHK_ROUND_3_CARD\x10\x01\x12\x13\n" +
	"\x0fHK_ROUND_4_CARD\x10\x02\x12\x13\n" +
	"\x0fHK_ROUND_5_CARD\x10\x03\x12\x15\n" +
	"\x11HK_ROUND_SHOWDOWN\x10\x04*\xbd\x01\n" +
	"\x0fHKPokerHandRank\x12\x10\n" +
	"\fHK_HIGH_CARD\x10\x00\x12\x0f\n" +
	"\vHK_ONE_PAIR\x10\x01\x12\x0f\n" +
	"\vHK_TWO_PAIR\x10\x02\x12\x16\n" +
	"\x12HK_THREE_OF_A_KIND\x10\x03\x12\x0f\n" +
	"\vHK_STRAIGHT\x10\x04\x12\f\n" +
	"\bHK_FLUSH\x10\x05\x12\x11\n" +
	"\rHK_FULL_HOUSE\x10\x06\x12\x15\n" +
	"\x11HK_FOUR_OF_A_KIND\x10\a\x12\x15\n" +
	"\x11HK_STRAIGHT_FLUSH\x10\bB(Z&github.com/nk-nigeria/cgp-common/protob\x06proto3"

var (
	file_hk_poker_proto_rawDescOnce sync.Once
	file_hk_poker_proto_rawDescData []byte
)

func file_hk_poker_proto_rawDescGZIP() []byte {
	file_hk_poker_proto_rawDescOnce.Do(func() {
		file_hk_poker_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_hk_poker_proto_rawDesc), len(file_hk_poker_proto_rawDesc)))
	})
	return file_hk_poker_proto_rawDescData
}

var file_hk_poker_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_hk_poker_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_hk_poker_proto_goTypes = []any{
	(HKPokerAction)(0),            // 0: proto.HKPokerAction
	(HKPokerRound)(0),             // 1: proto.HKPokerRound
	(HKPokerHandRank)(0),          // 2: proto.HKPokerHandRank
	(*HKPlayerBettingState)(nil),  // 3: proto.HKPlayerBettingState
	(*HKBettingState)(nil),        // 4: proto.HKBettingState
	(*HKPot)(nil),                 // 5: proto.HKPot
	(*HKPotInfo)(nil),             // 6: proto.HKPotInfo
	(*HKPlayerActionRequest)(nil), // 7: proto.HKPlayerActionRequest
	(*HKCardSwapRequest)(nil),     // 8: proto.HKCardSwapRequest
	(*HKUpdatePlayerAction)(nil),  // 9: proto.HKUpdatePlayerAction
	(*HKUpdateDeal)(nil),          // 10: proto.HKUpdateDeal
	(*HKPlayerCards)(nil),         // 11: proto.HKPlayerCards
	(*HKUpdateCardSwap)(nil),      // 12: proto.HKUpdateCardSwap
	(*HKUpdateNewRound)(nil),      // 13: proto.HKUpdateNewRound
	(*HKHandResult)(nil),          // 14: proto.HKHandResult
	(*HKUpdateShowdown)(nil),      // 15: proto.HKUpdateShowdown
	(*HKUpdateGameState)(nil),     // 16: proto.HKUpdateGameState
	(*HKUpdateFinish)(nil),        // 17: proto.HKUpdateFinish
	(*Card)(nil),                  // 18: proto.Card
	(GameState)(0),                // 19: proto.GameState
	(*Jackpot)(nil),               // 20: proto.Jackpot
}
var file_hk_poker_proto_depIdxs = []int32{
	0,  // 0: proto.HKPlayerBettingState.action:type_name -> proto.HKPokerAction
	1,  // 1: proto.HKBettingState.round:type_name -> proto.HKPokerRound
	3,  // 2: proto.HKBettingState.player_states:type_name -> proto.HKPlayerBettingState
	5,  // 3: proto.HKPotInfo.pots:type_name -> proto.HKPot
	0,  // 4: proto.HKPlayerActionRequest.action:type_name -> proto.HKPokerAction
	0,  // 5: proto.HKUpdatePlayerAction.action:type_name -> proto.HKPokerAction
	4,  // 6: proto.HKUpdatePlayerAction.betting_state:type_name -> proto.HKBettingState
	11, // 7: proto.HKUpdateDeal.player_cards:type_name -> proto.HKPlayerCards
	1,  // 8: proto.HKUpdateDeal.round:type_name -> proto.HKPokerRound
	18, // 9: proto.HKPlayerCards.face_up_cards:type_name -> proto.Card
	18, // 10: proto.HKPlayerCards.face_down_cards:type_name -> proto.Card
	18, // 11: proto.HKPlayerCards.all_cards:type_name -> proto.Card
	18, // 12: proto.HKUpdateCardSwap.new_face_up_card:type_name -> proto.Card
	1,  // 13: proto.HKUpdateNewRound.round:type_name -> proto.HKPokerRound
	11, // 14: proto.HKUpdateNewRound.player_cards:type_name -> proto.HKPlayerCards
	4,  // 15: proto.HKUpdateNewRound.betting_state:type_name -> proto.HKBettingState
	2,  // 16: proto.HKHandResult.hand_rank:type_name -> proto.HKPokerHandRank
	18, // 17: proto.HKHandResult.cards:type_name -> proto.Card
	14, // 18: proto.HKUpdateShowdown.hand_results:type_name -> proto.HKHandResult
	6,  // 19: proto.HKUpdateShowdown.pot_info:type_name -> proto.HKPotInfo
	19, // 20: proto.HKUpdateGameState.state:type_name -> proto.GameState
	4,  // 21: proto.HKUpdateGameState.betting_state:type_name -> proto.HKBettingState
	6,  // 22: proto.HKUpdateGameState.pot_info:type_name -> proto.HKPotInfo
	11, // 23: proto.HKUpdateGameState.player_cards:type_name -> proto.HKPlayerCards
	1,  // 24: proto.HKUpdateGameState.round:type_name -> proto.HKPokerRound
	14, // 25: proto.HKUpdateFinish.results:type_name -> proto.HKHandResult
	6,  // 26: proto.HKUpdateFinish.pot_info:type_name -> proto.HKPotInfo
	20, // 27: proto.HKUpdateFinish.jackpot:type_name -> proto.Jackpot
	20, // 28: proto.HKUpdateFinish.jp_treasure:type_name -> proto.Jackpot
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_hk_poker_proto_init() }
func file_hk_poker_proto_init() {
	if File_hk_poker_proto != nil {
		return
	}
	file_game_common_proto_init()
	file_chinese_poker_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_hk_poker_proto_rawDesc), len(file_hk_poker_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hk_poker_proto_goTypes,
		DependencyIndexes: file_hk_poker_proto_depIdxs,
		EnumInfos:         file_hk_poker_proto_enumTypes,
		MessageInfos:      file_hk_poker_proto_msgTypes,
	}.Build()
	File_hk_poker_proto = out.File
	file_hk_poker_proto_goTypes = nil
	file_hk_poker_proto_depIdxs = nil
}
