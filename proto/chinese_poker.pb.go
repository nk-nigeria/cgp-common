// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: chinese_poker.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardStatus int32

const (
	CardStatus_STATUS_HOLD   CardStatus = 0
	CardStatus_STATUS_UNHOLD CardStatus = 1
)

// Enum value maps for CardStatus.
var (
	CardStatus_name = map[int32]string{
		0: "STATUS_HOLD",
		1: "STATUS_UNHOLD",
	}
	CardStatus_value = map[string]int32{
		"STATUS_HOLD":   0,
		"STATUS_UNHOLD": 1,
	}
)

func (x CardStatus) Enum() *CardStatus {
	p := new(CardStatus)
	*p = x
	return p
}

func (x CardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_proto_enumTypes[0].Descriptor()
}

func (CardStatus) Type() protoreflect.EnumType {
	return &file_chinese_poker_proto_enumTypes[0]
}

func (x CardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardStatus.Descriptor instead.
func (CardStatus) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{0}
}

type CardSuit int32

const (
	CardSuit_SUIT_UNSPECIFIED CardSuit = 0
	CardSuit_SUIT_HEARTS      CardSuit = 1
	CardSuit_SUIT_DIAMONDS    CardSuit = 2
	CardSuit_SUIT_CLUBS       CardSuit = 3
	CardSuit_SUIT_SPADES      CardSuit = 4
)

// Enum value maps for CardSuit.
var (
	CardSuit_name = map[int32]string{
		0: "SUIT_UNSPECIFIED",
		1: "SUIT_HEARTS",
		2: "SUIT_DIAMONDS",
		3: "SUIT_CLUBS",
		4: "SUIT_SPADES",
	}
	CardSuit_value = map[string]int32{
		"SUIT_UNSPECIFIED": 0,
		"SUIT_HEARTS":      1,
		"SUIT_DIAMONDS":    2,
		"SUIT_CLUBS":       3,
		"SUIT_SPADES":      4,
	}
)

func (x CardSuit) Enum() *CardSuit {
	p := new(CardSuit)
	*p = x
	return p
}

func (x CardSuit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardSuit) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_proto_enumTypes[1].Descriptor()
}

func (CardSuit) Type() protoreflect.EnumType {
	return &file_chinese_poker_proto_enumTypes[1]
}

func (x CardSuit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardSuit.Descriptor instead.
func (CardSuit) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{1}
}

type CardRank int32

const (
	CardRank_RANK_UNSPECIFIED CardRank = 0
	CardRank_RANK_A           CardRank = 1
	CardRank_RANK_2           CardRank = 2
	CardRank_RANK_3           CardRank = 3
	CardRank_RANK_4           CardRank = 4
	CardRank_RANK_5           CardRank = 5
	CardRank_RANK_6           CardRank = 6
	CardRank_RANK_7           CardRank = 7
	CardRank_RANK_8           CardRank = 8
	CardRank_RANK_9           CardRank = 9
	CardRank_RANK_10          CardRank = 10
	CardRank_RANK_J           CardRank = 11
	CardRank_RANK_Q           CardRank = 12
	CardRank_RANK_K           CardRank = 13
)

// Enum value maps for CardRank.
var (
	CardRank_name = map[int32]string{
		0:  "RANK_UNSPECIFIED",
		1:  "RANK_A",
		2:  "RANK_2",
		3:  "RANK_3",
		4:  "RANK_4",
		5:  "RANK_5",
		6:  "RANK_6",
		7:  "RANK_7",
		8:  "RANK_8",
		9:  "RANK_9",
		10: "RANK_10",
		11: "RANK_J",
		12: "RANK_Q",
		13: "RANK_K",
	}
	CardRank_value = map[string]int32{
		"RANK_UNSPECIFIED": 0,
		"RANK_A":           1,
		"RANK_2":           2,
		"RANK_3":           3,
		"RANK_4":           4,
		"RANK_5":           5,
		"RANK_6":           6,
		"RANK_7":           7,
		"RANK_8":           8,
		"RANK_9":           9,
		"RANK_10":          10,
		"RANK_J":           11,
		"RANK_Q":           12,
		"RANK_K":           13,
	}
)

func (x CardRank) Enum() *CardRank {
	p := new(CardRank)
	*p = x
	return p
}

func (x CardRank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardRank) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_proto_enumTypes[2].Descriptor()
}

func (CardRank) Type() protoreflect.EnumType {
	return &file_chinese_poker_proto_enumTypes[2]
}

func (x CardRank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardRank.Descriptor instead.
func (CardRank) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{2}
}

type ChoiceCode int32

const (
	// No choice specified. Unused.
	ChoiceCode_CHOICE_UNSPECIFIED ChoiceCode = 0
	ChoiceCode_CHOICE_STAND       ChoiceCode = 1
	ChoiceCode_CHOICE_HIT         ChoiceCode = 2
)

// Enum value maps for ChoiceCode.
var (
	ChoiceCode_name = map[int32]string{
		0: "CHOICE_UNSPECIFIED",
		1: "CHOICE_STAND",
		2: "CHOICE_HIT",
	}
	ChoiceCode_value = map[string]int32{
		"CHOICE_UNSPECIFIED": 0,
		"CHOICE_STAND":       1,
		"CHOICE_HIT":         2,
	}
)

func (x ChoiceCode) Enum() *ChoiceCode {
	p := new(ChoiceCode)
	*p = x
	return p
}

func (x ChoiceCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChoiceCode) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_proto_enumTypes[3].Descriptor()
}

func (ChoiceCode) Type() protoreflect.EnumType {
	return &file_chinese_poker_proto_enumTypes[3]
}

func (x ChoiceCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChoiceCode.Descriptor instead.
func (ChoiceCode) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{3}
}

type CardEvent int32

const (
	CardEvent_COMBINE CardEvent = 0
	CardEvent_SHOW    CardEvent = 1
	CardEvent_DECLARE CardEvent = 2
	CardEvent_MOVE    CardEvent = 4
)

// Enum value maps for CardEvent.
var (
	CardEvent_name = map[int32]string{
		0: "COMBINE",
		1: "SHOW",
		2: "DECLARE",
		4: "MOVE",
	}
	CardEvent_value = map[string]int32{
		"COMBINE": 0,
		"SHOW":    1,
		"DECLARE": 2,
		"MOVE":    4,
	}
)

func (x CardEvent) Enum() *CardEvent {
	p := new(CardEvent)
	*p = x
	return p
}

func (x CardEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_proto_enumTypes[4].Descriptor()
}

func (CardEvent) Type() protoreflect.EnumType {
	return &file_chinese_poker_proto_enumTypes[4]
}

func (x CardEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardEvent.Descriptor instead.
func (CardEvent) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{4}
}

type HandRanking int32

const (
	HandRanking_StraightFlush         HandRanking = 0
	HandRanking_FourOfAKind           HandRanking = 1
	HandRanking_FullHouse             HandRanking = 2
	HandRanking_Flush                 HandRanking = 3
	HandRanking_Straight              HandRanking = 4
	HandRanking_ThreeOfAKind          HandRanking = 5
	HandRanking_TwoPairs              HandRanking = 6
	HandRanking_Pair                  HandRanking = 7
	HandRanking_HighCard              HandRanking = 8
	HandRanking_NaturalThreeStraights HandRanking = 101
	HandRanking_NaturalThreeOfFlushes HandRanking = 102
	HandRanking_NaturalSixPairs       HandRanking = 103
	HandRanking_NaturalFullColors     HandRanking = 104
	HandRanking_NaturalDragon         HandRanking = 105
	HandRanking_NaturalCleanDragon    HandRanking = 106
)

// Enum value maps for HandRanking.
var (
	HandRanking_name = map[int32]string{
		0:   "StraightFlush",
		1:   "FourOfAKind",
		2:   "FullHouse",
		3:   "Flush",
		4:   "Straight",
		5:   "ThreeOfAKind",
		6:   "TwoPairs",
		7:   "Pair",
		8:   "HighCard",
		101: "NaturalThreeStraights",
		102: "NaturalThreeOfFlushes",
		103: "NaturalSixPairs",
		104: "NaturalFullColors",
		105: "NaturalDragon",
		106: "NaturalCleanDragon",
	}
	HandRanking_value = map[string]int32{
		"StraightFlush":         0,
		"FourOfAKind":           1,
		"FullHouse":             2,
		"Flush":                 3,
		"Straight":              4,
		"ThreeOfAKind":          5,
		"TwoPairs":              6,
		"Pair":                  7,
		"HighCard":              8,
		"NaturalThreeStraights": 101,
		"NaturalThreeOfFlushes": 102,
		"NaturalSixPairs":       103,
		"NaturalFullColors":     104,
		"NaturalDragon":         105,
		"NaturalCleanDragon":    106,
	}
)

func (x HandRanking) Enum() *HandRanking {
	p := new(HandRanking)
	*p = x
	return p
}

func (x HandRanking) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandRanking) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_proto_enumTypes[5].Descriptor()
}

func (HandRanking) Type() protoreflect.EnumType {
	return &file_chinese_poker_proto_enumTypes[5]
}

func (x HandRanking) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandRanking.Descriptor instead.
func (HandRanking) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{5}
}

type HandBonusType int32

const (
	HandBonusType_None                       HandBonusType = 0
	HandBonusType_MisSet                     HandBonusType = 1
	HandBonusType_Scoop                      HandBonusType = 2
	HandBonusType_ScoopAll                   HandBonusType = 3
	HandBonusType_BonusFullHouseMidHand      HandBonusType = 101
	HandBonusType_BonusThreeOfAKindFrontHand HandBonusType = 102
	HandBonusType_BonusFourOfAKindBackHand   HandBonusType = 103
	HandBonusType_BonusStraightFlushBackHand HandBonusType = 104
	HandBonusType_BonusFourOfAKindMidHand    HandBonusType = 105
	HandBonusType_BonusStraightFlushMidHand  HandBonusType = 106
	HandBonusType_BonusNaturalThreeStraights HandBonusType = 201
	HandBonusType_BonusNaturalThreeOfFlushes HandBonusType = 202
	HandBonusType_BonusNaturalSixPairs       HandBonusType = 203
	HandBonusType_BonusNaturalFullColors     HandBonusType = 204
	HandBonusType_BonusNaturalDragon         HandBonusType = 205
	HandBonusType_BonusNaturalCleanDragon    HandBonusType = 206
)

// Enum value maps for HandBonusType.
var (
	HandBonusType_name = map[int32]string{
		0:   "None",
		1:   "MisSet",
		2:   "Scoop",
		3:   "ScoopAll",
		101: "BonusFullHouseMidHand",
		102: "BonusThreeOfAKindFrontHand",
		103: "BonusFourOfAKindBackHand",
		104: "BonusStraightFlushBackHand",
		105: "BonusFourOfAKindMidHand",
		106: "BonusStraightFlushMidHand",
		201: "BonusNaturalThreeStraights",
		202: "BonusNaturalThreeOfFlushes",
		203: "BonusNaturalSixPairs",
		204: "BonusNaturalFullColors",
		205: "BonusNaturalDragon",
		206: "BonusNaturalCleanDragon",
	}
	HandBonusType_value = map[string]int32{
		"None":                       0,
		"MisSet":                     1,
		"Scoop":                      2,
		"ScoopAll":                   3,
		"BonusFullHouseMidHand":      101,
		"BonusThreeOfAKindFrontHand": 102,
		"BonusFourOfAKindBackHand":   103,
		"BonusStraightFlushBackHand": 104,
		"BonusFourOfAKindMidHand":    105,
		"BonusStraightFlushMidHand":  106,
		"BonusNaturalThreeStraights": 201,
		"BonusNaturalThreeOfFlushes": 202,
		"BonusNaturalSixPairs":       203,
		"BonusNaturalFullColors":     204,
		"BonusNaturalDragon":         205,
		"BonusNaturalCleanDragon":    206,
	}
)

func (x HandBonusType) Enum() *HandBonusType {
	p := new(HandBonusType)
	*p = x
	return p
}

func (x HandBonusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandBonusType) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_proto_enumTypes[6].Descriptor()
}

func (HandBonusType) Type() protoreflect.EnumType {
	return &file_chinese_poker_proto_enumTypes[6]
}

func (x HandBonusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandBonusType.Descriptor instead.
func (HandBonusType) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{6}
}

type PointType int32

const (
	PointType_Point_Normal  PointType = 0
	PointType_Point_Mis_Set PointType = -1
	PointType_Point_Natural PointType = 1
)

// Enum value maps for PointType.
var (
	PointType_name = map[int32]string{
		0:  "Point_Normal",
		-1: "Point_Mis_Set",
		1:  "Point_Natural",
	}
	PointType_value = map[string]int32{
		"Point_Normal":  0,
		"Point_Mis_Set": -1,
		"Point_Natural": 1,
	}
)

func (x PointType) Enum() *PointType {
	p := new(PointType)
	*p = x
	return p
}

func (x PointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointType) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_proto_enumTypes[7].Descriptor()
}

func (PointType) Type() protoreflect.EnumType {
	return &file_chinese_poker_proto_enumTypes[7]
}

func (x PointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointType.Descriptor instead.
func (PointType) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{7}
}

// The card
type Card struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rank          CardRank               `protobuf:"varint,1,opt,name=rank,proto3,enum=proto.CardRank" json:"rank,omitempty"`
	Suit          CardSuit               `protobuf:"varint,2,opt,name=suit,proto3,enum=proto.CardSuit" json:"suit,omitempty"`
	Status        CardStatus             `protobuf:"varint,3,opt,name=status,proto3,enum=proto.CardStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Card) Reset() {
	*x = Card{}
	mi := &file_chinese_poker_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetRank() CardRank {
	if x != nil {
		return x.Rank
	}
	return CardRank_RANK_UNSPECIFIED
}

func (x *Card) GetSuit() CardSuit {
	if x != nil {
		return x.Suit
	}
	return CardSuit_SUIT_UNSPECIFIED
}

func (x *Card) GetStatus() CardStatus {
	if x != nil {
		return x.Status
	}
	return CardStatus_STATUS_HOLD
}

type ListCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cards         []*Card                `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCard) Reset() {
	*x = ListCard{}
	mi := &file_chinese_poker_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCard) ProtoMessage() {}

func (x *ListCard) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCard.ProtoReflect.Descriptor instead.
func (*ListCard) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{1}
}

func (x *ListCard) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type NewGame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewGame) Reset() {
	*x = NewGame{}
	mi := &file_chinese_poker_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewGame) ProtoMessage() {}

func (x *NewGame) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewGame.ProtoReflect.Descriptor instead.
func (*NewGame) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{2}
}

type Organize struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The current state of the cards.
	Cards         *ListCard `protobuf:"bytes,1,opt,name=cards,proto3" json:"cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Organize) Reset() {
	*x = Organize{}
	mi := &file_chinese_poker_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Organize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organize) ProtoMessage() {}

func (x *Organize) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organize.ProtoReflect.Descriptor instead.
func (*Organize) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{3}
}

func (x *Organize) GetCards() *ListCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

type PresenceCards struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Presence      string                 `protobuf:"bytes,1,opt,name=presence,proto3" json:"presence,omitempty"`
	Cards         []*Card                `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
	WhotCards     []*WhotCard            `protobuf:"bytes,3,rep,name=whotCards,proto3" json:"whotCards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PresenceCards) Reset() {
	*x = PresenceCards{}
	mi := &file_chinese_poker_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PresenceCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceCards) ProtoMessage() {}

func (x *PresenceCards) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceCards.ProtoReflect.Descriptor instead.
func (*PresenceCards) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{4}
}

func (x *PresenceCards) GetPresence() string {
	if x != nil {
		return x.Presence
	}
	return ""
}

func (x *PresenceCards) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *PresenceCards) GetWhotCards() []*WhotCard {
	if x != nil {
		return x.WhotCards
	}
	return nil
}

type UpdateDeal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PresenceCard  *PresenceCards         `protobuf:"bytes,1,opt,name=presence_card,json=presenceCard,proto3" json:"presence_card,omitempty"`
	CardEvent     map[string]CardEvent   `protobuf:"bytes,2,rep,name=card_event,json=cardEvent,proto3" json:"card_event,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=proto.CardEvent"`
	TopCard       *WhotCard              `protobuf:"bytes,3,opt,name=top_card,json=topCard,proto3" json:"top_card,omitempty"`
	IdDealer      string                 `protobuf:"bytes,4,opt,name=id_dealer,json=idDealer,proto3" json:"id_dealer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDeal) Reset() {
	*x = UpdateDeal{}
	mi := &file_chinese_poker_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeal) ProtoMessage() {}

func (x *UpdateDeal) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeal.ProtoReflect.Descriptor instead.
func (*UpdateDeal) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDeal) GetPresenceCard() *PresenceCards {
	if x != nil {
		return x.PresenceCard
	}
	return nil
}

func (x *UpdateDeal) GetCardEvent() map[string]CardEvent {
	if x != nil {
		return x.CardEvent
	}
	return nil
}

func (x *UpdateDeal) GetTopCard() *WhotCard {
	if x != nil {
		return x.TopCard
	}
	return nil
}

func (x *UpdateDeal) GetIdDealer() string {
	if x != nil {
		return x.IdDealer
	}
	return ""
}

type UpdateGameState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         GameState              `protobuf:"varint,1,opt,name=state,proto3,enum=proto.GameState" json:"state,omitempty"`
	CountDown     int64                  `protobuf:"varint,2,opt,name=count_down,json=countDown,proto3" json:"count_down,omitempty"`
	ArrangeCard   *ArrangeCard           `protobuf:"bytes,3,opt,name=arrange_card,json=arrangeCard,proto3" json:"arrange_card,omitempty"`
	PresenceCards []*PresenceCards       `protobuf:"bytes,4,rep,name=presenceCards,proto3" json:"presenceCards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateGameState) Reset() {
	*x = UpdateGameState{}
	mi := &file_chinese_poker_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameState) ProtoMessage() {}

func (x *UpdateGameState) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameState.ProtoReflect.Descriptor instead.
func (*UpdateGameState) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateGameState) GetState() GameState {
	if x != nil {
		return x.State
	}
	return GameState_GAME_STATE_UNKNOWN
}

func (x *UpdateGameState) GetCountDown() int64 {
	if x != nil {
		return x.CountDown
	}
	return 0
}

func (x *UpdateGameState) GetArrangeCard() *ArrangeCard {
	if x != nil {
		return x.ArrangeCard
	}
	return nil
}

func (x *UpdateGameState) GetPresenceCards() []*PresenceCards {
	if x != nil {
		return x.PresenceCards
	}
	return nil
}

type ArrangeCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Presence      string                 `protobuf:"bytes,1,opt,name=Presence,proto3" json:"Presence,omitempty"`
	CardEvent     CardEvent              `protobuf:"varint,2,opt,name=card_event,json=cardEvent,proto3,enum=proto.CardEvent" json:"card_event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArrangeCard) Reset() {
	*x = ArrangeCard{}
	mi := &file_chinese_poker_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrangeCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrangeCard) ProtoMessage() {}

func (x *ArrangeCard) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrangeCard.ProtoReflect.Descriptor instead.
func (*ArrangeCard) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{7}
}

func (x *ArrangeCard) GetPresence() string {
	if x != nil {
		return x.Presence
	}
	return ""
}

func (x *ArrangeCard) GetCardEvent() CardEvent {
	if x != nil {
		return x.CardEvent
	}
	return CardEvent_COMBINE
}

type HandBonus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Win           string                 `protobuf:"bytes,1,opt,name=win,proto3" json:"win,omitempty"`
	Lose          string                 `protobuf:"bytes,2,opt,name=lose,proto3" json:"lose,omitempty"`
	Type          HandBonusType          `protobuf:"varint,3,opt,name=type,proto3,enum=proto.HandBonusType" json:"type,omitempty"`
	Factor        int64                  `protobuf:"varint,4,opt,name=factor,proto3" json:"factor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandBonus) Reset() {
	*x = HandBonus{}
	mi := &file_chinese_poker_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandBonus) ProtoMessage() {}

func (x *HandBonus) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandBonus.ProtoReflect.Descriptor instead.
func (*HandBonus) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{8}
}

func (x *HandBonus) GetWin() string {
	if x != nil {
		return x.Win
	}
	return ""
}

func (x *HandBonus) GetLose() string {
	if x != nil {
		return x.Lose
	}
	return ""
}

func (x *HandBonus) GetType() HandBonusType {
	if x != nil {
		return x.Type
	}
	return HandBonusType_None
}

func (x *HandBonus) GetFactor() int64 {
	if x != nil {
		return x.Factor
	}
	return 0
}

type HandResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ranking       HandRanking            `protobuf:"varint,1,opt,name=ranking,proto3,enum=proto.HandRanking" json:"ranking,omitempty"`
	Point         uint64                 `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	Lpoint        uint64                 `protobuf:"varint,3,opt,name=lpoint,proto3" json:"lpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandResult) Reset() {
	*x = HandResult{}
	mi := &file_chinese_poker_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandResult) ProtoMessage() {}

func (x *HandResult) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandResult.ProtoReflect.Descriptor instead.
func (*HandResult) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{9}
}

func (x *HandResult) GetRanking() HandRanking {
	if x != nil {
		return x.Ranking
	}
	return HandRanking_StraightFlush
}

func (x *HandResult) GetPoint() uint64 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *HandResult) GetLpoint() uint64 {
	if x != nil {
		return x.Lpoint
	}
	return 0
}

type PointResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Front         *HandResult            `protobuf:"bytes,1,opt,name=front,proto3" json:"front,omitempty"`
	Middle        *HandResult            `protobuf:"bytes,2,opt,name=middle,proto3" json:"middle,omitempty"`
	Back          *HandResult            `protobuf:"bytes,3,opt,name=back,proto3" json:"back,omitempty"`
	Natural       *HandResult            `protobuf:"bytes,4,opt,name=natural,proto3" json:"natural,omitempty"`
	Type          PointType              `protobuf:"varint,5,opt,name=type,proto3,enum=proto.PointType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PointResult) Reset() {
	*x = PointResult{}
	mi := &file_chinese_poker_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PointResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointResult) ProtoMessage() {}

func (x *PointResult) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointResult.ProtoReflect.Descriptor instead.
func (*PointResult) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{10}
}

func (x *PointResult) GetFront() *HandResult {
	if x != nil {
		return x.Front
	}
	return nil
}

func (x *PointResult) GetMiddle() *HandResult {
	if x != nil {
		return x.Middle
	}
	return nil
}

func (x *PointResult) GetBack() *HandResult {
	if x != nil {
		return x.Back
	}
	return nil
}

func (x *PointResult) GetNatural() *HandResult {
	if x != nil {
		return x.Natural
	}
	return nil
}

func (x *PointResult) GetType() PointType {
	if x != nil {
		return x.Type
	}
	return PointType_Point_Normal
}

type ScoreResult struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	FrontFactor       int64                  `protobuf:"varint,1,opt,name=front_factor,json=frontFactor,proto3" json:"front_factor,omitempty"`
	MiddleFactor      int64                  `protobuf:"varint,2,opt,name=middle_factor,json=middleFactor,proto3" json:"middle_factor,omitempty"`
	BackFactor        int64                  `protobuf:"varint,3,opt,name=back_factor,json=backFactor,proto3" json:"back_factor,omitempty"`
	FrontBonusFactor  int64                  `protobuf:"varint,4,opt,name=front_bonus_factor,json=frontBonusFactor,proto3" json:"front_bonus_factor,omitempty"`
	MiddleBonusFactor int64                  `protobuf:"varint,5,opt,name=middle_bonus_factor,json=middleBonusFactor,proto3" json:"middle_bonus_factor,omitempty"`
	BackBonusFactor   int64                  `protobuf:"varint,6,opt,name=back_bonus_factor,json=backBonusFactor,proto3" json:"back_bonus_factor,omitempty"`
	NaturalFactor     int64                  `protobuf:"varint,7,opt,name=natural_factor,json=naturalFactor,proto3" json:"natural_factor,omitempty"`
	BonusFactor       int64                  `protobuf:"varint,8,opt,name=bonus_factor,json=bonusFactor,proto3" json:"bonus_factor,omitempty"` // mis set, scoop, scoop all
	Scoop             int64                  `protobuf:"varint,9,opt,name=scoop,proto3" json:"scoop,omitempty"`
	NumHandWin        int32                  `protobuf:"varint,10,opt,name=num_hand_win,json=numHandWin,proto3" json:"num_hand_win,omitempty"`
	TotalFactor       int64                  `protobuf:"varint,11,opt,name=total_factor,json=totalFactor,proto3" json:"total_factor,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ScoreResult) Reset() {
	*x = ScoreResult{}
	mi := &file_chinese_poker_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreResult) ProtoMessage() {}

func (x *ScoreResult) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreResult.ProtoReflect.Descriptor instead.
func (*ScoreResult) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{11}
}

func (x *ScoreResult) GetFrontFactor() int64 {
	if x != nil {
		return x.FrontFactor
	}
	return 0
}

func (x *ScoreResult) GetMiddleFactor() int64 {
	if x != nil {
		return x.MiddleFactor
	}
	return 0
}

func (x *ScoreResult) GetBackFactor() int64 {
	if x != nil {
		return x.BackFactor
	}
	return 0
}

func (x *ScoreResult) GetFrontBonusFactor() int64 {
	if x != nil {
		return x.FrontBonusFactor
	}
	return 0
}

func (x *ScoreResult) GetMiddleBonusFactor() int64 {
	if x != nil {
		return x.MiddleBonusFactor
	}
	return 0
}

func (x *ScoreResult) GetBackBonusFactor() int64 {
	if x != nil {
		return x.BackBonusFactor
	}
	return 0
}

func (x *ScoreResult) GetNaturalFactor() int64 {
	if x != nil {
		return x.NaturalFactor
	}
	return 0
}

func (x *ScoreResult) GetBonusFactor() int64 {
	if x != nil {
		return x.BonusFactor
	}
	return 0
}

func (x *ScoreResult) GetScoop() int64 {
	if x != nil {
		return x.Scoop
	}
	return 0
}

func (x *ScoreResult) GetNumHandWin() int32 {
	if x != nil {
		return x.NumHandWin
	}
	return 0
}

func (x *ScoreResult) GetTotalFactor() int64 {
	if x != nil {
		return x.TotalFactor
	}
	return 0
}

type ComparisonResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ScoreResult   *ScoreResult           `protobuf:"bytes,2,opt,name=score_result,json=scoreResult,proto3" json:"score_result,omitempty"`
	PointResult   *PointResult           `protobuf:"bytes,3,opt,name=point_result,json=pointResult,proto3" json:"point_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComparisonResult) Reset() {
	*x = ComparisonResult{}
	mi := &file_chinese_poker_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComparisonResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonResult) ProtoMessage() {}

func (x *ComparisonResult) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonResult.ProtoReflect.Descriptor instead.
func (*ComparisonResult) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{12}
}

func (x *ComparisonResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ComparisonResult) GetScoreResult() *ScoreResult {
	if x != nil {
		return x.ScoreResult
	}
	return nil
}

func (x *ComparisonResult) GetPointResult() *PointResult {
	if x != nil {
		return x.PointResult
	}
	return nil
}

type UpdateFinish struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*ComparisonResult    `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Bonuses       []*HandBonus           `protobuf:"bytes,2,rep,name=bonuses,proto3" json:"bonuses,omitempty"`
	Jackpot       *Jackpot               `protobuf:"bytes,3,opt,name=jackpot,proto3" json:"jackpot,omitempty"`
	JpTreasure    *Jackpot               `protobuf:"bytes,4,opt,name=jp_treasure,json=jpTreasure,proto3" json:"jp_treasure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFinish) Reset() {
	*x = UpdateFinish{}
	mi := &file_chinese_poker_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFinish) ProtoMessage() {}

func (x *UpdateFinish) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFinish.ProtoReflect.Descriptor instead.
func (*UpdateFinish) Descriptor() ([]byte, []int) {
	return file_chinese_poker_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateFinish) GetResults() []*ComparisonResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UpdateFinish) GetBonuses() []*HandBonus {
	if x != nil {
		return x.Bonuses
	}
	return nil
}

func (x *UpdateFinish) GetJackpot() *Jackpot {
	if x != nil {
		return x.Jackpot
	}
	return nil
}

func (x *UpdateFinish) GetJpTreasure() *Jackpot {
	if x != nil {
		return x.JpTreasure
	}
	return nil
}

var File_chinese_poker_proto protoreflect.FileDescriptor

const file_chinese_poker_proto_rawDesc = "" +
	"\n" +
	"\x13chinese_poker.proto\x12\x05proto\x1a\x11game_common.proto\x1a\x0fwhot_game.proto\"{\n" +
	"\x04Card\x12#\n" +
	"\x04rank\x18\x01 \x01(\x0e2\x0f.proto.CardRankR\x04rank\x12#\n" +
	"\x04suit\x18\x02 \x01(\x0e2\x0f.proto.CardSuitR\x04suit\x12)\n" +
	"\x06status\x18\x03 \x01(\x0e2\x11.proto.CardStatusR\x06status\"-\n" +
	"\bListCard\x12!\n" +
	"\x05cards\x18\x01 \x03(\v2\v.proto.CardR\x05cards\"\t\n" +
	"\aNewGame\"1\n" +
	"\bOrganize\x12%\n" +
	"\x05cards\x18\x01 \x01(\v2\x0f.proto.ListCardR\x05cards\"}\n" +
	"\rPresenceCards\x12\x1a\n" +
	"\bpresence\x18\x01 \x01(\tR\bpresence\x12!\n" +
	"\x05cards\x18\x02 \x03(\v2\v.proto.CardR\x05cards\x12-\n" +
	"\twhotCards\x18\x03 \x03(\v2\x0f.proto.WhotCardR\twhotCards\"\xa1\x02\n" +
	"\n" +
	"UpdateDeal\x129\n" +
	"\rpresence_card\x18\x01 \x01(\v2\x14.proto.PresenceCardsR\fpresenceCard\x12?\n" +
	"\n" +
	"card_event\x18\x02 \x03(\v2 .proto.UpdateDeal.CardEventEntryR\tcardEvent\x12*\n" +
	"\btop_card\x18\x03 \x01(\v2\x0f.proto.WhotCardR\atopCard\x12\x1b\n" +
	"\tid_dealer\x18\x04 \x01(\tR\bidDealer\x1aN\n" +
	"\x0eCardEventEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\x0e2\x10.proto.CardEventR\x05value:\x028\x01\"\xcb\x01\n" +
	"\x0fUpdateGameState\x12&\n" +
	"\x05state\x18\x01 \x01(\x0e2\x10.proto.GameStateR\x05state\x12\x1d\n" +
	"\n" +
	"count_down\x18\x02 \x01(\x03R\tcountDown\x125\n" +
	"\farrange_card\x18\x03 \x01(\v2\x12.proto.ArrangeCardR\varrangeCard\x12:\n" +
	"\rpresenceCards\x18\x04 \x03(\v2\x14.proto.PresenceCardsR\rpresenceCards\"Z\n" +
	"\vArrangeCard\x12\x1a\n" +
	"\bPresence\x18\x01 \x01(\tR\bPresence\x12/\n" +
	"\n" +
	"card_event\x18\x02 \x01(\x0e2\x10.proto.CardEventR\tcardEvent\"s\n" +
	"\tHandBonus\x12\x10\n" +
	"\x03win\x18\x01 \x01(\tR\x03win\x12\x12\n" +
	"\x04lose\x18\x02 \x01(\tR\x04lose\x12(\n" +
	"\x04type\x18\x03 \x01(\x0e2\x14.proto.HandBonusTypeR\x04type\x12\x16\n" +
	"\x06factor\x18\x04 \x01(\x03R\x06factor\"h\n" +
	"\n" +
	"HandResult\x12,\n" +
	"\aranking\x18\x01 \x01(\x0e2\x12.proto.HandRankingR\aranking\x12\x14\n" +
	"\x05point\x18\x02 \x01(\x04R\x05point\x12\x16\n" +
	"\x06lpoint\x18\x03 \x01(\x04R\x06lpoint\"\xdb\x01\n" +
	"\vPointResult\x12'\n" +
	"\x05front\x18\x01 \x01(\v2\x11.proto.HandResultR\x05front\x12)\n" +
	"\x06middle\x18\x02 \x01(\v2\x11.proto.HandResultR\x06middle\x12%\n" +
	"\x04back\x18\x03 \x01(\v2\x11.proto.HandResultR\x04back\x12+\n" +
	"\anatural\x18\x04 \x01(\v2\x11.proto.HandResultR\anatural\x12$\n" +
	"\x04type\x18\x05 \x01(\x0e2\x10.proto.PointTypeR\x04type\"\xa5\x03\n" +
	"\vScoreResult\x12!\n" +
	"\ffront_factor\x18\x01 \x01(\x03R\vfrontFactor\x12#\n" +
	"\rmiddle_factor\x18\x02 \x01(\x03R\fmiddleFactor\x12\x1f\n" +
	"\vback_factor\x18\x03 \x01(\x03R\n" +
	"backFactor\x12,\n" +
	"\x12front_bonus_factor\x18\x04 \x01(\x03R\x10frontBonusFactor\x12.\n" +
	"\x13middle_bonus_factor\x18\x05 \x01(\x03R\x11middleBonusFactor\x12*\n" +
	"\x11back_bonus_factor\x18\x06 \x01(\x03R\x0fbackBonusFactor\x12%\n" +
	"\x0enatural_factor\x18\a \x01(\x03R\rnaturalFactor\x12!\n" +
	"\fbonus_factor\x18\b \x01(\x03R\vbonusFactor\x12\x14\n" +
	"\x05scoop\x18\t \x01(\x03R\x05scoop\x12 \n" +
	"\fnum_hand_win\x18\n" +
	" \x01(\x05R\n" +
	"numHandWin\x12!\n" +
	"\ftotal_factor\x18\v \x01(\x03R\vtotalFactor\"\x99\x01\n" +
	"\x10ComparisonResult\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x125\n" +
	"\fscore_result\x18\x02 \x01(\v2\x12.proto.ScoreResultR\vscoreResult\x125\n" +
	"\fpoint_result\x18\x03 \x01(\v2\x12.proto.PointResultR\vpointResult\"\xc8\x01\n" +
	"\fUpdateFinish\x121\n" +
	"\aresults\x18\x01 \x03(\v2\x17.proto.ComparisonResultR\aresults\x12*\n" +
	"\abonuses\x18\x02 \x03(\v2\x10.proto.HandBonusR\abonuses\x12(\n" +
	"\ajackpot\x18\x03 \x01(\v2\x0e.proto.JackpotR\ajackpot\x12/\n" +
	"\vjp_treasure\x18\x04 \x01(\v2\x0e.proto.JackpotR\n" +
	"jpTreasure*0\n" +
	"\n" +
	"CardStatus\x12\x0f\n" +
	"\vSTATUS_HOLD\x10\x00\x12\x11\n" +
	"\rSTATUS_UNHOLD\x10\x01*e\n" +
	"\bCardSuit\x12\x14\n" +
	"\x10SUIT_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vSUIT_HEARTS\x10\x01\x12\x11\n" +
	"\rSUIT_DIAMONDS\x10\x02\x12\x0e\n" +
	"\n" +
	"SUIT_CLUBS\x10\x03\x12\x0f\n" +
	"\vSUIT_SPADES\x10\x04*\xbd\x01\n" +
	"\bCardRank\x12\x14\n" +
	"\x10RANK_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06RANK_A\x10\x01\x12\n" +
	"\n" +
	"\x06RANK_2\x10\x02\x12\n" +
	"\n" +
	"\x06RANK_3\x10\x03\x12\n" +
	"\n" +
	"\x06RANK_4\x10\x04\x12\n" +
	"\n" +
	"\x06RANK_5\x10\x05\x12\n" +
	"\n" +
	"\x06RANK_6\x10\x06\x12\n" +
	"\n" +
	"\x06RANK_7\x10\a\x12\n" +
	"\n" +
	"\x06RANK_8\x10\b\x12\n" +
	"\n" +
	"\x06RANK_9\x10\t\x12\v\n" +
	"\aRANK_10\x10\n" +
	"\x12\n" +
	"\n" +
	"\x06RANK_J\x10\v\x12\n" +
	"\n" +
	"\x06RANK_Q\x10\f\x12\n" +
	"\n" +
	"\x06RANK_K\x10\r*F\n" +
	"\n" +
	"ChoiceCode\x12\x16\n" +
	"\x12CHOICE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fCHOICE_STAND\x10\x01\x12\x0e\n" +
	"\n" +
	"CHOICE_HIT\x10\x02*9\n" +
	"\tCardEvent\x12\v\n" +
	"\aCOMBINE\x10\x00\x12\b\n" +
	"\x04SHOW\x10\x01\x12\v\n" +
	"\aDECLARE\x10\x02\x12\b\n" +
	"\x04MOVE\x10\x04*\x9e\x02\n" +
	"\vHandRanking\x12\x11\n" +
	"\rStraightFlush\x10\x00\x12\x0f\n" +
	"\vFourOfAKind\x10\x01\x12\r\n" +
	"\tFullHouse\x10\x02\x12\t\n" +
	"\x05Flush\x10\x03\x12\f\n" +
	"\bStraight\x10\x04\x12\x10\n" +
	"\fThreeOfAKind\x10\x05\x12\f\n" +
	"\bTwoPairs\x10\x06\x12\b\n" +
	"\x04Pair\x10\a\x12\f\n" +
	"\bHighCard\x10\b\x12\x19\n" +
	"\x15NaturalThreeStraights\x10e\x12\x19\n" +
	"\x15NaturalThreeOfFlushes\x10f\x12\x13\n" +
	"\x0fNaturalSixPairs\x10g\x12\x15\n" +
	"\x11NaturalFullColors\x10h\x12\x11\n" +
	"\rNaturalDragon\x10i\x12\x16\n" +
	"\x12NaturalCleanDragon\x10j*\xa4\x03\n" +
	"\rHandBonusType\x12\b\n" +
	"\x04None\x10\x00\x12\n" +
	"\n" +
	"\x06MisSet\x10\x01\x12\t\n" +
	"\x05Scoop\x10\x02\x12\f\n" +
	"\bScoopAll\x10\x03\x12\x19\n" +
	"\x15BonusFullHouseMidHand\x10e\x12\x1e\n" +
	"\x1aBonusThreeOfAKindFrontHand\x10f\x12\x1c\n" +
	"\x18BonusFourOfAKindBackHand\x10g\x12\x1e\n" +
	"\x1aBonusStraightFlushBackHand\x10h\x12\x1b\n" +
	"\x17BonusFourOfAKindMidHand\x10i\x12\x1d\n" +
	"\x19BonusStraightFlushMidHand\x10j\x12\x1f\n" +
	"\x1aBonusNaturalThreeStraights\x10\xc9\x01\x12\x1f\n" +
	"\x1aBonusNaturalThreeOfFlushes\x10\xca\x01\x12\x19\n" +
	"\x14BonusNaturalSixPairs\x10\xcb\x01\x12\x1b\n" +
	"\x16BonusNaturalFullColors\x10\xcc\x01\x12\x17\n" +
	"\x12BonusNaturalDragon\x10\xcd\x01\x12\x1c\n" +
	"\x17BonusNaturalCleanDragon\x10\xce\x01*L\n" +
	"\tPointType\x12\x10\n" +
	"\fPoint_Normal\x10\x00\x12\x1a\n" +
	"\rPoint_Mis_Set\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12\x11\n" +
	"\rPoint_Natural\x10\x01B4Z2github.com/nk-nigeria/whot-module/cgp-common/protob\x06proto3"

var (
	file_chinese_poker_proto_rawDescOnce sync.Once
	file_chinese_poker_proto_rawDescData []byte
)

func file_chinese_poker_proto_rawDescGZIP() []byte {
	file_chinese_poker_proto_rawDescOnce.Do(func() {
		file_chinese_poker_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chinese_poker_proto_rawDesc), len(file_chinese_poker_proto_rawDesc)))
	})
	return file_chinese_poker_proto_rawDescData
}

var file_chinese_poker_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_chinese_poker_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_chinese_poker_proto_goTypes = []any{
	(CardStatus)(0),          // 0: proto.CardStatus
	(CardSuit)(0),            // 1: proto.CardSuit
	(CardRank)(0),            // 2: proto.CardRank
	(ChoiceCode)(0),          // 3: proto.ChoiceCode
	(CardEvent)(0),           // 4: proto.CardEvent
	(HandRanking)(0),         // 5: proto.HandRanking
	(HandBonusType)(0),       // 6: proto.HandBonusType
	(PointType)(0),           // 7: proto.PointType
	(*Card)(nil),             // 8: proto.Card
	(*ListCard)(nil),         // 9: proto.ListCard
	(*NewGame)(nil),          // 10: proto.NewGame
	(*Organize)(nil),         // 11: proto.Organize
	(*PresenceCards)(nil),    // 12: proto.PresenceCards
	(*UpdateDeal)(nil),       // 13: proto.UpdateDeal
	(*UpdateGameState)(nil),  // 14: proto.UpdateGameState
	(*ArrangeCard)(nil),      // 15: proto.ArrangeCard
	(*HandBonus)(nil),        // 16: proto.HandBonus
	(*HandResult)(nil),       // 17: proto.HandResult
	(*PointResult)(nil),      // 18: proto.PointResult
	(*ScoreResult)(nil),      // 19: proto.ScoreResult
	(*ComparisonResult)(nil), // 20: proto.ComparisonResult
	(*UpdateFinish)(nil),     // 21: proto.UpdateFinish
	nil,                      // 22: proto.UpdateDeal.CardEventEntry
	(*WhotCard)(nil),         // 23: proto.WhotCard
	(GameState)(0),           // 24: proto.GameState
	(*Jackpot)(nil),          // 25: proto.Jackpot
}
var file_chinese_poker_proto_depIdxs = []int32{
	2,  // 0: proto.Card.rank:type_name -> proto.CardRank
	1,  // 1: proto.Card.suit:type_name -> proto.CardSuit
	0,  // 2: proto.Card.status:type_name -> proto.CardStatus
	8,  // 3: proto.ListCard.cards:type_name -> proto.Card
	9,  // 4: proto.Organize.cards:type_name -> proto.ListCard
	8,  // 5: proto.PresenceCards.cards:type_name -> proto.Card
	23, // 6: proto.PresenceCards.whotCards:type_name -> proto.WhotCard
	12, // 7: proto.UpdateDeal.presence_card:type_name -> proto.PresenceCards
	22, // 8: proto.UpdateDeal.card_event:type_name -> proto.UpdateDeal.CardEventEntry
	23, // 9: proto.UpdateDeal.top_card:type_name -> proto.WhotCard
	24, // 10: proto.UpdateGameState.state:type_name -> proto.GameState
	15, // 11: proto.UpdateGameState.arrange_card:type_name -> proto.ArrangeCard
	12, // 12: proto.UpdateGameState.presenceCards:type_name -> proto.PresenceCards
	4,  // 13: proto.ArrangeCard.card_event:type_name -> proto.CardEvent
	6,  // 14: proto.HandBonus.type:type_name -> proto.HandBonusType
	5,  // 15: proto.HandResult.ranking:type_name -> proto.HandRanking
	17, // 16: proto.PointResult.front:type_name -> proto.HandResult
	17, // 17: proto.PointResult.middle:type_name -> proto.HandResult
	17, // 18: proto.PointResult.back:type_name -> proto.HandResult
	17, // 19: proto.PointResult.natural:type_name -> proto.HandResult
	7,  // 20: proto.PointResult.type:type_name -> proto.PointType
	19, // 21: proto.ComparisonResult.score_result:type_name -> proto.ScoreResult
	18, // 22: proto.ComparisonResult.point_result:type_name -> proto.PointResult
	20, // 23: proto.UpdateFinish.results:type_name -> proto.ComparisonResult
	16, // 24: proto.UpdateFinish.bonuses:type_name -> proto.HandBonus
	25, // 25: proto.UpdateFinish.jackpot:type_name -> proto.Jackpot
	25, // 26: proto.UpdateFinish.jp_treasure:type_name -> proto.Jackpot
	4,  // 27: proto.UpdateDeal.CardEventEntry.value:type_name -> proto.CardEvent
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_chinese_poker_proto_init() }
func file_chinese_poker_proto_init() {
	if File_chinese_poker_proto != nil {
		return
	}
	file_game_common_proto_init()
	file_whot_game_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chinese_poker_proto_rawDesc), len(file_chinese_poker_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chinese_poker_proto_goTypes,
		DependencyIndexes: file_chinese_poker_proto_depIdxs,
		EnumInfos:         file_chinese_poker_proto_enumTypes,
		MessageInfos:      file_chinese_poker_proto_msgTypes,
	}.Build()
	File_chinese_poker_proto = out.File
	file_chinese_poker_proto_goTypes = nil
	file_chinese_poker_proto_depIdxs = nil
}
