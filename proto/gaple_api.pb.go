// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: gaple_api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GapleDominoChainPosition int32

const (
	GapleDominoChainPosition_CHAIN_UNSPECIFIED GapleDominoChainPosition = 0 // not use
	GapleDominoChainPosition_CHAIN_HEAD        GapleDominoChainPosition = 1 // can or wanna append to chain's head
	GapleDominoChainPosition_CHAIN_TAIL        GapleDominoChainPosition = 2 // can or wanna append to chain's tail
	GapleDominoChainPosition_CHAIN_BOTH        GapleDominoChainPosition = 3 // can do both, but this type is not available when sending from client to server cuz user need to choose 1 end
)

// Enum value maps for GapleDominoChainPosition.
var (
	GapleDominoChainPosition_name = map[int32]string{
		0: "CHAIN_UNSPECIFIED",
		1: "CHAIN_HEAD",
		2: "CHAIN_TAIL",
		3: "CHAIN_BOTH",
	}
	GapleDominoChainPosition_value = map[string]int32{
		"CHAIN_UNSPECIFIED": 0,
		"CHAIN_HEAD":        1,
		"CHAIN_TAIL":        2,
		"CHAIN_BOTH":        3,
	}
)

func (x GapleDominoChainPosition) Enum() *GapleDominoChainPosition {
	p := new(GapleDominoChainPosition)
	*p = x
	return p
}

func (x GapleDominoChainPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GapleDominoChainPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_gaple_api_proto_enumTypes[0].Descriptor()
}

func (GapleDominoChainPosition) Type() protoreflect.EnumType {
	return &file_gaple_api_proto_enumTypes[0]
}

func (x GapleDominoChainPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GapleDominoChainPosition.Descriptor instead.
func (GapleDominoChainPosition) EnumDescriptor() ([]byte, []int) {
	return file_gaple_api_proto_rawDescGZIP(), []int{0}
}

type GapleEndameType int32

const (
	GapleEndameType_GAPLE_ENDGAME_UNSPECIFIED GapleEndameType = 0
	GapleEndameType_GAPLE_ENDGAME_SINGLE      GapleEndameType = 1
	GapleEndameType_GAPLE_ENDGAME_DOUBLE      GapleEndameType = 2
	GapleEndameType_GAPLE_ENDGAME_TRIPLE      GapleEndameType = 3
	GapleEndameType_GAPLE_ENDGAME_QUARTET     GapleEndameType = 4
	GapleEndameType_GAPLE_ENDGAME_QUINTET     GapleEndameType = 5
)

// Enum value maps for GapleEndameType.
var (
	GapleEndameType_name = map[int32]string{
		0: "GAPLE_ENDGAME_UNSPECIFIED",
		1: "GAPLE_ENDGAME_SINGLE",
		2: "GAPLE_ENDGAME_DOUBLE",
		3: "GAPLE_ENDGAME_TRIPLE",
		4: "GAPLE_ENDGAME_QUARTET",
		5: "GAPLE_ENDGAME_QUINTET",
	}
	GapleEndameType_value = map[string]int32{
		"GAPLE_ENDGAME_UNSPECIFIED": 0,
		"GAPLE_ENDGAME_SINGLE":      1,
		"GAPLE_ENDGAME_DOUBLE":      2,
		"GAPLE_ENDGAME_TRIPLE":      3,
		"GAPLE_ENDGAME_QUARTET":     4,
		"GAPLE_ENDGAME_QUINTET":     5,
	}
)

func (x GapleEndameType) Enum() *GapleEndameType {
	p := new(GapleEndameType)
	*p = x
	return p
}

func (x GapleEndameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GapleEndameType) Descriptor() protoreflect.EnumDescriptor {
	return file_gaple_api_proto_enumTypes[1].Descriptor()
}

func (GapleEndameType) Type() protoreflect.EnumType {
	return &file_gaple_api_proto_enumTypes[1]
}

func (x GapleEndameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GapleEndameType.Descriptor instead.
func (GapleEndameType) EnumDescriptor() ([]byte, []int) {
	return file_gaple_api_proto_rawDescGZIP(), []int{1}
}

// solely for update desk state
// [chain] is in the form of 5-6-1-5 for example, meaning that there's a chain of 5-6/6-1/1-5 dominos had been played
// [player_turn] is uid of current turn player
// [hand] is information of 1 player hand, sending when player previously played 1 domino so their hand need an update
// [player_num_remained_cards] is data of num_remained card for each player
// [pass_penalty] indicate that a player was punished by not able to play any card, their chip being subtract by x1 bet. Player who played latest card receive that amount
// [table] is send when there's a change in number of player (join, leave)
// [legal_action] is send at the start of each player turn, showing them which action they can take
type GapleUpdateDesk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsUpdateTurn           bool                      `protobuf:"varint,1,opt,name=is_update_turn,json=isUpdateTurn,proto3" json:"is_update_turn,omitempty"`
	PlayerTurn             string                    `protobuf:"bytes,2,opt,name=player_turn,json=playerTurn,proto3" json:"player_turn,omitempty"`
	IsUpdateChain          bool                      `protobuf:"varint,3,opt,name=is_update_chain,json=isUpdateChain,proto3" json:"is_update_chain,omitempty"`
	Chain                  []int32                   `protobuf:"varint,4,rep,packed,name=chain,proto3" json:"chain,omitempty"`
	IsUpdatePlayerHand     bool                      `protobuf:"varint,5,opt,name=is_update_player_hand,json=isUpdatePlayerHand,proto3" json:"is_update_player_hand,omitempty"`
	Hand                   *GaplePressenceCards      `protobuf:"bytes,6,opt,name=hand,proto3" json:"hand,omitempty"`
	IsUpdatePlayerNumCards bool                      `protobuf:"varint,7,opt,name=is_update_player_num_cards,json=isUpdatePlayerNumCards,proto3" json:"is_update_player_num_cards,omitempty"`
	PlayerNumRemainedCards []*GaplePlayerNumRemained `protobuf:"bytes,8,rep,name=player_num_remained_cards,json=playerNumRemainedCards,proto3" json:"player_num_remained_cards,omitempty"`
	IsUpdatePassPenalty    bool                      `protobuf:"varint,9,opt,name=is_update_pass_penalty,json=isUpdatePassPenalty,proto3" json:"is_update_pass_penalty,omitempty"`
	PassPenalty            *GaplePassPenalty         `protobuf:"bytes,10,opt,name=pass_penalty,json=passPenalty,proto3" json:"pass_penalty,omitempty"`
	IsUpdateTable          bool                      `protobuf:"varint,11,opt,name=is_update_table,json=isUpdateTable,proto3" json:"is_update_table,omitempty"`
	Table                  *UpdateTable              `protobuf:"bytes,12,opt,name=table,proto3" json:"table,omitempty"`
	IsUpdateLegalAction    bool                      `protobuf:"varint,13,opt,name=is_update_legal_action,json=isUpdateLegalAction,proto3" json:"is_update_legal_action,omitempty"`
	LegalActions           []*GapleAction            `protobuf:"bytes,14,rep,name=legal_actions,json=legalActions,proto3" json:"legal_actions,omitempty"`
}

func (x *GapleUpdateDesk) Reset() {
	*x = GapleUpdateDesk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaple_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GapleUpdateDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GapleUpdateDesk) ProtoMessage() {}

func (x *GapleUpdateDesk) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GapleUpdateDesk.ProtoReflect.Descriptor instead.
func (*GapleUpdateDesk) Descriptor() ([]byte, []int) {
	return file_gaple_api_proto_rawDescGZIP(), []int{0}
}

func (x *GapleUpdateDesk) GetIsUpdateTurn() bool {
	if x != nil {
		return x.IsUpdateTurn
	}
	return false
}

func (x *GapleUpdateDesk) GetPlayerTurn() string {
	if x != nil {
		return x.PlayerTurn
	}
	return ""
}

func (x *GapleUpdateDesk) GetIsUpdateChain() bool {
	if x != nil {
		return x.IsUpdateChain
	}
	return false
}

func (x *GapleUpdateDesk) GetChain() []int32 {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *GapleUpdateDesk) GetIsUpdatePlayerHand() bool {
	if x != nil {
		return x.IsUpdatePlayerHand
	}
	return false
}

func (x *GapleUpdateDesk) GetHand() *GaplePressenceCards {
	if x != nil {
		return x.Hand
	}
	return nil
}

func (x *GapleUpdateDesk) GetIsUpdatePlayerNumCards() bool {
	if x != nil {
		return x.IsUpdatePlayerNumCards
	}
	return false
}

func (x *GapleUpdateDesk) GetPlayerNumRemainedCards() []*GaplePlayerNumRemained {
	if x != nil {
		return x.PlayerNumRemainedCards
	}
	return nil
}

func (x *GapleUpdateDesk) GetIsUpdatePassPenalty() bool {
	if x != nil {
		return x.IsUpdatePassPenalty
	}
	return false
}

func (x *GapleUpdateDesk) GetPassPenalty() *GaplePassPenalty {
	if x != nil {
		return x.PassPenalty
	}
	return nil
}

func (x *GapleUpdateDesk) GetIsUpdateTable() bool {
	if x != nil {
		return x.IsUpdateTable
	}
	return false
}

func (x *GapleUpdateDesk) GetTable() *UpdateTable {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *GapleUpdateDesk) GetIsUpdateLegalAction() bool {
	if x != nil {
		return x.IsUpdateLegalAction
	}
	return false
}

func (x *GapleUpdateDesk) GetLegalActions() []*GapleAction {
	if x != nil {
		return x.LegalActions
	}
	return nil
}

// represent legal action that user can take,
// also represent user playing 1 domino, send from client to server
type GapleAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domino   *Domino                  `protobuf:"bytes,1,opt,name=domino,proto3" json:"domino,omitempty"`
	Position GapleDominoChainPosition `protobuf:"varint,2,opt,name=position,proto3,enum=api.GapleDominoChainPosition" json:"position,omitempty"`
}

func (x *GapleAction) Reset() {
	*x = GapleAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaple_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GapleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GapleAction) ProtoMessage() {}

func (x *GapleAction) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GapleAction.ProtoReflect.Descriptor instead.
func (*GapleAction) Descriptor() ([]byte, []int) {
	return file_gaple_api_proto_rawDescGZIP(), []int{1}
}

func (x *GapleAction) GetDomino() *Domino {
	if x != nil {
		return x.Domino
	}
	return nil
}

func (x *GapleAction) GetPosition() GapleDominoChainPosition {
	if x != nil {
		return x.Position
	}
	return GapleDominoChainPosition_CHAIN_UNSPECIFIED
}

// num of card remained
type GaplePlayerNumRemained struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NumRemained int32  `protobuf:"varint,2,opt,name=num_remained,json=numRemained,proto3" json:"num_remained,omitempty"`
}

func (x *GaplePlayerNumRemained) Reset() {
	*x = GaplePlayerNumRemained{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaple_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GaplePlayerNumRemained) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaplePlayerNumRemained) ProtoMessage() {}

func (x *GaplePlayerNumRemained) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaplePlayerNumRemained.ProtoReflect.Descriptor instead.
func (*GaplePlayerNumRemained) Descriptor() ([]byte, []int) {
	return file_gaple_api_proto_rawDescGZIP(), []int{2}
}

func (x *GaplePlayerNumRemained) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GaplePlayerNumRemained) GetNumRemained() int32 {
	if x != nil {
		return x.NumRemained
	}
	return 0
}

// message from server to client when next player can't play any domino, they lost x1 bet to previous played one
type GaplePassPenalty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loser  string `protobuf:"bytes,1,opt,name=loser,proto3" json:"loser,omitempty"`
	Gainer string `protobuf:"bytes,2,opt,name=gainer,proto3" json:"gainer,omitempty"`
	Chips  int32  `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`
}

func (x *GaplePassPenalty) Reset() {
	*x = GaplePassPenalty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaple_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GaplePassPenalty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaplePassPenalty) ProtoMessage() {}

func (x *GaplePassPenalty) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaplePassPenalty.ProtoReflect.Descriptor instead.
func (*GaplePassPenalty) Descriptor() ([]byte, []int) {
	return file_gaple_api_proto_rawDescGZIP(), []int{3}
}

func (x *GaplePassPenalty) GetLoser() string {
	if x != nil {
		return x.Loser
	}
	return ""
}

func (x *GaplePassPenalty) GetGainer() string {
	if x != nil {
		return x.Gainer
	}
	return ""
}

func (x *GaplePassPenalty) GetChips() int32 {
	if x != nil {
		return x.Chips
	}
	return 0
}

type GaplePressenceCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string    `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Dominos []*Domino `protobuf:"bytes,2,rep,name=dominos,proto3" json:"dominos,omitempty"`
}

func (x *GaplePressenceCards) Reset() {
	*x = GaplePressenceCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaple_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GaplePressenceCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaplePressenceCards) ProtoMessage() {}

func (x *GaplePressenceCards) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaplePressenceCards.ProtoReflect.Descriptor instead.
func (*GaplePressenceCards) Descriptor() ([]byte, []int) {
	return file_gaple_api_proto_rawDescGZIP(), []int{4}
}

func (x *GaplePressenceCards) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GaplePressenceCards) GetDominos() []*Domino {
	if x != nil {
		return x.Dominos
	}
	return nil
}

// message send from server to client giving information of 1 player hand
type GapleUpdateDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresenceCard *GaplePressenceCards `protobuf:"bytes,1,opt,name=presence_card,json=presenceCard,proto3" json:"presence_card,omitempty"`
}

func (x *GapleUpdateDeal) Reset() {
	*x = GapleUpdateDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaple_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GapleUpdateDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GapleUpdateDeal) ProtoMessage() {}

func (x *GapleUpdateDeal) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GapleUpdateDeal.ProtoReflect.Descriptor instead.
func (*GapleUpdateDeal) Descriptor() ([]byte, []int) {
	return file_gaple_api_proto_rawDescGZIP(), []int{5}
}

func (x *GapleUpdateDeal) GetPresenceCard() *GaplePressenceCards {
	if x != nil {
		return x.PresenceCard
	}
	return nil
}

type GapleUpdateGameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State         GameState              `protobuf:"varint,1,opt,name=state,proto3,enum=api.GameState" json:"state,omitempty"`
	CountDown     int64                  `protobuf:"varint,2,opt,name=count_down,json=countDown,proto3" json:"count_down,omitempty"`
	PresenceCards []*GaplePressenceCards `protobuf:"bytes,4,rep,name=presence_cards,json=presenceCards,proto3" json:"presence_cards,omitempty"`
}

func (x *GapleUpdateGameState) Reset() {
	*x = GapleUpdateGameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaple_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GapleUpdateGameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GapleUpdateGameState) ProtoMessage() {}

func (x *GapleUpdateGameState) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GapleUpdateGameState.ProtoReflect.Descriptor instead.
func (*GapleUpdateGameState) Descriptor() ([]byte, []int) {
	return file_gaple_api_proto_rawDescGZIP(), []int{6}
}

func (x *GapleUpdateGameState) GetState() GameState {
	if x != nil {
		return x.State
	}
	return GameState_GameStateUnknown
}

func (x *GapleUpdateGameState) GetCountDown() int64 {
	if x != nil {
		return x.CountDown
	}
	return 0
}

func (x *GapleUpdateGameState) GetPresenceCards() []*GaplePressenceCards {
	if x != nil {
		return x.PresenceCards
	}
	return nil
}

// send from server to client when game end
type GapleUpdateFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndgameType GapleEndameType `protobuf:"varint,1,opt,name=endgame_type,json=endgameType,proto3,enum=api.GapleEndameType" json:"endgame_type,omitempty"`
	Winner      string          `protobuf:"bytes,2,opt,name=winner,proto3" json:"winner,omitempty"`
}

func (x *GapleUpdateFinish) Reset() {
	*x = GapleUpdateFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaple_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GapleUpdateFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GapleUpdateFinish) ProtoMessage() {}

func (x *GapleUpdateFinish) ProtoReflect() protoreflect.Message {
	mi := &file_gaple_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GapleUpdateFinish.ProtoReflect.Descriptor instead.
func (*GapleUpdateFinish) Descriptor() ([]byte, []int) {
	return file_gaple_api_proto_rawDescGZIP(), []int{7}
}

func (x *GapleUpdateFinish) GetEndgameType() GapleEndameType {
	if x != nil {
		return x.EndgameType
	}
	return GapleEndameType_GAPLE_ENDGAME_UNSPECIFIED
}

func (x *GapleUpdateFinish) GetWinner() string {
	if x != nil {
		return x.Winner
	}
	return ""
}

var File_gaple_api_proto protoreflect.FileDescriptor

var file_gaple_api_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x67, 0x61, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x12, 0x62, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x71, 0x71,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x05, 0x0a, 0x0f, 0x47, 0x61, 0x70,
	0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x75,
	0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x75, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x48, 0x61, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x04, 0x68, 0x61,
	0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x56,
	0x0a, 0x19, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x16,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0c, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0d, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x6d, 0x0a, 0x0b, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61,
	0x70, 0x6c, 0x65, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x54, 0x0a, 0x16, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x56, 0x0a, 0x10, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x73, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x22, 0x55,
	0x0a, 0x13, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x52, 0x07, 0x64, 0x6f,
	0x6d, 0x69, 0x6e, 0x6f, 0x73, 0x22, 0x50, 0x0a, 0x0f, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x47, 0x61, 0x70, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x11, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x64,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x67, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2a, 0x61, 0x0a, 0x18,
	0x47, 0x61, 0x70, 0x6c, 0x65, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x03, 0x2a,
	0xb4, 0x01, 0x0a, 0x0f, 0x47, 0x61, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x41, 0x50, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x41, 0x50, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x47, 0x41, 0x50, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x4f,
	0x55, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x41, 0x50, 0x4c, 0x45, 0x5f,
	0x45, 0x4e, 0x44, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x50, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x41, 0x50, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x51, 0x55, 0x49,
	0x4e, 0x54, 0x45, 0x54, 0x10, 0x05, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x69, 0x61, 0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x67, 0x61,
	0x6d, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x67, 0x70, 0x2d,
	0x62, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gaple_api_proto_rawDescOnce sync.Once
	file_gaple_api_proto_rawDescData = file_gaple_api_proto_rawDesc
)

func file_gaple_api_proto_rawDescGZIP() []byte {
	file_gaple_api_proto_rawDescOnce.Do(func() {
		file_gaple_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_gaple_api_proto_rawDescData)
	})
	return file_gaple_api_proto_rawDescData
}

var file_gaple_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gaple_api_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_gaple_api_proto_goTypes = []interface{}{
	(GapleDominoChainPosition)(0),  // 0: api.GapleDominoChainPosition
	(GapleEndameType)(0),           // 1: api.GapleEndameType
	(*GapleUpdateDesk)(nil),        // 2: api.GapleUpdateDesk
	(*GapleAction)(nil),            // 3: api.GapleAction
	(*GaplePlayerNumRemained)(nil), // 4: api.GaplePlayerNumRemained
	(*GaplePassPenalty)(nil),       // 5: api.GaplePassPenalty
	(*GaplePressenceCards)(nil),    // 6: api.GaplePressenceCards
	(*GapleUpdateDeal)(nil),        // 7: api.GapleUpdateDeal
	(*GapleUpdateGameState)(nil),   // 8: api.GapleUpdateGameState
	(*GapleUpdateFinish)(nil),      // 9: api.GapleUpdateFinish
	(*UpdateTable)(nil),            // 10: api.UpdateTable
	(*Domino)(nil),                 // 11: api.Domino
	(GameState)(0),                 // 12: api.GameState
}
var file_gaple_api_proto_depIdxs = []int32{
	6,  // 0: api.GapleUpdateDesk.hand:type_name -> api.GaplePressenceCards
	4,  // 1: api.GapleUpdateDesk.player_num_remained_cards:type_name -> api.GaplePlayerNumRemained
	5,  // 2: api.GapleUpdateDesk.pass_penalty:type_name -> api.GaplePassPenalty
	10, // 3: api.GapleUpdateDesk.table:type_name -> api.UpdateTable
	3,  // 4: api.GapleUpdateDesk.legal_actions:type_name -> api.GapleAction
	11, // 5: api.GapleAction.domino:type_name -> api.Domino
	0,  // 6: api.GapleAction.position:type_name -> api.GapleDominoChainPosition
	11, // 7: api.GaplePressenceCards.dominos:type_name -> api.Domino
	6,  // 8: api.GapleUpdateDeal.presence_card:type_name -> api.GaplePressenceCards
	12, // 9: api.GapleUpdateGameState.state:type_name -> api.GameState
	6,  // 10: api.GapleUpdateGameState.presence_cards:type_name -> api.GaplePressenceCards
	1,  // 11: api.GapleUpdateFinish.endgame_type:type_name -> api.GapleEndameType
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_gaple_api_proto_init() }
func file_gaple_api_proto_init() {
	if File_gaple_api_proto != nil {
		return
	}
	file_bandarqq_api_proto_init()
	file_chinese_poker_game_api_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gaple_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GapleUpdateDesk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaple_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GapleAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaple_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GaplePlayerNumRemained); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaple_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GaplePassPenalty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaple_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GaplePressenceCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaple_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GapleUpdateDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaple_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GapleUpdateGameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaple_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GapleUpdateFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gaple_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gaple_api_proto_goTypes,
		DependencyIndexes: file_gaple_api_proto_depIdxs,
		EnumInfos:         file_gaple_api_proto_enumTypes,
		MessageInfos:      file_gaple_api_proto_msgTypes,
	}.Build()
	File_gaple_api_proto = out.File
	file_gaple_api_proto_rawDesc = nil
	file_gaple_api_proto_goTypes = nil
	file_gaple_api_proto_depIdxs = nil
}
