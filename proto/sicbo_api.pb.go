// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: sicbo_api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Dice int32

const (
	Dice_DICE_UNSPECTIFIED Dice = 0
	Dice_DICE_1            Dice = 1
	Dice_DICE_2            Dice = 2
	Dice_DICE_3            Dice = 3
	Dice_DICE_4            Dice = 4
	Dice_DICE_5            Dice = 5
	Dice_DICE_6            Dice = 6
)

// Enum value maps for Dice.
var (
	Dice_name = map[int32]string{
		0: "DICE_UNSPECTIFIED",
		1: "DICE_1",
		2: "DICE_2",
		3: "DICE_3",
		4: "DICE_4",
		5: "DICE_5",
		6: "DICE_6",
	}
	Dice_value = map[string]int32{
		"DICE_UNSPECTIFIED": 0,
		"DICE_1":            1,
		"DICE_2":            2,
		"DICE_3":            3,
		"DICE_4":            4,
		"DICE_5":            5,
		"DICE_6":            6,
	}
)

func (x Dice) Enum() *Dice {
	p := new(Dice)
	*p = x
	return p
}

func (x Dice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dice) Descriptor() protoreflect.EnumDescriptor {
	return file_sicbo_api_proto_enumTypes[0].Descriptor()
}

func (Dice) Type() protoreflect.EnumType {
	return &file_sicbo_api_proto_enumTypes[0]
}

func (x Dice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dice.Descriptor instead.
func (Dice) EnumDescriptor() ([]byte, []int) {
	return file_sicbo_api_proto_rawDescGZIP(), []int{0}
}

type SicboBetCell int32

const (
	SicboBetCell_SICBO_CELL_UNSPECIFIED SicboBetCell = 0 // unused
	SicboBetCell_SICBO_CELL_SMALL       SicboBetCell = 1 // x1
	SicboBetCell_SICBO_CELL_BIG         SicboBetCell = 2
	SicboBetCell_SICBO_CELL_1           SicboBetCell = 11 // x number of same face
	SicboBetCell_SICBO_CEll_2           SicboBetCell = 12
	SicboBetCell_SICBO_CELL_3           SicboBetCell = 13
	SicboBetCell_SICBO_CELL_4           SicboBetCell = 14
	SicboBetCell_SICBO_CELL_5           SicboBetCell = 15
	SicboBetCell_SICBO_CELL_6           SicboBetCell = 16
	SicboBetCell_SICBO_CELL_DOUBLE_1    SicboBetCell = 21 // x10
	SicboBetCell_SICBO_CELL_DOUBLE_2    SicboBetCell = 22
	SicboBetCell_SICBO_CELL_DOUBLE_3    SicboBetCell = 23
	SicboBetCell_SICBO_CELL_DOUBLE_4    SicboBetCell = 24
	SicboBetCell_SICBO_CELL_DOUBLE_5    SicboBetCell = 25
	SicboBetCell_SICBO_CELL_DOUBLE_6    SicboBetCell = 26
	SicboBetCell_SICBO_CELL_TRIPLE      SicboBetCell = 31 // x30
	SicboBetCell_SICBO_CELL_TOTAL_4     SicboBetCell = 41 // x60
	SicboBetCell_SICBO_CELL_TOTAL_17    SicboBetCell = 42
	SicboBetCell_SICBO_CELL_TOTAL_5     SicboBetCell = 43 // x30
	SicboBetCell_SICBO_CELL_TOTAL_16    SicboBetCell = 44
	SicboBetCell_SICBO_CELL_TOTAL_6     SicboBetCell = 45 // x18
	SicboBetCell_SICBO_CELL_TOTAL_15    SicboBetCell = 46
	SicboBetCell_SICBO_CELL_TOTAL_7     SicboBetCell = 47 // x12
	SicboBetCell_SICBO_CELL_TOTAL_14    SicboBetCell = 48
	SicboBetCell_SICBO_CELL_TOTAL_8     SicboBetCell = 49 // x8
	SicboBetCell_SICBO_CELL_TOTAL_13    SicboBetCell = 50
	SicboBetCell_SICBO_CELL_TOTAL_9     SicboBetCell = 51 // x7
	SicboBetCell_SICBO_CELL_TOTAL_12    SicboBetCell = 52
	SicboBetCell_SICBO_CELL_TOTAL_10    SicboBetCell = 53 // x6
	SicboBetCell_SICBO_CELL_TOTAL_11    SicboBetCell = 54
)

// Enum value maps for SicboBetCell.
var (
	SicboBetCell_name = map[int32]string{
		0:  "SICBO_CELL_UNSPECIFIED",
		1:  "SICBO_CELL_SMALL",
		2:  "SICBO_CELL_BIG",
		11: "SICBO_CELL_1",
		12: "SICBO_CEll_2",
		13: "SICBO_CELL_3",
		14: "SICBO_CELL_4",
		15: "SICBO_CELL_5",
		16: "SICBO_CELL_6",
		21: "SICBO_CELL_DOUBLE_1",
		22: "SICBO_CELL_DOUBLE_2",
		23: "SICBO_CELL_DOUBLE_3",
		24: "SICBO_CELL_DOUBLE_4",
		25: "SICBO_CELL_DOUBLE_5",
		26: "SICBO_CELL_DOUBLE_6",
		31: "SICBO_CELL_TRIPLE",
		41: "SICBO_CELL_TOTAL_4",
		42: "SICBO_CELL_TOTAL_17",
		43: "SICBO_CELL_TOTAL_5",
		44: "SICBO_CELL_TOTAL_16",
		45: "SICBO_CELL_TOTAL_6",
		46: "SICBO_CELL_TOTAL_15",
		47: "SICBO_CELL_TOTAL_7",
		48: "SICBO_CELL_TOTAL_14",
		49: "SICBO_CELL_TOTAL_8",
		50: "SICBO_CELL_TOTAL_13",
		51: "SICBO_CELL_TOTAL_9",
		52: "SICBO_CELL_TOTAL_12",
		53: "SICBO_CELL_TOTAL_10",
		54: "SICBO_CELL_TOTAL_11",
	}
	SicboBetCell_value = map[string]int32{
		"SICBO_CELL_UNSPECIFIED": 0,
		"SICBO_CELL_SMALL":       1,
		"SICBO_CELL_BIG":         2,
		"SICBO_CELL_1":           11,
		"SICBO_CEll_2":           12,
		"SICBO_CELL_3":           13,
		"SICBO_CELL_4":           14,
		"SICBO_CELL_5":           15,
		"SICBO_CELL_6":           16,
		"SICBO_CELL_DOUBLE_1":    21,
		"SICBO_CELL_DOUBLE_2":    22,
		"SICBO_CELL_DOUBLE_3":    23,
		"SICBO_CELL_DOUBLE_4":    24,
		"SICBO_CELL_DOUBLE_5":    25,
		"SICBO_CELL_DOUBLE_6":    26,
		"SICBO_CELL_TRIPLE":      31,
		"SICBO_CELL_TOTAL_4":     41,
		"SICBO_CELL_TOTAL_17":    42,
		"SICBO_CELL_TOTAL_5":     43,
		"SICBO_CELL_TOTAL_16":    44,
		"SICBO_CELL_TOTAL_6":     45,
		"SICBO_CELL_TOTAL_15":    46,
		"SICBO_CELL_TOTAL_7":     47,
		"SICBO_CELL_TOTAL_14":    48,
		"SICBO_CELL_TOTAL_8":     49,
		"SICBO_CELL_TOTAL_13":    50,
		"SICBO_CELL_TOTAL_9":     51,
		"SICBO_CELL_TOTAL_12":    52,
		"SICBO_CELL_TOTAL_10":    53,
		"SICBO_CELL_TOTAL_11":    54,
	}
)

func (x SicboBetCell) Enum() *SicboBetCell {
	p := new(SicboBetCell)
	*p = x
	return p
}

func (x SicboBetCell) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SicboBetCell) Descriptor() protoreflect.EnumDescriptor {
	return file_sicbo_api_proto_enumTypes[1].Descriptor()
}

func (SicboBetCell) Type() protoreflect.EnumType {
	return &file_sicbo_api_proto_enumTypes[1]
}

func (x SicboBetCell) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SicboBetCell.Descriptor instead.
func (SicboBetCell) EnumDescriptor() ([]byte, []int) {
	return file_sicbo_api_proto_rawDescGZIP(), []int{1}
}

type SicboBetAction int32

const (
	SicboBetAction_SICBO_BET_NORMAL SicboBetAction = 0
	SicboBetAction_SICBO_BET_REBET  SicboBetAction = 1
	SicboBetAction_SICBO_BET_DOUBLE SicboBetAction = 2
)

// Enum value maps for SicboBetAction.
var (
	SicboBetAction_name = map[int32]string{
		0: "SICBO_BET_NORMAL",
		1: "SICBO_BET_REBET",
		2: "SICBO_BET_DOUBLE",
	}
	SicboBetAction_value = map[string]int32{
		"SICBO_BET_NORMAL": 0,
		"SICBO_BET_REBET":  1,
		"SICBO_BET_DOUBLE": 2,
	}
)

func (x SicboBetAction) Enum() *SicboBetAction {
	p := new(SicboBetAction)
	*p = x
	return p
}

func (x SicboBetAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SicboBetAction) Descriptor() protoreflect.EnumDescriptor {
	return file_sicbo_api_proto_enumTypes[2].Descriptor()
}

func (SicboBetAction) Type() protoreflect.EnumType {
	return &file_sicbo_api_proto_enumTypes[2]
}

func (x SicboBetAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SicboBetAction.Descriptor instead.
func (SicboBetAction) EnumDescriptor() ([]byte, []int) {
	return file_sicbo_api_proto_rawDescGZIP(), []int{2}
}

type SicboBetRejectReason int32

const (
	SicboBetRejectReason_UNSPECIFIED            SicboBetRejectReason = 0
	SicboBetRejectReason_BALANCE_NOT_ENOUGH     SicboBetRejectReason = 1
	SicboBetRejectReason_PREVIOUS_BET_NOT_EXIST SicboBetRejectReason = 2
	SicboBetRejectReason_ALREADY_BET            SicboBetRejectReason = 3
)

// Enum value maps for SicboBetRejectReason.
var (
	SicboBetRejectReason_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "BALANCE_NOT_ENOUGH",
		2: "PREVIOUS_BET_NOT_EXIST",
		3: "ALREADY_BET",
	}
	SicboBetRejectReason_value = map[string]int32{
		"UNSPECIFIED":            0,
		"BALANCE_NOT_ENOUGH":     1,
		"PREVIOUS_BET_NOT_EXIST": 2,
		"ALREADY_BET":            3,
	}
)

func (x SicboBetRejectReason) Enum() *SicboBetRejectReason {
	p := new(SicboBetRejectReason)
	*p = x
	return p
}

func (x SicboBetRejectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SicboBetRejectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_sicbo_api_proto_enumTypes[3].Descriptor()
}

func (SicboBetRejectReason) Type() protoreflect.EnumType {
	return &file_sicbo_api_proto_enumTypes[3]
}

func (x SicboBetRejectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SicboBetRejectReason.Descriptor instead.
func (SicboBetRejectReason) EnumDescriptor() ([]byte, []int) {
	return file_sicbo_api_proto_rawDescGZIP(), []int{3}
}

type SicboBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chips int64        `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	Cell  SicboBetCell `protobuf:"varint,3,opt,name=cell,proto3,enum=api.SicboBetCell" json:"cell,omitempty"`
}

func (x *SicboBet) Reset() {
	*x = SicboBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sicbo_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SicboBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SicboBet) ProtoMessage() {}

func (x *SicboBet) ProtoReflect() protoreflect.Message {
	mi := &file_sicbo_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SicboBet.ProtoReflect.Descriptor instead.
func (*SicboBet) Descriptor() ([]byte, []int) {
	return file_sicbo_api_proto_rawDescGZIP(), []int{0}
}

func (x *SicboBet) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *SicboBet) GetCell() SicboBetCell {
	if x != nil {
		return x.Cell
	}
	return SicboBetCell_SICBO_CELL_UNSPECIFIED
}

type SicboBetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bet   *SicboBet `protobuf:"bytes,1,opt,name=bet,proto3" json:"bet,omitempty"`
	IsWin bool      `protobuf:"varint,2,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
}

func (x *SicboBetResult) Reset() {
	*x = SicboBetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sicbo_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SicboBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SicboBetResult) ProtoMessage() {}

func (x *SicboBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_sicbo_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SicboBetResult.ProtoReflect.Descriptor instead.
func (*SicboBetResult) Descriptor() ([]byte, []int) {
	return file_sicbo_api_proto_rawDescGZIP(), []int{1}
}

func (x *SicboBetResult) GetBet() *SicboBet {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *SicboBetResult) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

type SicboPlayerBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string         `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Action SicboBetAction `protobuf:"varint,2,opt,name=action,proto3,enum=api.SicboBetAction" json:"action,omitempty"`
	Bets   []*SicboBet    `protobuf:"bytes,3,rep,name=bets,proto3" json:"bets,omitempty"`
}

func (x *SicboPlayerBet) Reset() {
	*x = SicboPlayerBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sicbo_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SicboPlayerBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SicboPlayerBet) ProtoMessage() {}

func (x *SicboPlayerBet) ProtoReflect() protoreflect.Message {
	mi := &file_sicbo_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SicboPlayerBet.ProtoReflect.Descriptor instead.
func (*SicboPlayerBet) Descriptor() ([]byte, []int) {
	return file_sicbo_api_proto_rawDescGZIP(), []int{2}
}

func (x *SicboPlayerBet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SicboPlayerBet) GetAction() SicboBetAction {
	if x != nil {
		return x.Action
	}
	return SicboBetAction_SICBO_BET_NORMAL
}

func (x *SicboPlayerBet) GetBets() []*SicboBet {
	if x != nil {
		return x.Bets
	}
	return nil
}

type SicboPlayerBetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string            `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	List   []*SicboBetResult `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SicboPlayerBetResult) Reset() {
	*x = SicboPlayerBetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sicbo_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SicboPlayerBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SicboPlayerBetResult) ProtoMessage() {}

func (x *SicboPlayerBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_sicbo_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SicboPlayerBetResult.ProtoReflect.Descriptor instead.
func (*SicboPlayerBetResult) Descriptor() ([]byte, []int) {
	return file_sicbo_api_proto_rawDescGZIP(), []int{3}
}

func (x *SicboPlayerBetResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SicboPlayerBetResult) GetList() []*SicboBetResult {
	if x != nil {
		return x.List
	}
	return nil
}

type SicboHand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dices []Dice `protobuf:"varint,1,rep,packed,name=dices,proto3,enum=api.Dice" json:"dices,omitempty"`
}

func (x *SicboHand) Reset() {
	*x = SicboHand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sicbo_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SicboHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SicboHand) ProtoMessage() {}

func (x *SicboHand) ProtoReflect() protoreflect.Message {
	mi := &file_sicbo_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SicboHand.ProtoReflect.Descriptor instead.
func (*SicboHand) Descriptor() ([]byte, []int) {
	return file_sicbo_api_proto_rawDescGZIP(), []int{4}
}

func (x *SicboHand) GetDices() []Dice {
	if x != nil {
		return x.Dices
	}
	return nil
}

type SicboGameFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hand          *SicboHand              `protobuf:"bytes,1,opt,name=hand,proto3" json:"hand,omitempty"`
	WinCells      []SicboBetCell          `protobuf:"varint,3,rep,packed,name=win_cells,json=winCells,proto3,enum=api.SicboBetCell" json:"win_cells,omitempty"`
	ListBetResult []*SicboPlayerBetResult `protobuf:"bytes,4,rep,name=list_bet_result,json=listBetResult,proto3" json:"list_bet_result,omitempty"`
}

func (x *SicboGameFinish) Reset() {
	*x = SicboGameFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sicbo_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SicboGameFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SicboGameFinish) ProtoMessage() {}

func (x *SicboGameFinish) ProtoReflect() protoreflect.Message {
	mi := &file_sicbo_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SicboGameFinish.ProtoReflect.Descriptor instead.
func (*SicboGameFinish) Descriptor() ([]byte, []int) {
	return file_sicbo_api_proto_rawDescGZIP(), []int{5}
}

func (x *SicboGameFinish) GetHand() *SicboHand {
	if x != nil {
		return x.Hand
	}
	return nil
}

func (x *SicboGameFinish) GetWinCells() []SicboBetCell {
	if x != nil {
		return x.WinCells
	}
	return nil
}

func (x *SicboGameFinish) GetListBetResult() []*SicboPlayerBetResult {
	if x != nil {
		return x.ListBetResult
	}
	return nil
}

type SicboBetCellInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cell     SicboBetCell `protobuf:"varint,1,opt,name=cell,proto3,enum=api.SicboBetCell" json:"cell,omitempty"`
	Chips    int64        `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	NUserBet int32        `protobuf:"varint,3,opt,name=n_user_bet,json=nUserBet,proto3" json:"n_user_bet,omitempty"`
}

func (x *SicboBetCellInfo) Reset() {
	*x = SicboBetCellInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sicbo_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SicboBetCellInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SicboBetCellInfo) ProtoMessage() {}

func (x *SicboBetCellInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sicbo_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SicboBetCellInfo.ProtoReflect.Descriptor instead.
func (*SicboBetCellInfo) Descriptor() ([]byte, []int) {
	return file_sicbo_api_proto_rawDescGZIP(), []int{6}
}

func (x *SicboBetCellInfo) GetCell() SicboBetCell {
	if x != nil {
		return x.Cell
	}
	return SicboBetCell_SICBO_CELL_UNSPECIFIED
}

func (x *SicboBetCellInfo) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *SicboBetCellInfo) GetNUserBet() int32 {
	if x != nil {
		return x.NUserBet
	}
	return 0
}

type SicboUpdateDesk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NPlayers            int32               `protobuf:"varint,1,opt,name=n_players,json=nPlayers,proto3" json:"n_players,omitempty"`
	IsUpdateUserBet     bool                `protobuf:"varint,2,opt,name=is_update_user_bet,json=isUpdateUserBet,proto3" json:"is_update_user_bet,omitempty"`
	IsUpdateDeskCell    bool                `protobuf:"varint,3,opt,name=is_update_desk_cell,json=isUpdateDeskCell,proto3" json:"is_update_desk_cell,omitempty"`
	IsUpdateGameHistory bool                `protobuf:"varint,4,opt,name=is_update_game_history,json=isUpdateGameHistory,proto3" json:"is_update_game_history,omitempty"`
	UserBet             *SicboPlayerBet     `protobuf:"bytes,5,opt,name=user_bet,json=userBet,proto3" json:"user_bet,omitempty"`
	DeskCell            []*SicboBetCellInfo `protobuf:"bytes,6,rep,name=desk_cell,json=deskCell,proto3" json:"desk_cell,omitempty"`
	History             []*SicboHand        `protobuf:"bytes,7,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *SicboUpdateDesk) Reset() {
	*x = SicboUpdateDesk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sicbo_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SicboUpdateDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SicboUpdateDesk) ProtoMessage() {}

func (x *SicboUpdateDesk) ProtoReflect() protoreflect.Message {
	mi := &file_sicbo_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SicboUpdateDesk.ProtoReflect.Descriptor instead.
func (*SicboUpdateDesk) Descriptor() ([]byte, []int) {
	return file_sicbo_api_proto_rawDescGZIP(), []int{7}
}

func (x *SicboUpdateDesk) GetNPlayers() int32 {
	if x != nil {
		return x.NPlayers
	}
	return 0
}

func (x *SicboUpdateDesk) GetIsUpdateUserBet() bool {
	if x != nil {
		return x.IsUpdateUserBet
	}
	return false
}

func (x *SicboUpdateDesk) GetIsUpdateDeskCell() bool {
	if x != nil {
		return x.IsUpdateDeskCell
	}
	return false
}

func (x *SicboUpdateDesk) GetIsUpdateGameHistory() bool {
	if x != nil {
		return x.IsUpdateGameHistory
	}
	return false
}

func (x *SicboUpdateDesk) GetUserBet() *SicboPlayerBet {
	if x != nil {
		return x.UserBet
	}
	return nil
}

func (x *SicboUpdateDesk) GetDeskCell() []*SicboBetCellInfo {
	if x != nil {
		return x.DeskCell
	}
	return nil
}

func (x *SicboUpdateDesk) GetHistory() []*SicboHand {
	if x != nil {
		return x.History
	}
	return nil
}

type SicboActionReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason SicboBetRejectReason `protobuf:"varint,1,opt,name=reason,proto3,enum=api.SicboBetRejectReason" json:"reason,omitempty"`
}

func (x *SicboActionReject) Reset() {
	*x = SicboActionReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sicbo_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SicboActionReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SicboActionReject) ProtoMessage() {}

func (x *SicboActionReject) ProtoReflect() protoreflect.Message {
	mi := &file_sicbo_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SicboActionReject.ProtoReflect.Descriptor instead.
func (*SicboActionReject) Descriptor() ([]byte, []int) {
	return file_sicbo_api_proto_rawDescGZIP(), []int{8}
}

func (x *SicboActionReject) GetReason() SicboBetRejectReason {
	if x != nil {
		return x.Reason
	}
	return SicboBetRejectReason_UNSPECIFIED
}

var File_sicbo_api_proto protoreflect.FileDescriptor

var file_sicbo_api_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x69, 0x63, 0x62, 0x6f, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x47, 0x0a, 0x08, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x42,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x63,
	0x62, 0x6f, 0x42, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x22,
	0x48, 0x0a, 0x0e, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1f, 0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x42, 0x65, 0x74, 0x52, 0x03, 0x62,
	0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x22, 0x79, 0x0a, 0x0e, 0x53, 0x69, 0x63,
	0x62, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x63, 0x62, 0x6f,
	0x42, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x42, 0x65, 0x74, 0x52, 0x04,
	0x62, 0x65, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x14, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2c,
	0x0a, 0x09, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x69, 0x63, 0x65, 0x52, 0x05, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a,
	0x0f, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x12, 0x22, 0x0a, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x04,
	0x68, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69,
	0x63, 0x62, 0x6f, 0x42, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6d, 0x0a, 0x10, 0x53, 0x69, 0x63, 0x62, 0x6f,
	0x42, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x04, 0x63,
	0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x63, 0x62, 0x6f, 0x42, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65,
	0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x22, 0xcd, 0x02, 0x0a, 0x0f, 0x53, 0x69, 0x63, 0x62, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x43,
	0x65, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x6b,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x42, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x64, 0x65, 0x73, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x07,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x46, 0x0a, 0x11, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x42, 0x65, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2a, 0x65,
	0x0a, 0x04, 0x44, 0x69, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x54, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x43,
	0x45, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x33, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x35, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x43,
	0x45, 0x5f, 0x36, 0x10, 0x06, 0x2a, 0xc5, 0x05, 0x0a, 0x0c, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x42,
	0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x49, 0x43, 0x42,
	0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x42, 0x49, 0x47, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x31, 0x10, 0x0b, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x6c, 0x6c, 0x5f, 0x32, 0x10, 0x0c,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x33,
	0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x34, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45,
	0x4c, 0x4c, 0x5f, 0x35, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x36, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x43, 0x42,
	0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x31, 0x10,
	0x15, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f,
	0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x32, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49,
	0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f,
	0x33, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c,
	0x4c, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x34, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c,
	0x45, 0x5f, 0x35, 0x10, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43,
	0x45, 0x4c, 0x4c, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x36, 0x10, 0x1a, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x52, 0x49,
	0x50, 0x4c, 0x45, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43,
	0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x34, 0x10, 0x29, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x5f, 0x31, 0x37, 0x10, 0x2a, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x35, 0x10, 0x2b, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x31, 0x36, 0x10, 0x2c, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x43, 0x42, 0x4f,
	0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x36, 0x10, 0x2d, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x31, 0x35, 0x10, 0x2e, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x43, 0x42,
	0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x37, 0x10, 0x2f,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x31, 0x34, 0x10, 0x30, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x43,
	0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x38, 0x10,
	0x31, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x31, 0x33, 0x10, 0x32, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49,
	0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x39,
	0x10, 0x33, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x31, 0x32, 0x10, 0x34, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f,
	0x31, 0x30, 0x10, 0x35, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x43, 0x45,
	0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x31, 0x31, 0x10, 0x36, 0x2a, 0x51, 0x0a,
	0x0e, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x42, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x5f, 0x42,
	0x45, 0x54, 0x5f, 0x52, 0x45, 0x42, 0x45, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49,
	0x43, 0x42, 0x4f, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x02,
	0x2a, 0x6c, 0x0a, 0x14, 0x53, 0x69, 0x63, 0x62, 0x6f, 0x42, 0x65, 0x74, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x42, 0x45,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x42, 0x45, 0x54, 0x10, 0x03, 0x42, 0x37,
	0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x69, 0x61,
	0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x67, 0x70, 0x2d, 0x62, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sicbo_api_proto_rawDescOnce sync.Once
	file_sicbo_api_proto_rawDescData = file_sicbo_api_proto_rawDesc
)

func file_sicbo_api_proto_rawDescGZIP() []byte {
	file_sicbo_api_proto_rawDescOnce.Do(func() {
		file_sicbo_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_sicbo_api_proto_rawDescData)
	})
	return file_sicbo_api_proto_rawDescData
}

var file_sicbo_api_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_sicbo_api_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_sicbo_api_proto_goTypes = []interface{}{
	(Dice)(0),                    // 0: api.Dice
	(SicboBetCell)(0),            // 1: api.SicboBetCell
	(SicboBetAction)(0),          // 2: api.SicboBetAction
	(SicboBetRejectReason)(0),    // 3: api.SicboBetRejectReason
	(*SicboBet)(nil),             // 4: api.SicboBet
	(*SicboBetResult)(nil),       // 5: api.SicboBetResult
	(*SicboPlayerBet)(nil),       // 6: api.SicboPlayerBet
	(*SicboPlayerBetResult)(nil), // 7: api.SicboPlayerBetResult
	(*SicboHand)(nil),            // 8: api.SicboHand
	(*SicboGameFinish)(nil),      // 9: api.SicboGameFinish
	(*SicboBetCellInfo)(nil),     // 10: api.SicboBetCellInfo
	(*SicboUpdateDesk)(nil),      // 11: api.SicboUpdateDesk
	(*SicboActionReject)(nil),    // 12: api.SicboActionReject
}
var file_sicbo_api_proto_depIdxs = []int32{
	1,  // 0: api.SicboBet.cell:type_name -> api.SicboBetCell
	4,  // 1: api.SicboBetResult.bet:type_name -> api.SicboBet
	2,  // 2: api.SicboPlayerBet.action:type_name -> api.SicboBetAction
	4,  // 3: api.SicboPlayerBet.bets:type_name -> api.SicboBet
	5,  // 4: api.SicboPlayerBetResult.list:type_name -> api.SicboBetResult
	0,  // 5: api.SicboHand.dices:type_name -> api.Dice
	8,  // 6: api.SicboGameFinish.hand:type_name -> api.SicboHand
	1,  // 7: api.SicboGameFinish.win_cells:type_name -> api.SicboBetCell
	7,  // 8: api.SicboGameFinish.list_bet_result:type_name -> api.SicboPlayerBetResult
	1,  // 9: api.SicboBetCellInfo.cell:type_name -> api.SicboBetCell
	6,  // 10: api.SicboUpdateDesk.user_bet:type_name -> api.SicboPlayerBet
	10, // 11: api.SicboUpdateDesk.desk_cell:type_name -> api.SicboBetCellInfo
	8,  // 12: api.SicboUpdateDesk.history:type_name -> api.SicboHand
	3,  // 13: api.SicboActionReject.reason:type_name -> api.SicboBetRejectReason
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_sicbo_api_proto_init() }
func file_sicbo_api_proto_init() {
	if File_sicbo_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sicbo_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SicboBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sicbo_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SicboBetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sicbo_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SicboPlayerBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sicbo_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SicboPlayerBetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sicbo_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SicboHand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sicbo_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SicboGameFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sicbo_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SicboBetCellInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sicbo_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SicboUpdateDesk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sicbo_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SicboActionReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sicbo_api_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sicbo_api_proto_goTypes,
		DependencyIndexes: file_sicbo_api_proto_depIdxs,
		EnumInfos:         file_sicbo_api_proto_enumTypes,
		MessageInfos:      file_sicbo_api_proto_msgTypes,
	}.Build()
	File_sicbo_api_proto = out.File
	file_sicbo_api_proto_rawDesc = nil
	file_sicbo_api_proto_goTypes = nil
	file_sicbo_api_proto_depIdxs = nil
}
