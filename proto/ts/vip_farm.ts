// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: vip_farm.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import Long = require("long");

export const protobufPackage = "proto";

export enum VipFarmCumulativeType {
  VIP_FARM_CUMULATIVE_TYPE_UNKNOWN = 0,
  VIP_FARM_CUMULATIVE_TYPE_CI = 1,
  VIP_FARM_CUMULATIVE_TYPE_PVP = 2,
  VIP_FARM_CUMULATIVE_TYPE_BETTING = 3,
  VIP_FARM_CUMULATIVE_TYPE_SLOT = 4,
  UNRECOGNIZED = -1,
}

export function vipFarmCumulativeTypeFromJSON(object: any): VipFarmCumulativeType {
  switch (object) {
    case 0:
    case "VIP_FARM_CUMULATIVE_TYPE_UNKNOWN":
      return VipFarmCumulativeType.VIP_FARM_CUMULATIVE_TYPE_UNKNOWN;
    case 1:
    case "VIP_FARM_CUMULATIVE_TYPE_CI":
      return VipFarmCumulativeType.VIP_FARM_CUMULATIVE_TYPE_CI;
    case 2:
    case "VIP_FARM_CUMULATIVE_TYPE_PVP":
      return VipFarmCumulativeType.VIP_FARM_CUMULATIVE_TYPE_PVP;
    case 3:
    case "VIP_FARM_CUMULATIVE_TYPE_BETTING":
      return VipFarmCumulativeType.VIP_FARM_CUMULATIVE_TYPE_BETTING;
    case 4:
    case "VIP_FARM_CUMULATIVE_TYPE_SLOT":
      return VipFarmCumulativeType.VIP_FARM_CUMULATIVE_TYPE_SLOT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VipFarmCumulativeType.UNRECOGNIZED;
  }
}

export function vipFarmCumulativeTypeToJSON(object: VipFarmCumulativeType): string {
  switch (object) {
    case VipFarmCumulativeType.VIP_FARM_CUMULATIVE_TYPE_UNKNOWN:
      return "VIP_FARM_CUMULATIVE_TYPE_UNKNOWN";
    case VipFarmCumulativeType.VIP_FARM_CUMULATIVE_TYPE_CI:
      return "VIP_FARM_CUMULATIVE_TYPE_CI";
    case VipFarmCumulativeType.VIP_FARM_CUMULATIVE_TYPE_PVP:
      return "VIP_FARM_CUMULATIVE_TYPE_PVP";
    case VipFarmCumulativeType.VIP_FARM_CUMULATIVE_TYPE_BETTING:
      return "VIP_FARM_CUMULATIVE_TYPE_BETTING";
    case VipFarmCumulativeType.VIP_FARM_CUMULATIVE_TYPE_SLOT:
      return "VIP_FARM_CUMULATIVE_TYPE_SLOT";
    case VipFarmCumulativeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface VipFarmTemplate {
  configMap: { [key: number]: VipFarmTemplate_Config };
  baseCoeffs: VipFarmTemplate_BaseCoeffByFillRate[];
  coeffScale: number;
}

export interface VipFarmTemplate_Config {
  ciCoeff: number;
  pvpCoeff: number;
  bettingCoeff: number;
  slotCoeff: number;
  chips: number;
}

export interface VipFarmTemplate_ConfigMapEntry {
  key: number;
  value: VipFarmTemplate_Config | undefined;
}

export interface VipFarmTemplate_BaseCoeffByFillRate {
  fillPercent: number;
  coeff: number;
}

export interface UserVipFarm {
  userId: string;
  level: number;
  progress: number;
}

export interface UserVipFarmProgress {
  userId: string;
  level: number;
  progress: number;
  progressLevel: number;
  currentReward: number;
  nextReward: number;
}

function createBaseVipFarmTemplate(): VipFarmTemplate {
  return { configMap: {}, baseCoeffs: [], coeffScale: 0 };
}

export const VipFarmTemplate = {
  encode(message: VipFarmTemplate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.configMap).forEach(([key, value]) => {
      VipFarmTemplate_ConfigMapEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();
    });
    for (const v of message.baseCoeffs) {
      VipFarmTemplate_BaseCoeffByFillRate.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.coeffScale !== 0) {
      writer.uint32(24).int32(message.coeffScale);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VipFarmTemplate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVipFarmTemplate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = VipFarmTemplate_ConfigMapEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.configMap[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.baseCoeffs.push(VipFarmTemplate_BaseCoeffByFillRate.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.coeffScale = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VipFarmTemplate {
    return {
      configMap: isObject(object.configMap)
        ? Object.entries(object.configMap).reduce<{ [key: number]: VipFarmTemplate_Config }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = VipFarmTemplate_Config.fromJSON(value);
          return acc;
        }, {})
        : {},
      baseCoeffs: globalThis.Array.isArray(object?.baseCoeffs)
        ? object.baseCoeffs.map((e: any) => VipFarmTemplate_BaseCoeffByFillRate.fromJSON(e))
        : [],
      coeffScale: isSet(object.coeffScale) ? globalThis.Number(object.coeffScale) : 0,
    };
  },

  toJSON(message: VipFarmTemplate): unknown {
    const obj: any = {};
    if (message.configMap) {
      const entries = Object.entries(message.configMap);
      if (entries.length > 0) {
        obj.configMap = {};
        entries.forEach(([k, v]) => {
          obj.configMap[k] = VipFarmTemplate_Config.toJSON(v);
        });
      }
    }
    if (message.baseCoeffs?.length) {
      obj.baseCoeffs = message.baseCoeffs.map((e) => VipFarmTemplate_BaseCoeffByFillRate.toJSON(e));
    }
    if (message.coeffScale !== 0) {
      obj.coeffScale = Math.round(message.coeffScale);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VipFarmTemplate>, I>>(base?: I): VipFarmTemplate {
    return VipFarmTemplate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VipFarmTemplate>, I>>(object: I): VipFarmTemplate {
    const message = createBaseVipFarmTemplate();
    message.configMap = Object.entries(object.configMap ?? {}).reduce<{ [key: number]: VipFarmTemplate_Config }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = VipFarmTemplate_Config.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.baseCoeffs = object.baseCoeffs?.map((e) => VipFarmTemplate_BaseCoeffByFillRate.fromPartial(e)) || [];
    message.coeffScale = object.coeffScale ?? 0;
    return message;
  },
};

function createBaseVipFarmTemplate_Config(): VipFarmTemplate_Config {
  return { ciCoeff: 0, pvpCoeff: 0, bettingCoeff: 0, slotCoeff: 0, chips: 0 };
}

export const VipFarmTemplate_Config = {
  encode(message: VipFarmTemplate_Config, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ciCoeff !== 0) {
      writer.uint32(8).int64(message.ciCoeff);
    }
    if (message.pvpCoeff !== 0) {
      writer.uint32(16).int64(message.pvpCoeff);
    }
    if (message.bettingCoeff !== 0) {
      writer.uint32(24).int64(message.bettingCoeff);
    }
    if (message.slotCoeff !== 0) {
      writer.uint32(32).int64(message.slotCoeff);
    }
    if (message.chips !== 0) {
      writer.uint32(40).int64(message.chips);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VipFarmTemplate_Config {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVipFarmTemplate_Config();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ciCoeff = longToNumber(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pvpCoeff = longToNumber(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.bettingCoeff = longToNumber(reader.int64() as Long);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.slotCoeff = longToNumber(reader.int64() as Long);
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.chips = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VipFarmTemplate_Config {
    return {
      ciCoeff: isSet(object.ciCoeff) ? globalThis.Number(object.ciCoeff) : 0,
      pvpCoeff: isSet(object.pvpCoeff) ? globalThis.Number(object.pvpCoeff) : 0,
      bettingCoeff: isSet(object.bettingCoeff) ? globalThis.Number(object.bettingCoeff) : 0,
      slotCoeff: isSet(object.slotCoeff) ? globalThis.Number(object.slotCoeff) : 0,
      chips: isSet(object.chips) ? globalThis.Number(object.chips) : 0,
    };
  },

  toJSON(message: VipFarmTemplate_Config): unknown {
    const obj: any = {};
    if (message.ciCoeff !== 0) {
      obj.ciCoeff = Math.round(message.ciCoeff);
    }
    if (message.pvpCoeff !== 0) {
      obj.pvpCoeff = Math.round(message.pvpCoeff);
    }
    if (message.bettingCoeff !== 0) {
      obj.bettingCoeff = Math.round(message.bettingCoeff);
    }
    if (message.slotCoeff !== 0) {
      obj.slotCoeff = Math.round(message.slotCoeff);
    }
    if (message.chips !== 0) {
      obj.chips = Math.round(message.chips);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VipFarmTemplate_Config>, I>>(base?: I): VipFarmTemplate_Config {
    return VipFarmTemplate_Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VipFarmTemplate_Config>, I>>(object: I): VipFarmTemplate_Config {
    const message = createBaseVipFarmTemplate_Config();
    message.ciCoeff = object.ciCoeff ?? 0;
    message.pvpCoeff = object.pvpCoeff ?? 0;
    message.bettingCoeff = object.bettingCoeff ?? 0;
    message.slotCoeff = object.slotCoeff ?? 0;
    message.chips = object.chips ?? 0;
    return message;
  },
};

function createBaseVipFarmTemplate_ConfigMapEntry(): VipFarmTemplate_ConfigMapEntry {
  return { key: 0, value: undefined };
}

export const VipFarmTemplate_ConfigMapEntry = {
  encode(message: VipFarmTemplate_ConfigMapEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== 0) {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      VipFarmTemplate_Config.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VipFarmTemplate_ConfigMapEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVipFarmTemplate_ConfigMapEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = longToNumber(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = VipFarmTemplate_Config.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VipFarmTemplate_ConfigMapEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? VipFarmTemplate_Config.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: VipFarmTemplate_ConfigMapEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = VipFarmTemplate_Config.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VipFarmTemplate_ConfigMapEntry>, I>>(base?: I): VipFarmTemplate_ConfigMapEntry {
    return VipFarmTemplate_ConfigMapEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VipFarmTemplate_ConfigMapEntry>, I>>(
    object: I,
  ): VipFarmTemplate_ConfigMapEntry {
    const message = createBaseVipFarmTemplate_ConfigMapEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? VipFarmTemplate_Config.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseVipFarmTemplate_BaseCoeffByFillRate(): VipFarmTemplate_BaseCoeffByFillRate {
  return { fillPercent: 0, coeff: 0 };
}

export const VipFarmTemplate_BaseCoeffByFillRate = {
  encode(message: VipFarmTemplate_BaseCoeffByFillRate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fillPercent !== 0) {
      writer.uint32(8).int32(message.fillPercent);
    }
    if (message.coeff !== 0) {
      writer.uint32(16).int32(message.coeff);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VipFarmTemplate_BaseCoeffByFillRate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVipFarmTemplate_BaseCoeffByFillRate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fillPercent = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.coeff = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VipFarmTemplate_BaseCoeffByFillRate {
    return {
      fillPercent: isSet(object.fillPercent) ? globalThis.Number(object.fillPercent) : 0,
      coeff: isSet(object.coeff) ? globalThis.Number(object.coeff) : 0,
    };
  },

  toJSON(message: VipFarmTemplate_BaseCoeffByFillRate): unknown {
    const obj: any = {};
    if (message.fillPercent !== 0) {
      obj.fillPercent = Math.round(message.fillPercent);
    }
    if (message.coeff !== 0) {
      obj.coeff = Math.round(message.coeff);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VipFarmTemplate_BaseCoeffByFillRate>, I>>(
    base?: I,
  ): VipFarmTemplate_BaseCoeffByFillRate {
    return VipFarmTemplate_BaseCoeffByFillRate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VipFarmTemplate_BaseCoeffByFillRate>, I>>(
    object: I,
  ): VipFarmTemplate_BaseCoeffByFillRate {
    const message = createBaseVipFarmTemplate_BaseCoeffByFillRate();
    message.fillPercent = object.fillPercent ?? 0;
    message.coeff = object.coeff ?? 0;
    return message;
  },
};

function createBaseUserVipFarm(): UserVipFarm {
  return { userId: "", level: 0, progress: 0 };
}

export const UserVipFarm = {
  encode(message: UserVipFarm, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.level !== 0) {
      writer.uint32(16).int64(message.level);
    }
    if (message.progress !== 0) {
      writer.uint32(24).int64(message.progress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserVipFarm {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserVipFarm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.level = longToNumber(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.progress = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserVipFarm {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      progress: isSet(object.progress) ? globalThis.Number(object.progress) : 0,
    };
  },

  toJSON(message: UserVipFarm): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.progress !== 0) {
      obj.progress = Math.round(message.progress);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserVipFarm>, I>>(base?: I): UserVipFarm {
    return UserVipFarm.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserVipFarm>, I>>(object: I): UserVipFarm {
    const message = createBaseUserVipFarm();
    message.userId = object.userId ?? "";
    message.level = object.level ?? 0;
    message.progress = object.progress ?? 0;
    return message;
  },
};

function createBaseUserVipFarmProgress(): UserVipFarmProgress {
  return { userId: "", level: 0, progress: 0, progressLevel: 0, currentReward: 0, nextReward: 0 };
}

export const UserVipFarmProgress = {
  encode(message: UserVipFarmProgress, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.level !== 0) {
      writer.uint32(16).int64(message.level);
    }
    if (message.progress !== 0) {
      writer.uint32(25).double(message.progress);
    }
    if (message.progressLevel !== 0) {
      writer.uint32(32).int32(message.progressLevel);
    }
    if (message.currentReward !== 0) {
      writer.uint32(40).int64(message.currentReward);
    }
    if (message.nextReward !== 0) {
      writer.uint32(48).int64(message.nextReward);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserVipFarmProgress {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserVipFarmProgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.level = longToNumber(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.progress = reader.double();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.progressLevel = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.currentReward = longToNumber(reader.int64() as Long);
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.nextReward = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserVipFarmProgress {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      progress: isSet(object.progress) ? globalThis.Number(object.progress) : 0,
      progressLevel: isSet(object.progressLevel) ? globalThis.Number(object.progressLevel) : 0,
      currentReward: isSet(object.currentReward) ? globalThis.Number(object.currentReward) : 0,
      nextReward: isSet(object.nextReward) ? globalThis.Number(object.nextReward) : 0,
    };
  },

  toJSON(message: UserVipFarmProgress): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.progress !== 0) {
      obj.progress = message.progress;
    }
    if (message.progressLevel !== 0) {
      obj.progressLevel = Math.round(message.progressLevel);
    }
    if (message.currentReward !== 0) {
      obj.currentReward = Math.round(message.currentReward);
    }
    if (message.nextReward !== 0) {
      obj.nextReward = Math.round(message.nextReward);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserVipFarmProgress>, I>>(base?: I): UserVipFarmProgress {
    return UserVipFarmProgress.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserVipFarmProgress>, I>>(object: I): UserVipFarmProgress {
    const message = createBaseUserVipFarmProgress();
    message.userId = object.userId ?? "";
    message.level = object.level ?? 0;
    message.progress = object.progress ?? 0;
    message.progressLevel = object.progressLevel ?? 0;
    message.currentReward = object.currentReward ?? 0;
    message.nextReward = object.nextReward ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
