// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: wallet.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "proto";

export interface Bank {
  senderId: string;
  recipientId: string;
  chips: string;
  chipsInBank: string;
  action: Bank_Action;
  balancePrev: string;
  balanceCurr: string;
  percenFee: string;
  amountFee: string;
  senderSid: string;
  recipientSid: string;
}

export enum Bank_Action {
  ACTION_UNSPECIFIED = 0,
  ACTION_SEND_GIFT = 1,
  ACTION_RECV_GIFT = 2,
  ACTION_REVERT_SEND_GIF = 3,
  ACTION_PUSH_TO_SAFE = 4,
  ACTION_WITHDRAW = 5,
  UNRECOGNIZED = -1,
}

export function bank_ActionFromJSON(object: any): Bank_Action {
  switch (object) {
    case 0:
    case "ACTION_UNSPECIFIED":
      return Bank_Action.ACTION_UNSPECIFIED;
    case 1:
    case "ACTION_SEND_GIFT":
      return Bank_Action.ACTION_SEND_GIFT;
    case 2:
    case "ACTION_RECV_GIFT":
      return Bank_Action.ACTION_RECV_GIFT;
    case 3:
    case "ACTION_REVERT_SEND_GIF":
      return Bank_Action.ACTION_REVERT_SEND_GIF;
    case 4:
    case "ACTION_PUSH_TO_SAFE":
      return Bank_Action.ACTION_PUSH_TO_SAFE;
    case 5:
    case "ACTION_WITHDRAW":
      return Bank_Action.ACTION_WITHDRAW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Bank_Action.UNRECOGNIZED;
  }
}

export function bank_ActionToJSON(object: Bank_Action): string {
  switch (object) {
    case Bank_Action.ACTION_UNSPECIFIED:
      return "ACTION_UNSPECIFIED";
    case Bank_Action.ACTION_SEND_GIFT:
      return "ACTION_SEND_GIFT";
    case Bank_Action.ACTION_RECV_GIFT:
      return "ACTION_RECV_GIFT";
    case Bank_Action.ACTION_REVERT_SEND_GIF:
      return "ACTION_REVERT_SEND_GIF";
    case Bank_Action.ACTION_PUSH_TO_SAFE:
      return "ACTION_PUSH_TO_SAFE";
    case Bank_Action.ACTION_WITHDRAW:
      return "ACTION_WITHDRAW";
    case Bank_Action.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseBank(): Bank {
  return {
    senderId: "",
    recipientId: "",
    chips: "0",
    chipsInBank: "0",
    action: 0,
    balancePrev: "0",
    balanceCurr: "0",
    percenFee: "0",
    amountFee: "0",
    senderSid: "0",
    recipientSid: "0",
  };
}

export const Bank: MessageFns<Bank> = {
  encode(message: Bank, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderId !== "") {
      writer.uint32(10).string(message.senderId);
    }
    if (message.recipientId !== "") {
      writer.uint32(18).string(message.recipientId);
    }
    if (message.chips !== "0") {
      writer.uint32(24).int64(message.chips);
    }
    if (message.chipsInBank !== "0") {
      writer.uint32(32).int64(message.chipsInBank);
    }
    if (message.action !== 0) {
      writer.uint32(40).int32(message.action);
    }
    if (message.balancePrev !== "0") {
      writer.uint32(48).int64(message.balancePrev);
    }
    if (message.balanceCurr !== "0") {
      writer.uint32(56).int64(message.balanceCurr);
    }
    if (message.percenFee !== "0") {
      writer.uint32(64).int64(message.percenFee);
    }
    if (message.amountFee !== "0") {
      writer.uint32(72).int64(message.amountFee);
    }
    if (message.senderSid !== "0") {
      writer.uint32(80).int64(message.senderSid);
    }
    if (message.recipientSid !== "0") {
      writer.uint32(88).int64(message.recipientSid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Bank {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBank();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.senderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.recipientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.chips = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.chipsInBank = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.balancePrev = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.balanceCurr = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.percenFee = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.amountFee = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.senderSid = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.recipientSid = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Bank {
    return {
      senderId: isSet(object.senderId) ? globalThis.String(object.senderId) : "",
      recipientId: isSet(object.recipientId) ? globalThis.String(object.recipientId) : "",
      chips: isSet(object.chips) ? globalThis.String(object.chips) : "0",
      chipsInBank: isSet(object.chipsInBank) ? globalThis.String(object.chipsInBank) : "0",
      action: isSet(object.action) ? bank_ActionFromJSON(object.action) : 0,
      balancePrev: isSet(object.balancePrev) ? globalThis.String(object.balancePrev) : "0",
      balanceCurr: isSet(object.balanceCurr) ? globalThis.String(object.balanceCurr) : "0",
      percenFee: isSet(object.percenFee) ? globalThis.String(object.percenFee) : "0",
      amountFee: isSet(object.amountFee) ? globalThis.String(object.amountFee) : "0",
      senderSid: isSet(object.senderSid) ? globalThis.String(object.senderSid) : "0",
      recipientSid: isSet(object.recipientSid) ? globalThis.String(object.recipientSid) : "0",
    };
  },

  toJSON(message: Bank): unknown {
    const obj: any = {};
    if (message.senderId !== "") {
      obj.senderId = message.senderId;
    }
    if (message.recipientId !== "") {
      obj.recipientId = message.recipientId;
    }
    if (message.chips !== "0") {
      obj.chips = message.chips;
    }
    if (message.chipsInBank !== "0") {
      obj.chipsInBank = message.chipsInBank;
    }
    if (message.action !== 0) {
      obj.action = bank_ActionToJSON(message.action);
    }
    if (message.balancePrev !== "0") {
      obj.balancePrev = message.balancePrev;
    }
    if (message.balanceCurr !== "0") {
      obj.balanceCurr = message.balanceCurr;
    }
    if (message.percenFee !== "0") {
      obj.percenFee = message.percenFee;
    }
    if (message.amountFee !== "0") {
      obj.amountFee = message.amountFee;
    }
    if (message.senderSid !== "0") {
      obj.senderSid = message.senderSid;
    }
    if (message.recipientSid !== "0") {
      obj.recipientSid = message.recipientSid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Bank>, I>>(base?: I): Bank {
    return Bank.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Bank>, I>>(object: I): Bank {
    const message = createBaseBank();
    message.senderId = object.senderId ?? "";
    message.recipientId = object.recipientId ?? "";
    message.chips = object.chips ?? "0";
    message.chipsInBank = object.chipsInBank ?? "0";
    message.action = object.action ?? 0;
    message.balancePrev = object.balancePrev ?? "0";
    message.balanceCurr = object.balanceCurr ?? "0";
    message.percenFee = object.percenFee ?? "0";
    message.amountFee = object.amountFee ?? "0";
    message.senderSid = object.senderSid ?? "0";
    message.recipientSid = object.recipientSid ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
