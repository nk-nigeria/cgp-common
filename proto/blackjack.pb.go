// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: blackjack.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// status for each hand, user can have maximum 2 hand ( by spliting )
type BlackjackHandType int32

const (
	BlackjackHandType_BLACKJACK_HAND_TYPE_UNSPECIFIED BlackjackHandType = 0
	BlackjackHandType_BLACKJACK_HAND_TYPE_BUSTED      BlackjackHandType = 1
	BlackjackHandType_BLACKJACK_HAND_TYPE_NORMAL      BlackjackHandType = 2
	BlackjackHandType_BLACKJACK_HAND_TYPE_21P         BlackjackHandType = 3
	BlackjackHandType_BLACKJACK_HAND_TYPE_BLACKJACK   BlackjackHandType = 4
)

// Enum value maps for BlackjackHandType.
var (
	BlackjackHandType_name = map[int32]string{
		0: "BLACKJACK_HAND_TYPE_UNSPECIFIED",
		1: "BLACKJACK_HAND_TYPE_BUSTED",
		2: "BLACKJACK_HAND_TYPE_NORMAL",
		3: "BLACKJACK_HAND_TYPE_21P",
		4: "BLACKJACK_HAND_TYPE_BLACKJACK",
	}
	BlackjackHandType_value = map[string]int32{
		"BLACKJACK_HAND_TYPE_UNSPECIFIED": 0,
		"BLACKJACK_HAND_TYPE_BUSTED":      1,
		"BLACKJACK_HAND_TYPE_NORMAL":      2,
		"BLACKJACK_HAND_TYPE_21P":         3,
		"BLACKJACK_HAND_TYPE_BLACKJACK":   4,
	}
)

func (x BlackjackHandType) Enum() *BlackjackHandType {
	p := new(BlackjackHandType)
	*p = x
	return p
}

func (x BlackjackHandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlackjackHandType) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_proto_enumTypes[0].Descriptor()
}

func (BlackjackHandType) Type() protoreflect.EnumType {
	return &file_blackjack_proto_enumTypes[0]
}

func (x BlackjackHandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlackjackHandType.Descriptor instead.
func (BlackjackHandType) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{0}
}

type BlackjackActionCode int32

const (
	BlackjackActionCode_BLACKJACK_ACTION_UNSPECIFIED BlackjackActionCode = 0
	BlackjackActionCode_BLACKJACK_ACTION_STAY        BlackjackActionCode = 1
	BlackjackActionCode_BLACKJACK_ACTION_HIT         BlackjackActionCode = 2
	BlackjackActionCode_BLACKJACK_ACTION_DOUBLE      BlackjackActionCode = 3
	BlackjackActionCode_BLACKJACK_ACTION_SPLIT       BlackjackActionCode = 4
	BlackjackActionCode_BLACKJACK_ACTION_INSURANCE   BlackjackActionCode = 5
)

// Enum value maps for BlackjackActionCode.
var (
	BlackjackActionCode_name = map[int32]string{
		0: "BLACKJACK_ACTION_UNSPECIFIED",
		1: "BLACKJACK_ACTION_STAY",
		2: "BLACKJACK_ACTION_HIT",
		3: "BLACKJACK_ACTION_DOUBLE",
		4: "BLACKJACK_ACTION_SPLIT",
		5: "BLACKJACK_ACTION_INSURANCE",
	}
	BlackjackActionCode_value = map[string]int32{
		"BLACKJACK_ACTION_UNSPECIFIED": 0,
		"BLACKJACK_ACTION_STAY":        1,
		"BLACKJACK_ACTION_HIT":         2,
		"BLACKJACK_ACTION_DOUBLE":      3,
		"BLACKJACK_ACTION_SPLIT":       4,
		"BLACKJACK_ACTION_INSURANCE":   5,
	}
)

func (x BlackjackActionCode) Enum() *BlackjackActionCode {
	p := new(BlackjackActionCode)
	*p = x
	return p
}

func (x BlackjackActionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlackjackActionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_proto_enumTypes[1].Descriptor()
}

func (BlackjackActionCode) Type() protoreflect.EnumType {
	return &file_blackjack_proto_enumTypes[1]
}

func (x BlackjackActionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlackjackActionCode.Descriptor instead.
func (BlackjackActionCode) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{1}
}

type BlackjackBetCode int32

const (
	BlackjackBetCode_BLACKJACK_BET_NORMAL BlackjackBetCode = 0
	BlackjackBetCode_BLACKJACK_BET_REBET  BlackjackBetCode = 1
	BlackjackBetCode_BLACKJACK_BET_DOUBLE BlackjackBetCode = 2
)

// Enum value maps for BlackjackBetCode.
var (
	BlackjackBetCode_name = map[int32]string{
		0: "BLACKJACK_BET_NORMAL",
		1: "BLACKJACK_BET_REBET",
		2: "BLACKJACK_BET_DOUBLE",
	}
	BlackjackBetCode_value = map[string]int32{
		"BLACKJACK_BET_NORMAL": 0,
		"BLACKJACK_BET_REBET":  1,
		"BLACKJACK_BET_DOUBLE": 2,
	}
)

func (x BlackjackBetCode) Enum() *BlackjackBetCode {
	p := new(BlackjackBetCode)
	*p = x
	return p
}

func (x BlackjackBetCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlackjackBetCode) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_proto_enumTypes[2].Descriptor()
}

func (BlackjackBetCode) Type() protoreflect.EnumType {
	return &file_blackjack_proto_enumTypes[2]
}

func (x BlackjackBetCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlackjackBetCode.Descriptor instead.
func (BlackjackBetCode) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{2}
}

type BlackjackPlayerType int32

const (
	BlackjackPlayerType_BLACKJACK_PLAYER BlackjackPlayerType = 0
	BlackjackPlayerType_BLACKJACK_BANKER BlackjackPlayerType = 1
)

// Enum value maps for BlackjackPlayerType.
var (
	BlackjackPlayerType_name = map[int32]string{
		0: "BLACKJACK_PLAYER",
		1: "BLACKJACK_BANKER",
	}
	BlackjackPlayerType_value = map[string]int32{
		"BLACKJACK_PLAYER": 0,
		"BLACKJACK_BANKER": 1,
	}
)

func (x BlackjackPlayerType) Enum() *BlackjackPlayerType {
	p := new(BlackjackPlayerType)
	*p = x
	return p
}

func (x BlackjackPlayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlackjackPlayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_proto_enumTypes[3].Descriptor()
}

func (BlackjackPlayerType) Type() protoreflect.EnumType {
	return &file_blackjack_proto_enumTypes[3]
}

func (x BlackjackPlayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlackjackPlayerType.Descriptor instead.
func (BlackjackPlayerType) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{3}
}

type BlackjackHandN0 int32

const (
	BlackjackHandN0_BLACKJACK_HAND_UNSPECIFIED BlackjackHandN0 = 0
	BlackjackHandN0_BLACKJACK_HAND_1ST         BlackjackHandN0 = 1
	BlackjackHandN0_BLACKJACK_HAND_2ND         BlackjackHandN0 = 2
)

// Enum value maps for BlackjackHandN0.
var (
	BlackjackHandN0_name = map[int32]string{
		0: "BLACKJACK_HAND_UNSPECIFIED",
		1: "BLACKJACK_HAND_1ST",
		2: "BLACKJACK_HAND_2ND",
	}
	BlackjackHandN0_value = map[string]int32{
		"BLACKJACK_HAND_UNSPECIFIED": 0,
		"BLACKJACK_HAND_1ST":         1,
		"BLACKJACK_HAND_2ND":         2,
	}
)

func (x BlackjackHandN0) Enum() *BlackjackHandN0 {
	p := new(BlackjackHandN0)
	*p = x
	return p
}

func (x BlackjackHandN0) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlackjackHandN0) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_proto_enumTypes[4].Descriptor()
}

func (BlackjackHandN0) Type() protoreflect.EnumType {
	return &file_blackjack_proto_enumTypes[4]
}

func (x BlackjackHandN0) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlackjackHandN0.Descriptor instead.
func (BlackjackHandN0) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{4}
}

type BlackjackAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Code          BlackjackActionCode    `protobuf:"varint,2,opt,name=code,proto3,enum=proto.BlackjackActionCode" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlackjackAction) Reset() {
	*x = BlackjackAction{}
	mi := &file_blackjack_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlackjackAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackAction) ProtoMessage() {}

func (x *BlackjackAction) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackAction.ProtoReflect.Descriptor instead.
func (*BlackjackAction) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{0}
}

func (x *BlackjackAction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackAction) GetCode() BlackjackActionCode {
	if x != nil {
		return x.Code
	}
	return BlackjackActionCode_BLACKJACK_ACTION_UNSPECIFIED
}

type BlackjackBet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Chips         int64                  `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`
	Code          BlackjackBetCode       `protobuf:"varint,3,opt,name=code,proto3,enum=proto.BlackjackBetCode" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlackjackBet) Reset() {
	*x = BlackjackBet{}
	mi := &file_blackjack_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlackjackBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackBet) ProtoMessage() {}

func (x *BlackjackBet) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackBet.ProtoReflect.Descriptor instead.
func (*BlackjackBet) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{1}
}

func (x *BlackjackBet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackBet) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *BlackjackBet) GetCode() BlackjackBetCode {
	if x != nil {
		return x.Code
	}
	return BlackjackBetCode_BLACKJACK_BET_NORMAL
}

// is_win: -1 -> lost, 1 -> win, 0 -> tie
type BlackjackBetResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BetAmount     int64                  `protobuf:"varint,1,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`
	WinAmount     int64                  `protobuf:"varint,2,opt,name=win_amount,json=winAmount,proto3" json:"win_amount,omitempty"`
	Total         int64                  `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	IsWin         int32                  `protobuf:"varint,4,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlackjackBetResult) Reset() {
	*x = BlackjackBetResult{}
	mi := &file_blackjack_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlackjackBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackBetResult) ProtoMessage() {}

func (x *BlackjackBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackBetResult.ProtoReflect.Descriptor instead.
func (*BlackjackBetResult) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{2}
}

func (x *BlackjackBetResult) GetBetAmount() int64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *BlackjackBetResult) GetWinAmount() int64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

func (x *BlackjackBetResult) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BlackjackBetResult) GetIsWin() int32 {
	if x != nil {
		return x.IsWin
	}
	return 0
}

type BlackjackPlayerBet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Insurance     int64                  `protobuf:"varint,2,opt,name=insurance,proto3" json:"insurance,omitempty"`
	First         int64                  `protobuf:"varint,3,opt,name=first,proto3" json:"first,omitempty"`
	Second        int64                  `protobuf:"varint,4,opt,name=second,proto3" json:"second,omitempty"`
	Balance       *BalanceUpdate         `protobuf:"bytes,14,opt,name=balance,proto3" json:"balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlackjackPlayerBet) Reset() {
	*x = BlackjackPlayerBet{}
	mi := &file_blackjack_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlackjackPlayerBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackPlayerBet) ProtoMessage() {}

func (x *BlackjackPlayerBet) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackPlayerBet.ProtoReflect.Descriptor instead.
func (*BlackjackPlayerBet) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{3}
}

func (x *BlackjackPlayerBet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackPlayerBet) GetInsurance() int64 {
	if x != nil {
		return x.Insurance
	}
	return 0
}

func (x *BlackjackPlayerBet) GetFirst() int64 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *BlackjackPlayerBet) GetSecond() int64 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *BlackjackPlayerBet) GetBalance() *BalanceUpdate {
	if x != nil {
		return x.Balance
	}
	return nil
}

type BlackjackPLayerBetResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Insurance     *BlackjackBetResult    `protobuf:"bytes,2,opt,name=insurance,proto3" json:"insurance,omitempty"`
	First         *BlackjackBetResult    `protobuf:"bytes,3,opt,name=first,proto3" json:"first,omitempty"`
	Second        *BlackjackBetResult    `protobuf:"bytes,4,opt,name=second,proto3" json:"second,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlackjackPLayerBetResult) Reset() {
	*x = BlackjackPLayerBetResult{}
	mi := &file_blackjack_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlackjackPLayerBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackPLayerBetResult) ProtoMessage() {}

func (x *BlackjackPLayerBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackPLayerBetResult.ProtoReflect.Descriptor instead.
func (*BlackjackPLayerBetResult) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{4}
}

func (x *BlackjackPLayerBetResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackPLayerBetResult) GetInsurance() *BlackjackBetResult {
	if x != nil {
		return x.Insurance
	}
	return nil
}

func (x *BlackjackPLayerBetResult) GetFirst() *BlackjackBetResult {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *BlackjackPLayerBetResult) GetSecond() *BlackjackBetResult {
	if x != nil {
		return x.Second
	}
	return nil
}

// when is_banker=true, no user_id is send along
// if is_reveal_banker_hidden_card, only all_cards is send along
type BlackjackUpdateDeal struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	IsBanker                 bool                   `protobuf:"varint,1,opt,name=is_banker,json=isBanker,proto3" json:"is_banker,omitempty"`
	IsRevealBankerHiddenCard bool                   `protobuf:"varint,2,opt,name=is_reveal_banker_hidden_card,json=isRevealBankerHiddenCard,proto3" json:"is_reveal_banker_hidden_card,omitempty"`
	UserId                   string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	HandN0                   BlackjackHandN0        `protobuf:"varint,4,opt,name=hand_n0,json=handN0,proto3,enum=proto.BlackjackHandN0" json:"hand_n0,omitempty"`
	NewCards                 []*Card                `protobuf:"bytes,5,rep,name=new_cards,json=newCards,proto3" json:"new_cards,omitempty"`
	Hand                     *BlackjackPlayerHand   `protobuf:"bytes,6,opt,name=hand,proto3" json:"hand,omitempty"`
	AllPlayerHand            []*BlackjackPlayerHand `protobuf:"bytes,7,rep,name=all_player_hand,json=allPlayerHand,proto3" json:"all_player_hand,omitempty"` // only send when user rejoin table, use it to restore the game state, one with userId = "" is banker
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *BlackjackUpdateDeal) Reset() {
	*x = BlackjackUpdateDeal{}
	mi := &file_blackjack_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlackjackUpdateDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackUpdateDeal) ProtoMessage() {}

func (x *BlackjackUpdateDeal) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackUpdateDeal.ProtoReflect.Descriptor instead.
func (*BlackjackUpdateDeal) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{5}
}

func (x *BlackjackUpdateDeal) GetIsBanker() bool {
	if x != nil {
		return x.IsBanker
	}
	return false
}

func (x *BlackjackUpdateDeal) GetIsRevealBankerHiddenCard() bool {
	if x != nil {
		return x.IsRevealBankerHiddenCard
	}
	return false
}

func (x *BlackjackUpdateDeal) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackUpdateDeal) GetHandN0() BlackjackHandN0 {
	if x != nil {
		return x.HandN0
	}
	return BlackjackHandN0_BLACKJACK_HAND_UNSPECIFIED
}

func (x *BlackjackUpdateDeal) GetNewCards() []*Card {
	if x != nil {
		return x.NewCards
	}
	return nil
}

func (x *BlackjackUpdateDeal) GetHand() *BlackjackPlayerHand {
	if x != nil {
		return x.Hand
	}
	return nil
}

func (x *BlackjackUpdateDeal) GetAllPlayerHand() []*BlackjackPlayerHand {
	if x != nil {
		return x.AllPlayerHand
	}
	return nil
}

type BlackjackLegalActions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Actions       []BlackjackActionCode  `protobuf:"varint,2,rep,packed,name=actions,proto3,enum=proto.BlackjackActionCode" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlackjackLegalActions) Reset() {
	*x = BlackjackLegalActions{}
	mi := &file_blackjack_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlackjackLegalActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackLegalActions) ProtoMessage() {}

func (x *BlackjackLegalActions) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackLegalActions.ProtoReflect.Descriptor instead.
func (*BlackjackLegalActions) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{6}
}

func (x *BlackjackLegalActions) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackLegalActions) GetActions() []BlackjackActionCode {
	if x != nil {
		return x.Actions
	}
	return nil
}

type BlackjackHand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cards         []*Card                `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	Type          BlackjackHandType      `protobuf:"varint,2,opt,name=type,proto3,enum=proto.BlackjackHandType" json:"type,omitempty"`
	Point         int32                  `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	PointCardA    string                 `protobuf:"bytes,4,opt,name=point_card_a,json=pointCardA,proto3" json:"point_card_a,omitempty"`
	MinPoint      int32                  `protobuf:"varint,5,opt,name=min_point,json=minPoint,proto3" json:"min_point,omitempty"`
	MaxPoint      int32                  `protobuf:"varint,6,opt,name=max_point,json=maxPoint,proto3" json:"max_point,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlackjackHand) Reset() {
	*x = BlackjackHand{}
	mi := &file_blackjack_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlackjackHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackHand) ProtoMessage() {}

func (x *BlackjackHand) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackHand.ProtoReflect.Descriptor instead.
func (*BlackjackHand) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{7}
}

func (x *BlackjackHand) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *BlackjackHand) GetType() BlackjackHandType {
	if x != nil {
		return x.Type
	}
	return BlackjackHandType_BLACKJACK_HAND_TYPE_UNSPECIFIED
}

func (x *BlackjackHand) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *BlackjackHand) GetPointCardA() string {
	if x != nil {
		return x.PointCardA
	}
	return ""
}

func (x *BlackjackHand) GetMinPoint() int32 {
	if x != nil {
		return x.MinPoint
	}
	return 0
}

func (x *BlackjackHand) GetMaxPoint() int32 {
	if x != nil {
		return x.MaxPoint
	}
	return 0
}

type BlackjackPlayerHand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	First         *BlackjackHand         `protobuf:"bytes,2,opt,name=first,proto3" json:"first,omitempty"`
	Second        *BlackjackHand         `protobuf:"bytes,3,opt,name=second,proto3" json:"second,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlackjackPlayerHand) Reset() {
	*x = BlackjackPlayerHand{}
	mi := &file_blackjack_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlackjackPlayerHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackPlayerHand) ProtoMessage() {}

func (x *BlackjackPlayerHand) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackPlayerHand.ProtoReflect.Descriptor instead.
func (*BlackjackPlayerHand) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{8}
}

func (x *BlackjackPlayerHand) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackPlayerHand) GetFirst() *BlackjackHand {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *BlackjackPlayerHand) GetSecond() *BlackjackHand {
	if x != nil {
		return x.Second
	}
	return nil
}

// case player have 2 hands then hand <- 0|1 else 0
type BlackjackPlayerTurn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsPlayer      string                 `protobuf:"bytes,1,opt,name=is_player,json=isPlayer,proto3" json:"is_player,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	HandN0        BlackjackHandN0        `protobuf:"varint,3,opt,name=hand_n0,json=handN0,proto3,enum=proto.BlackjackHandN0" json:"hand_n0,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlackjackPlayerTurn) Reset() {
	*x = BlackjackPlayerTurn{}
	mi := &file_blackjack_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlackjackPlayerTurn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackPlayerTurn) ProtoMessage() {}

func (x *BlackjackPlayerTurn) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackPlayerTurn.ProtoReflect.Descriptor instead.
func (*BlackjackPlayerTurn) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{9}
}

func (x *BlackjackPlayerTurn) GetIsPlayer() string {
	if x != nil {
		return x.IsPlayer
	}
	return ""
}

func (x *BlackjackPlayerTurn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BlackjackPlayerTurn) GetHandN0() BlackjackHandN0 {
	if x != nil {
		return x.HandN0
	}
	return BlackjackHandN0_BLACKJACK_HAND_UNSPECIFIED
}

type BlackjackUpdateDesk struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	IsInsuranceTurnEnter bool                   `protobuf:"varint,1,opt,name=is_insurance_turn_enter,json=isInsuranceTurnEnter,proto3" json:"is_insurance_turn_enter,omitempty"`
	IsNewTurn            bool                   `protobuf:"varint,2,opt,name=is_new_turn,json=isNewTurn,proto3" json:"is_new_turn,omitempty"`
	InTurn               string                 `protobuf:"bytes,3,opt,name=in_turn,json=inTurn,proto3" json:"in_turn,omitempty"`
	Hand_N0              BlackjackHandN0        `protobuf:"varint,4,opt,name=hand_N0,json=handN0,proto3,enum=proto.BlackjackHandN0" json:"hand_N0,omitempty"`
	IsUpdateBet          bool                   `protobuf:"varint,5,opt,name=is_update_bet,json=isUpdateBet,proto3" json:"is_update_bet,omitempty"`
	Bet                  *BlackjackPlayerBet    `protobuf:"bytes,6,opt,name=bet,proto3" json:"bet,omitempty"`
	IsUpdateLegalAction  bool                   `protobuf:"varint,7,opt,name=is_update_legal_action,json=isUpdateLegalAction,proto3" json:"is_update_legal_action,omitempty"`
	Actions              *BlackjackLegalActions `protobuf:"bytes,8,opt,name=actions,proto3" json:"actions,omitempty"`
	IsSplitHand          bool                   `protobuf:"varint,9,opt,name=is_split_hand,json=isSplitHand,proto3" json:"is_split_hand,omitempty"`
	Hand                 *BlackjackPlayerHand   `protobuf:"bytes,10,opt,name=hand,proto3" json:"hand,omitempty"`
	IsBankerNotBlackjack bool                   `protobuf:"varint,11,opt,name=is_banker_not_blackjack,json=isBankerNotBlackjack,proto3" json:"is_banker_not_blackjack,omitempty"`
	PlayersBet           []*BlackjackPlayerBet  `protobuf:"bytes,12,rep,name=players_bet,json=playersBet,proto3" json:"players_bet,omitempty"`
	Error                *Error                 `protobuf:"bytes,13,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *BlackjackUpdateDesk) Reset() {
	*x = BlackjackUpdateDesk{}
	mi := &file_blackjack_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlackjackUpdateDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackUpdateDesk) ProtoMessage() {}

func (x *BlackjackUpdateDesk) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackUpdateDesk.ProtoReflect.Descriptor instead.
func (*BlackjackUpdateDesk) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{10}
}

func (x *BlackjackUpdateDesk) GetIsInsuranceTurnEnter() bool {
	if x != nil {
		return x.IsInsuranceTurnEnter
	}
	return false
}

func (x *BlackjackUpdateDesk) GetIsNewTurn() bool {
	if x != nil {
		return x.IsNewTurn
	}
	return false
}

func (x *BlackjackUpdateDesk) GetInTurn() string {
	if x != nil {
		return x.InTurn
	}
	return ""
}

func (x *BlackjackUpdateDesk) GetHand_N0() BlackjackHandN0 {
	if x != nil {
		return x.Hand_N0
	}
	return BlackjackHandN0_BLACKJACK_HAND_UNSPECIFIED
}

func (x *BlackjackUpdateDesk) GetIsUpdateBet() bool {
	if x != nil {
		return x.IsUpdateBet
	}
	return false
}

func (x *BlackjackUpdateDesk) GetBet() *BlackjackPlayerBet {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *BlackjackUpdateDesk) GetIsUpdateLegalAction() bool {
	if x != nil {
		return x.IsUpdateLegalAction
	}
	return false
}

func (x *BlackjackUpdateDesk) GetActions() *BlackjackLegalActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *BlackjackUpdateDesk) GetIsSplitHand() bool {
	if x != nil {
		return x.IsSplitHand
	}
	return false
}

func (x *BlackjackUpdateDesk) GetHand() *BlackjackPlayerHand {
	if x != nil {
		return x.Hand
	}
	return nil
}

func (x *BlackjackUpdateDesk) GetIsBankerNotBlackjack() bool {
	if x != nil {
		return x.IsBankerNotBlackjack
	}
	return false
}

func (x *BlackjackUpdateDesk) GetPlayersBet() []*BlackjackPlayerBet {
	if x != nil {
		return x.PlayersBet
	}
	return nil
}

func (x *BlackjackUpdateDesk) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BlackjackUpdateFinish struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	BetResults    []*BlackjackPLayerBetResult `protobuf:"bytes,1,rep,name=bet_results,json=betResults,proto3" json:"bet_results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlackjackUpdateFinish) Reset() {
	*x = BlackjackUpdateFinish{}
	mi := &file_blackjack_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlackjackUpdateFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackjackUpdateFinish) ProtoMessage() {}

func (x *BlackjackUpdateFinish) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackjackUpdateFinish.ProtoReflect.Descriptor instead.
func (*BlackjackUpdateFinish) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{11}
}

func (x *BlackjackUpdateFinish) GetBetResults() []*BlackjackPLayerBetResult {
	if x != nil {
		return x.BetResults
	}
	return nil
}

var File_blackjack_proto protoreflect.FileDescriptor

const file_blackjack_proto_rawDesc = "" +
	"\n" +
	"\x0fblackjack.proto\x12\x05proto\x1a\x11game_common.proto\x1a\x13chinese_poker.proto\x1a\fcommon.proto\"Z\n" +
	"\x0fBlackjackAction\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12.\n" +
	"\x04code\x18\x02 \x01(\x0e2\x1a.proto.BlackjackActionCodeR\x04code\"j\n" +
	"\fBlackjackBet\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05chips\x18\x02 \x01(\x03R\x05chips\x12+\n" +
	"\x04code\x18\x03 \x01(\x0e2\x17.proto.BlackjackBetCodeR\x04code\"\x7f\n" +
	"\x12BlackjackBetResult\x12\x1d\n" +
	"\n" +
	"bet_amount\x18\x01 \x01(\x03R\tbetAmount\x12\x1d\n" +
	"\n" +
	"win_amount\x18\x02 \x01(\x03R\twinAmount\x12\x14\n" +
	"\x05total\x18\x03 \x01(\x03R\x05total\x12\x15\n" +
	"\x06is_win\x18\x04 \x01(\x05R\x05isWin\"\xa9\x01\n" +
	"\x12BlackjackPlayerBet\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1c\n" +
	"\tinsurance\x18\x02 \x01(\x03R\tinsurance\x12\x14\n" +
	"\x05first\x18\x03 \x01(\x03R\x05first\x12\x16\n" +
	"\x06second\x18\x04 \x01(\x03R\x06second\x12.\n" +
	"\abalance\x18\x0e \x01(\v2\x14.proto.BalanceUpdateR\abalance\"\xd0\x01\n" +
	"\x18BlackjackPLayerBetResult\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x127\n" +
	"\tinsurance\x18\x02 \x01(\v2\x19.proto.BlackjackBetResultR\tinsurance\x12/\n" +
	"\x05first\x18\x03 \x01(\v2\x19.proto.BlackjackBetResultR\x05first\x121\n" +
	"\x06second\x18\x04 \x01(\v2\x19.proto.BlackjackBetResultR\x06second\"\xda\x02\n" +
	"\x13BlackjackUpdateDeal\x12\x1b\n" +
	"\tis_banker\x18\x01 \x01(\bR\bisBanker\x12>\n" +
	"\x1cis_reveal_banker_hidden_card\x18\x02 \x01(\bR\x18isRevealBankerHiddenCard\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12/\n" +
	"\ahand_n0\x18\x04 \x01(\x0e2\x16.proto.BlackjackHandN0R\x06handN0\x12(\n" +
	"\tnew_cards\x18\x05 \x03(\v2\v.proto.CardR\bnewCards\x12.\n" +
	"\x04hand\x18\x06 \x01(\v2\x1a.proto.BlackjackPlayerHandR\x04hand\x12B\n" +
	"\x0fall_player_hand\x18\a \x03(\v2\x1a.proto.BlackjackPlayerHandR\rallPlayerHand\"f\n" +
	"\x15BlackjackLegalActions\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x124\n" +
	"\aactions\x18\x02 \x03(\x0e2\x1a.proto.BlackjackActionCodeR\aactions\"\xd2\x01\n" +
	"\rBlackjackHand\x12!\n" +
	"\x05cards\x18\x01 \x03(\v2\v.proto.CardR\x05cards\x12,\n" +
	"\x04type\x18\x02 \x01(\x0e2\x18.proto.BlackjackHandTypeR\x04type\x12\x14\n" +
	"\x05point\x18\x03 \x01(\x05R\x05point\x12 \n" +
	"\fpoint_card_a\x18\x04 \x01(\tR\n" +
	"pointCardA\x12\x1b\n" +
	"\tmin_point\x18\x05 \x01(\x05R\bminPoint\x12\x1b\n" +
	"\tmax_point\x18\x06 \x01(\x05R\bmaxPoint\"\x88\x01\n" +
	"\x13BlackjackPlayerHand\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12*\n" +
	"\x05first\x18\x02 \x01(\v2\x14.proto.BlackjackHandR\x05first\x12,\n" +
	"\x06second\x18\x03 \x01(\v2\x14.proto.BlackjackHandR\x06second\"|\n" +
	"\x13BlackjackPlayerTurn\x12\x1b\n" +
	"\tis_player\x18\x01 \x01(\tR\bisPlayer\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12/\n" +
	"\ahand_n0\x18\x03 \x01(\x0e2\x16.proto.BlackjackHandN0R\x06handN0\"\xdf\x04\n" +
	"\x13BlackjackUpdateDesk\x125\n" +
	"\x17is_insurance_turn_enter\x18\x01 \x01(\bR\x14isInsuranceTurnEnter\x12\x1e\n" +
	"\vis_new_turn\x18\x02 \x01(\bR\tisNewTurn\x12\x17\n" +
	"\ain_turn\x18\x03 \x01(\tR\x06inTurn\x12/\n" +
	"\ahand_N0\x18\x04 \x01(\x0e2\x16.proto.BlackjackHandN0R\x06handN0\x12\"\n" +
	"\ris_update_bet\x18\x05 \x01(\bR\visUpdateBet\x12+\n" +
	"\x03bet\x18\x06 \x01(\v2\x19.proto.BlackjackPlayerBetR\x03bet\x123\n" +
	"\x16is_update_legal_action\x18\a \x01(\bR\x13isUpdateLegalAction\x126\n" +
	"\aactions\x18\b \x01(\v2\x1c.proto.BlackjackLegalActionsR\aactions\x12\"\n" +
	"\ris_split_hand\x18\t \x01(\bR\visSplitHand\x12.\n" +
	"\x04hand\x18\n" +
	" \x01(\v2\x1a.proto.BlackjackPlayerHandR\x04hand\x125\n" +
	"\x17is_banker_not_blackjack\x18\v \x01(\bR\x14isBankerNotBlackjack\x12:\n" +
	"\vplayers_bet\x18\f \x03(\v2\x19.proto.BlackjackPlayerBetR\n" +
	"playersBet\x12\"\n" +
	"\x05error\x18\r \x01(\v2\f.proto.ErrorR\x05error\"Y\n" +
	"\x15BlackjackUpdateFinish\x12@\n" +
	"\vbet_results\x18\x01 \x03(\v2\x1f.proto.BlackjackPLayerBetResultR\n" +
	"betResults*\xb8\x01\n" +
	"\x11BlackjackHandType\x12#\n" +
	"\x1fBLACKJACK_HAND_TYPE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aBLACKJACK_HAND_TYPE_BUSTED\x10\x01\x12\x1e\n" +
	"\x1aBLACKJACK_HAND_TYPE_NORMAL\x10\x02\x12\x1b\n" +
	"\x17BLACKJACK_HAND_TYPE_21P\x10\x03\x12!\n" +
	"\x1dBLACKJACK_HAND_TYPE_BLACKJACK\x10\x04*\xc5\x01\n" +
	"\x13BlackjackActionCode\x12 \n" +
	"\x1cBLACKJACK_ACTION_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15BLACKJACK_ACTION_STAY\x10\x01\x12\x18\n" +
	"\x14BLACKJACK_ACTION_HIT\x10\x02\x12\x1b\n" +
	"\x17BLACKJACK_ACTION_DOUBLE\x10\x03\x12\x1a\n" +
	"\x16BLACKJACK_ACTION_SPLIT\x10\x04\x12\x1e\n" +
	"\x1aBLACKJACK_ACTION_INSURANCE\x10\x05*_\n" +
	"\x10BlackjackBetCode\x12\x18\n" +
	"\x14BLACKJACK_BET_NORMAL\x10\x00\x12\x17\n" +
	"\x13BLACKJACK_BET_REBET\x10\x01\x12\x18\n" +
	"\x14BLACKJACK_BET_DOUBLE\x10\x02*A\n" +
	"\x13BlackjackPlayerType\x12\x14\n" +
	"\x10BLACKJACK_PLAYER\x10\x00\x12\x14\n" +
	"\x10BLACKJACK_BANKER\x10\x01*a\n" +
	"\x0fBlackjackHandN0\x12\x1e\n" +
	"\x1aBLACKJACK_HAND_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12BLACKJACK_HAND_1ST\x10\x01\x12\x16\n" +
	"\x12BLACKJACK_HAND_2ND\x10\x02B4Z2github.com/nk-nigeria/whot-module/cgp-common/protob\x06proto3"

var (
	file_blackjack_proto_rawDescOnce sync.Once
	file_blackjack_proto_rawDescData []byte
)

func file_blackjack_proto_rawDescGZIP() []byte {
	file_blackjack_proto_rawDescOnce.Do(func() {
		file_blackjack_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_blackjack_proto_rawDesc), len(file_blackjack_proto_rawDesc)))
	})
	return file_blackjack_proto_rawDescData
}

var file_blackjack_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_blackjack_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_blackjack_proto_goTypes = []any{
	(BlackjackHandType)(0),           // 0: proto.BlackjackHandType
	(BlackjackActionCode)(0),         // 1: proto.BlackjackActionCode
	(BlackjackBetCode)(0),            // 2: proto.BlackjackBetCode
	(BlackjackPlayerType)(0),         // 3: proto.BlackjackPlayerType
	(BlackjackHandN0)(0),             // 4: proto.BlackjackHandN0
	(*BlackjackAction)(nil),          // 5: proto.BlackjackAction
	(*BlackjackBet)(nil),             // 6: proto.BlackjackBet
	(*BlackjackBetResult)(nil),       // 7: proto.BlackjackBetResult
	(*BlackjackPlayerBet)(nil),       // 8: proto.BlackjackPlayerBet
	(*BlackjackPLayerBetResult)(nil), // 9: proto.BlackjackPLayerBetResult
	(*BlackjackUpdateDeal)(nil),      // 10: proto.BlackjackUpdateDeal
	(*BlackjackLegalActions)(nil),    // 11: proto.BlackjackLegalActions
	(*BlackjackHand)(nil),            // 12: proto.BlackjackHand
	(*BlackjackPlayerHand)(nil),      // 13: proto.BlackjackPlayerHand
	(*BlackjackPlayerTurn)(nil),      // 14: proto.BlackjackPlayerTurn
	(*BlackjackUpdateDesk)(nil),      // 15: proto.BlackjackUpdateDesk
	(*BlackjackUpdateFinish)(nil),    // 16: proto.BlackjackUpdateFinish
	(*BalanceUpdate)(nil),            // 17: proto.BalanceUpdate
	(*Card)(nil),                     // 18: proto.Card
	(*Error)(nil),                    // 19: proto.Error
}
var file_blackjack_proto_depIdxs = []int32{
	1,  // 0: proto.BlackjackAction.code:type_name -> proto.BlackjackActionCode
	2,  // 1: proto.BlackjackBet.code:type_name -> proto.BlackjackBetCode
	17, // 2: proto.BlackjackPlayerBet.balance:type_name -> proto.BalanceUpdate
	7,  // 3: proto.BlackjackPLayerBetResult.insurance:type_name -> proto.BlackjackBetResult
	7,  // 4: proto.BlackjackPLayerBetResult.first:type_name -> proto.BlackjackBetResult
	7,  // 5: proto.BlackjackPLayerBetResult.second:type_name -> proto.BlackjackBetResult
	4,  // 6: proto.BlackjackUpdateDeal.hand_n0:type_name -> proto.BlackjackHandN0
	18, // 7: proto.BlackjackUpdateDeal.new_cards:type_name -> proto.Card
	13, // 8: proto.BlackjackUpdateDeal.hand:type_name -> proto.BlackjackPlayerHand
	13, // 9: proto.BlackjackUpdateDeal.all_player_hand:type_name -> proto.BlackjackPlayerHand
	1,  // 10: proto.BlackjackLegalActions.actions:type_name -> proto.BlackjackActionCode
	18, // 11: proto.BlackjackHand.cards:type_name -> proto.Card
	0,  // 12: proto.BlackjackHand.type:type_name -> proto.BlackjackHandType
	12, // 13: proto.BlackjackPlayerHand.first:type_name -> proto.BlackjackHand
	12, // 14: proto.BlackjackPlayerHand.second:type_name -> proto.BlackjackHand
	4,  // 15: proto.BlackjackPlayerTurn.hand_n0:type_name -> proto.BlackjackHandN0
	4,  // 16: proto.BlackjackUpdateDesk.hand_N0:type_name -> proto.BlackjackHandN0
	8,  // 17: proto.BlackjackUpdateDesk.bet:type_name -> proto.BlackjackPlayerBet
	11, // 18: proto.BlackjackUpdateDesk.actions:type_name -> proto.BlackjackLegalActions
	13, // 19: proto.BlackjackUpdateDesk.hand:type_name -> proto.BlackjackPlayerHand
	8,  // 20: proto.BlackjackUpdateDesk.players_bet:type_name -> proto.BlackjackPlayerBet
	19, // 21: proto.BlackjackUpdateDesk.error:type_name -> proto.Error
	9,  // 22: proto.BlackjackUpdateFinish.bet_results:type_name -> proto.BlackjackPLayerBetResult
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_blackjack_proto_init() }
func file_blackjack_proto_init() {
	if File_blackjack_proto != nil {
		return
	}
	file_game_common_proto_init()
	file_chinese_poker_proto_init()
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_blackjack_proto_rawDesc), len(file_blackjack_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blackjack_proto_goTypes,
		DependencyIndexes: file_blackjack_proto_depIdxs,
		EnumInfos:         file_blackjack_proto_enumTypes,
		MessageInfos:      file_blackjack_proto_msgTypes,
	}.Build()
	File_blackjack_proto = out.File
	file_blackjack_proto_goTypes = nil
	file_blackjack_proto_depIdxs = nil
}
